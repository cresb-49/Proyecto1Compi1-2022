package com.cresb49.server.AnalizadorJava;

import com.cresb49.server.AnalizadorJava.obj.*;

import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.*;

class ParserJava;

parser code {:
    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerJava lexerJava;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;
    private SimbolosTerminalesJava simbolosTerminalesJava;
    private TablaSimbolos tablaSimbolos;
    
    public ParserJava (LexerJava lexerJava){ 
        super(lexerJava);
        this.lexerJava=lexerJava;
        this.simbolosTerminalesJava = new SimbolosTerminalesJava();
    }

    public void setTablasimbolos(TablaSimbolos tablaSimbolos){
        this.tablaSimbolos = tablaSimbolos;
    }

    public TablaSimbolos getTablaSimbolos(){
        return this.tablaSimbolos;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserJavaSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                //System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println(tok.getLexema()+" "+er);
                this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                //System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserJavaSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            //System.out.println(tok.getLexema()+" "+er);
            this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            //System.out.println(er);
        }
    }

    private void error_cast(Token operador,String tipo1,String tipo2){
        semantic_error(operador,"No se puede operar un valor: \""+tipo1+"\" con un valor:\""+tipo2+"\"");
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    private void agregarVariablesTabla(String metodo_clase, ArrayList<FilaTablaSymbolos> vars) {
        if(metodo_clase!=null && vars != null){
            FilaTablaSymbolos fila;
            for (FilaTablaSymbolos var : vars) {
                var.agregarFuncion(metodo_clase);
                fila = tablaSimbolos.buscar(var.getNombre());
                if(fila == null){
                    tablaSimbolos.getFilas().add(var);
                }else{
                    if(fila.getNombre().equals(var.getNombre()) && fila.getTipo().equals(var.getTipo())){
                        fila.mergueFuncions(var.getFunciones());
                    }else{
                        tablaSimbolos.getFilas().add(var);
                    }
                }
            }
        }
    }

    private void asignarTipoVariable(Token t, ArrayList<FilaTablaSymbolos> vars) {
        if(t!=null && vars!=null){
            for (FilaTablaSymbolos var : vars) {
                if(var!=null){
                    var.setTipo(t.getLexema());
                }
            }
        }
    }

    protected int error_sync_size() {
		return 1;
	}
:}

/* define how to connect to the scanner! */
scan with {: return this.lexerJava.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal Token  IMPORT,PUBLIC,PRIVATE,PROTECTED,FINAL,BREAK,RETURN,INT,BOOL,STR,CHAR,DOUBLE,OBJ,
                IF,ELSE,FOR,DO,WHILE,SWITCH,CASE,ID,DECIMAL,ENTERO,DIFERENTE,IGUAL,MENOR_IGUAL,
                MAYOR_IGUAL,MENOR_QUE,MAYOR_QUE,AND,OR,NOT,SUMAR,RESTAR,MUL,DIV,MAS,MENOS,PA_A,
                PA_C,CO_A,CO_C,LLA_A,LLA_C,PUNTO,COMA,DOSPUNTOS,PUNTOCOMA,STRING,CLASS,EQUAL,TRUE,
                FALSE,DEFAULT,STATIC,NEW;


/* Non terminals */
non terminal                                initJava,importJava,importJavaContenido,importJavaP,parametros,parametrosP,metodoP,sentConstru,
                                            parametrosLlamadaP,parametrosLlamada,classJava,sentencias,metodo,constructorP,declararVariables2,listaVariables3,
                                            agregarfor,ciclowhile,condicionalif,constructor,cliclofor,cicloDoWhile,sentanciaSalida,asignacionvariables,
                                            contenidoSwitch,contenidoSwitch2,condicionalSwitch,llamadaFuncion,listaVariables4;
non terminal ArrayList<FilaTablaSymbolos>   listaVariables,listaVariables2,declararVariables,contClass;
non terminal Token                          visibilidad,tipo;

non terminal                        exp,t,f,g,h,i,j,k,l;

/* Inicio de las reglas gramticales*/
initJava    ::= initJava classJava  {:
                                        System.out.println("Ejecute class java");
                                    :}
            |   importJavaP         {:
                                        System.out.println("Ejecute import");
                                    :}
            ;

/*Gramatica de imports*/

importJavaP ::= importJavaP importJava
            |   importJava
            ;
        
importJava  ::= IMPORT ID importJavaContenido
            |   error PUNTO
            |   error PUNTOCOMA
            |   error importJava
            ;

importJavaContenido ::= PUNTO ID importJavaContenido
                    |   PUNTO MUL PUNTOCOMA
                    |   PUNTOCOMA
                    |   error PUNTO
                    |   error PUNTOCOMA
                    |   error importJava
                    ;
/*Gramatica de un archivo de java*/

visibilidad ::= PRIVATE:t       {:RESULT = t;:}
            |   PUBLIC:t        {:RESULT = t;:}
            |   PROTECTED:t     {:RESULT = t;:}
            ;

tipo        ::= INT:t     {:RESULT = t;:}
            |   BOOL:t    {:RESULT = t;:}
            |   STR:t     {:RESULT = t;:}
            |   CHAR:t    {:RESULT = t;:}
            |   DOUBLE:t  {:RESULT = t;:}
            |   OBJ:t     {:RESULT = t;:}
            ;

classJava   ::= visibilidad CLASS ID:clase LLA_A contClass:vars LLA_C {:agregarVariablesTabla(clase.getLexema(),vars);:}
            |   visibilidad CLASS ID:clase LLA_A LLA_C
            |   visibilidad FINAL CLASS ID:clase LLA_A contClass:vars LLA_C {:agregarVariablesTabla(clase.getLexema(),vars);:}
            |   visibilidad FINAL CLASS ID:clase LLA_A LLA_C
            ;

contClass   ::= contClass:vars declararVariables:vars1 {:RESULT = vars; if(RESULT!=null){if(vars1!=null){RESULT.addAll(vars1);}}:}
            |   contClass:vars constructor {:RESULT = vars;:}
            |   contClass:vars metodo {:RESULT = vars;:}
            |   declararVariables:vars {:RESULT = vars;:}
            |   constructor
            |   metodo
            |   contClass error
            |   error
            ;

constructor ::= PUBLIC ID:constructor PA_A parametros PA_C constructorP {:System.out.println("Constructor: "+constructor.getLexema());:}
            |   PUBLIC ID:constructor PA_A PA_C constructorP            {:System.out.println("Constructor: "+constructor.getLexema());:}
            ;

constructorP    ::= LLA_A LLA_C
                |   LLA_A sentConstru LLA_C
                |   error declararVariables
                |   error metodo
                |   error constructor
                ;

parametros  ::= tipo:t ID:var
            |   tipo:t ID:var COMA parametrosP
            |   error PA_C
            |   error LLA_A
            |   error LLA_C
            ;

parametrosP ::= tipo:t ID:var COMA parametrosP
            |   tipo:t ID:var
            |   error PA_C
            |   error LLA_A
            |   error LLA_C
            ;

metodo      ::= visibilidad tipo:t ID:metodo PA_A PA_C metodoP               {:System.out.println("Metodo: "+metodo.getLexema()+" ,Tipo: "+t.getLexema());:}
            |   visibilidad tipo:t ID:metodo PA_A parametros PA_C metodoP    {:System.out.println("Metodo: "+metodo.getLexema()+" ,Tipo: "+t.getLexema());:}
            ;

metodoP     ::= LLA_A sentencias LLA_C
            |   LLA_A LLA_C
            |   error declararVariables
            |   error constructor
            |   error metodo
            ;

asignacionvariables ::= ID EQUAL exp PUNTOCOMA
                    ;

declararVariables   ::= visibilidad STATIC FINAL tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad STATIC tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad FINAL tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    ;

listaVariables  ::= ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var EQUAL exp {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL exp COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                ;
listaVariables2 ::= ID:var EQUAL exp COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL exp {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                ;


declararVariables2  ::= FINAL tipo:t listaVariables3 PUNTOCOMA
                    |   tipo:t listaVariables3 PUNTOCOMA
                    ;

listaVariables3 ::= ID:var  {::}
                |   ID:var EQUAL exp    {::}
                |   ID:var COMA listaVariables4
                |   ID:var EQUAL exp COMA listaVariables4
                ;
listaVariables4 ::= ID:var EQUAL exp COMA listaVariables4
                |   ID:var COMA listaVariables4
                |   ID:var EQUAL exp    {::}
                |   ID:var {::}
                ;



sentConstru ::= sentConstru llamadaFuncion
            |   sentConstru condicionalif
            |   sentConstru ciclowhile
            |   sentConstru cicloDoWhile
            |   sentConstru condicionalSwitch
            |   sentConstru cliclofor
            |   sentConstru asignacionvariables
            |   sentConstru declararVariables2
            |   llamadaFuncion
            |   condicionalif
            |   ciclowhile
            |   cicloDoWhile
            |   condicionalSwitch
            |   cliclofor
            |   asignacionvariables
            |   declararVariables2
            |   sentConstru error
            |   error
            ;

sentencias  ::= sentencias llamadaFuncion
            |   sentencias condicionalif
            |   sentencias ciclowhile
            |   sentencias cicloDoWhile
            |   sentencias condicionalSwitch
            |   sentencias cliclofor
            |   sentencias sentanciaSalida
            |   sentencias asignacionvariables
            |   sentencias declararVariables2
            |   llamadaFuncion
            |   condicionalif
            |   ciclowhile
            |   cicloDoWhile
            |   condicionalSwitch
            |   cliclofor
            |   sentanciaSalida
            |   asignacionvariables
            |   declararVariables2
            |   sentencias error
            |   error
            ;

sentanciaSalida ::= RETURN exp PUNTOCOMA
                |   RETURN PUNTOCOMA
                |   BREAK PUNTOCOMA
                ;


llamadaFuncion  ::= ID PA_A PA_C PUNTOCOMA
                |   ID PA_A parametrosLlamada PA_C PUNTOCOMA
                ;

parametrosLlamada   ::= exp
                    |   exp COMA parametrosLlamadaP
                    ;

parametrosLlamadaP  ::= exp COMA parametrosLlamadaP
                    |   exp
                    ;

cliclofor   ::= FOR PA_A INT:t ID:var EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A LLA_C
            |   FOR PA_A INT:t ID:var EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A sentencias LLA_C
            |   FOR PA_A ID EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A LLA_C
            |   FOR PA_A ID EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A sentencias LLA_C
            ;

agregarfor  ::= SUMAR
            |   RESTAR
            |   EQUAL exp
            ;

ciclowhile  ::= WHILE PA_A exp PA_C LLA_A LLA_C
            |   WHILE PA_A exp PA_C LLA_A sentencias LLA_C
            ;

cicloDoWhile    ::= DO LLA_A LLA_C WHILE PA_A exp PA_C PUNTOCOMA
                |   DO LLA_A sentencias LLA_C WHILE PA_A exp PA_C PUNTOCOMA
                ;

condicionalif   ::= IF PA_A exp PA_C LLA_A sentencias LLA_C
                |   IF PA_A exp PA_C LLA_A LLA_C
                |   IF PA_A exp PA_C LLA_A sentencias LLA_C ELSE LLA_A LLA_C
                |   IF PA_A exp PA_C LLA_A sentencias LLA_C ELSE LLA_A sentencias LLA_C
                |   IF PA_A exp PA_C LLA_A LLA_C ELSE LLA_A LLA_C
                |   IF PA_A exp PA_C LLA_A LLA_C ELSE LLA_A sentencias LLA_C
                ;

condicionalSwitch   ::= SWITCH PA_A exp PA_C LLA_A contenidoSwitch LLA_C
                    |   SWITCH PA_A exp PA_C LLA_A LLA_C
                    ;

contenidoSwitch ::= CASE exp DOSPUNTOS BREAK PUNTOCOMA
                |   CASE exp DOSPUNTOS sentencias BREAK PUNTOCOMA
                |   contenidoSwitch2 DEFAULT DOSPUNTOS sentencias
                |   contenidoSwitch2 DEFAULT DOSPUNTOS 
                |   contenidoSwitch2 CASE exp DOSPUNTOS sentencias BREAK PUNTOCOMA
                |   contenidoSwitch2 CASE exp DOSPUNTOS  BREAK PUNTOCOMA
                |   error CASE
                ;

contenidoSwitch2    ::= contenidoSwitch2 CASE exp DOSPUNTOS sentencias BREAK PUNTOCOMA
                    |   contenidoSwitch2 CASE exp DOSPUNTOS BREAK PUNTOCOMA
                    |   CASE exp DOSPUNTOS sentencias BREAK PUNTOCOMA
                    |   CASE exp DOSPUNTOS BREAK PUNTOCOMA
                    |   error CASE
                    ;

exp ::= exp OR t
    |   t
    ;

t   ::= t AND f
    |   f
    ;

f   ::= f IGUAL g
    |   f DIFERENTE g
    |   g
    ;

g   ::= g MENOR_QUE h
    |   g MAYOR_QUE h
    |   g MAYOR_IGUAL h
    |   g MENOR_IGUAL h
    |   h
    ;

h   ::= h MAS i
    |   h MENOS i
    |   i
    ;

i   ::= i MUL j
    |   i DIV j
    |   j
    ;

j   ::= NOT k
    |   MENOS k
    |   MAS k
    |   k
    ;

k   ::= l SUMAR
    |   l RESTAR
    |   l
    ;

l   ::= NEW OBJ PA_A PA_C
    |   ID
    |   TRUE
    |   FALSE
    |   DECIMAL
    |   ENTERO
    |   STRING
    |   PA_A exp PA_C
    ;