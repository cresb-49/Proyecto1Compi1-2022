package com.cresb49.serverproyecto1.analizarjava;

import com.cresb49.serverproyecto1.analizarjava.objetos.*;
import com.cresb49.serverproyecto1.consolecontrol.ConsoleControl;

import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.*;

class ParserJava;

parser code {:
    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerJava lexerJava;
    private SimbolosTerminalesJava simbolosTerminalesJava;
    private TablaSimbolos tablaSimbolos;
    private ArrayList<Clase> clases;
    private ArrayList<Metodo> metodos;
    private ConsoleControl consola;
    private String carpetaFuente;
    private String archivoAnalizado;
    private ArrayList<FilaTablaSymbolos> variablesDetectadas;
    private ArrayList<String> funcionesClase;
    
    public ParserJava (LexerJava lexerJava,TablaSimbolos tablaSimbolos,ArrayList<Clase> clases,ArrayList<Metodo> metodos){ 
        super(lexerJava);
        this.lexerJava=lexerJava;
        this.tablaSimbolos = tablaSimbolos;
        this.metodos = metodos;
        this.clases = clases;
        this.carpetaFuente=this.lexerJava.getCarpetaFunete();
        this.archivoAnalizado=this.lexerJava.getArchivoAnalizado();
        this.consola=this.lexerJava.getConsoleControl();
        this.simbolosTerminalesJava = new SimbolosTerminalesJava();
        this.variablesDetectadas = new ArrayList<>();
        this.funcionesClase = new ArrayList<>();
    }

    public TablaSimbolos getTablaSimbolos(){
        return this.tablaSimbolos;
    }

    public ArrayList<Clase> getClases() {
        return this.clases;
    }

    public ArrayList<Metodo> getMetodos() {
        return this.metodos;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserJavaSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er),carpetaFuente,archivoAnalizado));
                //System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println(tok.getLexema()+" "+er);
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er),carpetaFuente,archivoAnalizado));
                //System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er),carpetaFuente,archivoAnalizado));
            //System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserJavaSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er),carpetaFuente,archivoAnalizado));
            //System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            //System.out.println(tok.getLexema()+" "+er);
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er),carpetaFuente,archivoAnalizado));
            //System.out.println(er);
        }
    }

    private void error_cast(Token operador,String tipo1,String tipo2){
        semantic_error(operador,"No se puede operar un valor: \""+tipo1+"\" con un valor:\""+tipo2+"\"");
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto),carpetaFuente,archivoAnalizado));
    }

    private void error_exprecion(Token ref, Asignacion r, String expected) {
        if(r!=null){
            String tipo = ((r.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r.getTipo());
            String error = "No se puede operar \""+tipo+" "+ref.getLexema()+"\" valores posibles a evaluar con \""+ref.getLexema()+"\" son -> "+expected;
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }

    private void error_exprecionIzquierda(Token ref, Asignacion r, String expected) {
        if(r!=null){
            String tipo = ((r.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r.getTipo());
            String error = "No se puede operar \""+ref.getLexema()+" "+tipo+"\" valores posibles a evaluar con \""+ref.getLexema()+"\" son -> "+expected;
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }

    private void error_exprecion2(Token ref, Asignacion r1,Asignacion r2, String expected) {
        if(r1!=null && r2!=null){
            String tipo1 = ((r1.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r1.getTipo());
            String tipo2 = ((r2.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r2.getTipo());
            String error = "No se puede operar \""+tipo1+" "+ref.getLexema()+" "+tipo2+"\" valores posibles a evaluar con \""+ref.getLexema()+"\" son -> "+expected;
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }   

    private void error_comparacion(Token ref, Asignacion r1,Asignacion r2) {
        if(r1!=null && r2!=null){
            String tipo1 = ((r1.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r1.getTipo());
            String tipo2 = ((r2.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r2.getTipo());
            String error = "No se puede operar \""+tipo1+" "+ref.getLexema()+" "+tipo2+"\" debe evaluar datos del mismo tipo";
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }

    private void error_and_or(Token ref, Asignacion r1,Asignacion r2) {
        if(r1!=null && r2!=null){
            String tipo1 = ((r1.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r1.getTipo());
            String tipo2 = ((r2.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r2.getTipo());
            String error = "No se puede operar \""+tipo1+" "+ref.getLexema()+" "+tipo2+"\" debe evaluar datos del tipo booleano";
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }

    private void verificarForInit(Token ref, Asignacion asig) {
        if(asig!=null){
            if(!(asig.getTipo().equals(TablaSimbolos.INT)||asig.getTipo().equals(TablaSimbolos.COMODIN))){
                String error = "La asignacion \""+ref.getLexema()+" "+asig.getTipo()+"\" no es valida debe de ser una asignacion entera";
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,"Valor Asignacion for", ref.getLinea(), ref.getColumna()+1, error),carpetaFuente,archivoAnalizado));
            }
        }
    }
    private void verificarExprecionBool(Token ref, Asignacion asig) {
        if(asig!=null){
            if(!(asig.getTipo().equals(TablaSimbolos.BOOLEAN)||asig.getTipo().equals(TablaSimbolos.COMODIN)||asig.getTipo().equals(TablaSimbolos.VARIABLE))){
                String error = "El valor del condicional debe ser de tipo boolean valor actual -> "+asig.getTipo();
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,"Valor Condicional", ref.getLinea(), ref.getColumna()+1, error),carpetaFuente,archivoAnalizado));
            }
        }
    }

    private void agregarVariablesTabla(String metodo_clase, ArrayList<FilaTablaSymbolos> vars) {
        if(metodo_clase!=null && vars != null){            
            vars.forEach(var -> {
                var.agregarFuncion(metodo_clase);
                tablaSimbolos.getFilas().add(var);
            });
        }
    }

    private void asignarTipoVariable(Asignacion t, ArrayList<FilaTablaSymbolos> vars) {
        if(t!=null && vars!=null){
            for (FilaTablaSymbolos var : vars) {
                if(var!=null){
                    var.setTipo(t.getTipo());
                }
            }
        }
    }

    private void asignarTipoVariableYCargarVariables(Asignacion t, ArrayList<FilaTablaSymbolos> vars) {
        Collections.reverse(vars);
        if(t!=null && vars!=null){
            for (FilaTablaSymbolos var : vars) {
                if(var!=null){
                    var.setTipo(t.getTipo());
                    variablesDetectadas.add(var);
                }
            }
        }
    }

    private void cargarVariables(ArrayList<FilaTablaSymbolos> vars) {
        Collections.reverse(vars);
        if(vars!=null){
            for (FilaTablaSymbolos var : vars) {
                if(var!=null){
                    variablesDetectadas.add(var);
                }
            }
        }
    }

    private void agregarVariablesDetectadas(String metodoFuente) {
        variablesDetectadas.forEach(variablesDetectada -> {
            ArrayList<String> funciones = new ArrayList<>();
            funciones.add(metodoFuente);
            variablesDetectada.setFunciones(funciones);
            tablaSimbolos.getFilas().add(variablesDetectada);
        });
        variablesDetectadas.clear();
    }

    private ArrayList<FilaTablaSymbolos> retornarDosFuentes(ArrayList<FilaTablaSymbolos> vars, ArrayList<FilaTablaSymbolos> vars1) {
        if(vars!=null){
            if(vars1!=null){
                vars1.addAll(vars);
                return vars1;
            }else{
                return vars;
            }
        }else{
            if(vars1!=null){
                return vars1;
            }else{
                return new ArrayList<>();
            }
        }
    }

    private void agregarMetodoEncontrado(Metodo metodo, ArrayList<FilaTablaSymbolos> vars) {
        if(metodo!=null){
            this.getMetodos().add(metodo);
            this.funcionesClase.add(metodo.getNombre());
            //Convertir las variables encontradas de FilaTablasSymbolos a Parametros
            ArrayList<Parametros> p = new ArrayList<>();
            if(vars!=null){
                vars.forEach(var -> {p.add(new Parametros(var.getNombre(), var.getTipo()));});
            }
            metodo.setParametros(p);
        }
        //System.out.println(metodo.toString());
    }

    private void agregarClase(String nombre) {
        if(nombre!=null){
            ArrayList<String> tmpM = new ArrayList<>();
            this.funcionesClase.forEach(string -> {tmpM.add(string);});
            Clase tmp = new Clase(nombre,tmpM);
            this.getClases().add(tmp);
        }
        this.funcionesClase.clear();
    }

    protected int error_sync_size() {
		return 1;
	}

    private Asignacion validarMasMasMenosMenos(Asignacion r,Token ref) {
        Asignacion result = null;
        if(r!=null){
            if(!OperacionCast.validSumarRestar(r)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
                error_exprecion(ref,r,OperacionCast.expectedSumaRestar());
            }else{
                result = new Asignacion(r.getTipo(),r.getClase(),r.isConstante());
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarNegacion(Asignacion r,Token ref){
        Asignacion result = null;
        if(r!=null){
            if(!OperacionCast.validUniariBool(r)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_exprecionIzquierda(ref,r,OperacionCast.expectedUniariBool());
            }else{
                result = new Asignacion(r.getTipo(),r.getClase(),r.isConstante());
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarPositivoNegativo(Asignacion r,Token ref){
        Asignacion result = null;
        if(r!=null){
            if(!OperacionCast.validUniariNegPosi(r)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_exprecionIzquierda(ref,r,OperacionCast.expectedUnariNegPosi());
            }else{
                result = new Asignacion(r.getTipo(),r.getClase(),r.isConstante());
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarMultiDivicion(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newTypeResMulDiv(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_exprecion2(ref,r1,r2,OperacionCast.expectedResMulDiv());
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newTypeResMulDiv(r1,r2),OperacionCast.newTypeResMulDiv(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarSuma(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newTypeSum(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR); 
                error_exprecion2(ref,r1,r2,OperacionCast.expectedSum());
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newTypeSum(r1,r2),OperacionCast.newTypeSum(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarResta(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newTypeResMulDiv(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR); 
                error_exprecion2(ref,r1,r2,OperacionCast.expectedResMulDiv());
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newTypeResMulDiv(r1,r2),OperacionCast.newTypeResMulDiv(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarMenorMayor(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newMayorMenor(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
                error_exprecion2(ref,r1,r2,OperacionCast.expectedResMulDiv());
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newMayorMenor(r1,r2),OperacionCast.newMayorMenor(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarComparaciones(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newComparacion(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_comparacion(ref,r1,r2);
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newComparacion(r1,r2),OperacionCast.newComparacion(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarAndOr(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newAndOr(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_and_or(ref,r1,r2);
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newAndOr(r1,r2),OperacionCast.newAndOr(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private void validarExprecionCase(Asignacion valCase, Token ref) {
        if(valCase!=null){
            String tipo = valCase.getTipo();
            switch(tipo){
                case TablaSimbolos.CHAR:
                    /*TIPO DE DATO CORRECTO*/
                    /*
                    if(!valCase.isConstante()){
                        String error = "Error en valor de case, el dato debe ser de tipo -> [String,char,int]";
                        this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema()+" -> error :", ref.getLinea(), ref.getColumna()+1, error),carpetaFuente,archivoAnalizado));
                    }
                    */
                    break;
                case TablaSimbolos.STRING:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.INT:
                    /*TIPO DE DATO CORRECTO*/
                case TablaSimbolos.VARIABLE:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                default:
                    /*DECLARAR ERRORES*/
                    String error = "Error en valor de case, el dato debe ser de tipo -> [String,char,int]";
                    this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema()+" -> error :", ref.getLinea(), ref.getColumna()+1, error),carpetaFuente,archivoAnalizado));
            }
        }
    }

    private void validarExprecionSwitch(Asignacion valSwi, Token ref) {
        if(valSwi!=null){
            String tipo = valSwi.getTipo();
            switch(tipo){
                case TablaSimbolos.CHAR:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.STRING:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.INT:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.VARIABLE:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.COMODIN:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                default:
                    /*DECLARAR ERRORES*/
                    String error = "Error en switch solo se puede procesar datos tipo -> [String,char,int]";
                    this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,"switch( -> error )", ref.getLinea(), ref.getColumna()+1, error),carpetaFuente,archivoAnalizado));
            }
        }
    }
:}

/* define how to connect to the scanner! */
scan with {: return this.lexerJava.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal Token  IMPORT,PUBLIC,PRIVATE,PROTECTED,FINAL,BREAK,RETURN,INT,BOOL,STR,CHAR,DOUBLE,OBJ,CHAR_VAL,
                IF,ELSE,FOR,DO,WHILE,SWITCH,CASE,ID,DECIMAL,ENTERO,DIFERENTE,IGUAL,MENOR_IGUAL,THIS,
                MAYOR_IGUAL,MENOR_QUE,MAYOR_QUE,AND,OR,NOT,SUMAR,RESTAR,MUL,DIV,MAS,MENOS,PA_A,
                PA_C,CO_A,CO_C,LLA_A,LLA_C,PUNTO,COMA,DOSPUNTOS,PUNTOCOMA,STRING,CLASS,EQUAL,TRUE,
                FALSE,DEFAULT,STATIC,NEW,VOID;


/* Non terminals */
non terminal ArrayList<FilaTablaSymbolos>   initJava,initJavaP,importJava,importJavaContenido,importJavaP,metodoP,sentConstru,
                                            parametrosLlamadaP,parametrosLlamada,classJava,sentencias,metodo,constructorP,
                                            agregarfor,ciclowhile,condicionalif,constructor,cliclofor,cicloDoWhile,sentanciaSalida,asignacionvariables,
                                            contenidoSwitch,contenidoSwitch2,condicionalSwitch,llamadaFuncion;
non terminal ArrayList<FilaTablaSymbolos>   listaVariables,listaVariables2,declararVariables,contClass,parametros,parametrosP,declararVariables2,listaVariables3,
                                            listaVariables4;
non terminal Token                          visibilidad;
non terminal Asignacion                     tipo,asig;
non terminal Metodo                         configMetodo;
non terminal Asignacion                     exp,t,f,g,h,i,j,k,l,llamadaFuncionExp;

/* Inicio de las reglas gramticales*/

initJava    ::= initJavaP classJava  {:
                                        //System.out.println("Ejecute class java");
                                    :}
            |   classJava           {:
                                        //System.out.println("Ejecute class java");
                                    :}
            ;
initJavaP   ::= importJavaP {:
                                //System.out.println("Ejecute import");
                            :}
            ;


/*Gramatica de imports*/

importJavaP ::= importJavaP importJava
            |   importJava
            |   importJavaP error
            |   error
            ;
        
importJava  ::= IMPORT ID importJavaContenido
            ;

importJavaContenido ::= PUNTO ID importJavaContenido
                    |   PUNTO MUL PUNTOCOMA
                    |   PUNTOCOMA
                    ;
/*Gramatica de un archivo de java*/

visibilidad ::= PRIVATE:t       {:RESULT = t;:}
            |   PUBLIC:t        {:RESULT = t;:}
            |   PROTECTED:t     {:RESULT = t;:}
            ;

tipo        ::= INT:t     {:RESULT = new Asignacion(TablaSimbolos.INT,t.getLexema());:}
            |   BOOL:t    {:RESULT = new Asignacion(TablaSimbolos.BOOLEAN,t.getLexema());:}
            |   STR:t     {:RESULT = new Asignacion(TablaSimbolos.STRING,t.getLexema());:}
            |   CHAR:t    {:RESULT = new Asignacion(TablaSimbolos.CHAR,t.getLexema());:}
            |   DOUBLE:t  {:RESULT = new Asignacion(TablaSimbolos.DOUBLE,t.getLexema());:}
            |   OBJ:t     {:RESULT = new Asignacion(TablaSimbolos.OBJECT,t.getLexema());:}
            |   ID:t     {:RESULT = new Asignacion(TablaSimbolos.OBJECT,t.getLexema());:}
            ;

classJava   ::= visibilidad CLASS ID:clase LLA_A contClass:vars LLA_C   {:
                                                                            agregarClase(clase.getLexema());
                                                                            agregarVariablesTabla("Clase "+clase.getLexema(),vars);
                                                                        :}
            |   visibilidad CLASS ID:clase LLA_A LLA_C
            |   visibilidad FINAL CLASS ID:clase LLA_A contClass:vars LLA_C {:
                                                                                agregarVariablesTabla("Clase "+clase.getLexema(),vars);
                                                                            :}
            |   visibilidad FINAL CLASS ID:clase LLA_A LLA_C
            ;

contClass   ::= contClass:vars declararVariables:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   contClass:vars constructor {:RESULT = vars;:}
            |   contClass:vars metodo {:RESULT = vars;:}
            |   declararVariables:vars {:RESULT = vars;:}
            |   constructor
            |   metodo
            |   contClass error
            |   error
            ;

constructor ::= visibilidad ID:constructor PA_A parametros:vars PA_C constructorP:vars1 {:
                                                                                            Metodo tmp = new Metodo(constructor.getLexema(),"Constructor");
                                                                                            agregarMetodoEncontrado(tmp,vars);
                                                                                            cargarVariables(vars);
                                                                                            //agregarVariablesTabla("Constructor "+constructor.getLexema(),retornarDosFuentes(vars,vars1));
                                                                                            agregarVariablesDetectadas("Constructor "+constructor.getLexema());
                                                                                        :}
            |   visibilidad ID:constructor PA_A PA_C constructorP:vars1                 {:
                                                                                            Metodo tmp = new Metodo(constructor.getLexema(),"Constructor");
                                                                                            agregarMetodoEncontrado(tmp,new ArrayList<>());
                                                                                            //agregarVariablesTabla("Constructor "+constructor.getLexema(),vars1);
                                                                                            agregarVariablesDetectadas("Constructor "+constructor.getLexema());
                                                                                        :}
            ;

constructorP    ::= LLA_A LLA_C
                |   LLA_A sentConstru:vars LLA_C {:RESULT = vars;:}
                |   error declararVariables
                |   error metodo
                |   error constructor
                ;

parametros  ::= tipo:t ID:var {:RESULT = new ArrayList<>();RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));:}
            |   tipo:t ID:var COMA parametrosP:vars {:RESULT = vars;if(RESULT!=null){RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));}:}
            |   error PA_C
            |   error LLA_A
            |   error LLA_C
            ;

parametrosP ::= tipo:t ID:var COMA parametrosP:vars {:RESULT = vars;if(RESULT!=null){RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));}:}
            |   tipo:t ID:var {:RESULT = new ArrayList<>();RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));:}
            |   error PA_C
            |   error LLA_A
            |   error LLA_C
            ;

metodo      ::= visibilidad configMetodo:metodo PA_A PA_C metodoP:vars       {:
                                                                                if(metodo!=null){
                                                                                    agregarMetodoEncontrado(metodo,new ArrayList<>());
                                                                                    //agregarVariablesTabla("Metodo "+metodo.getNombre(),vars);
                                                                                    agregarVariablesDetectadas("Metodo "+metodo.getNombre());
                                                                                }
                                                                            :}
            |   visibilidad STATIC configMetodo:metodo PA_A PA_C metodoP:vars   {:
                                                                                    if(metodo!=null){
                                                                                        agregarMetodoEncontrado(metodo,new ArrayList<>());
                                                                                        //agregarVariablesTabla("Metodo "+metodo.getNombre(),vars);
                                                                                        agregarVariablesDetectadas("Metodo "+metodo.getNombre());
                                                                                    }
                                                                                :}
            |   visibilidad configMetodo:metodo PA_A parametros:vars PA_C metodoP:vars1 {:
                                                                                            if(metodo!=null){
                                                                                                agregarMetodoEncontrado(metodo,vars);
                                                                                                cargarVariables(vars);
                                                                                                //agregarVariablesTabla("Metodo "+metodo.getNombre(),retornarDosFuentes(vars,vars1));
                                                                                                agregarVariablesDetectadas("Metodo "+metodo.getNombre());
                                                                                            }
                                                                                        :}
            |   visibilidad STATIC configMetodo:metodo PA_A parametros:vars PA_C metodoP:vars1  {:
                                                                                                    if(metodo!=null){
                                                                                                        agregarMetodoEncontrado(metodo,vars);
                                                                                                        cargarVariables(vars);
                                                                                                        //agregarVariablesTabla("Metodo "+metodo.getNombre(),retornarDosFuentes(vars,vars1));
                                                                                                        agregarVariablesDetectadas("Metodo "+metodo.getNombre());
                                                                                                    }
                                                                                                :}
            ;

configMetodo    ::= tipo:t ID:metodo    {:RESULT = new Metodo(metodo.getLexema(),t.getTipo());:}
                |   VOID:t ID:metodo    {:RESULT = new Metodo(metodo.getLexema(),TablaSimbolos.VOID);:}
                ;

metodoP     ::= LLA_A sentencias:vars LLA_C {:RESULT = vars;:}
            |   LLA_A LLA_C
            |   error declararVariables
            |   error constructor
            |   error metodo
            ;

asignacionvariables ::= ID EQUAL asig PUNTOCOMA  //{:RESULT = new ArrayList<>();RESULT.add(new FilaTablaSymbolos(t.getLexema()));:}
                    |   THIS PUNTO ID EQUAL asig PUNTOCOMA
                    |   ID SUMAR PUNTOCOMA
                    |   ID RESTAR PUNTOCOMA
                    ;

declararVariables   ::= visibilidad STATIC FINAL tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad FINAL STATIC tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad STATIC tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad FINAL tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    ;

listaVariables  ::= ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var EQUAL asig {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL asig COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                ;
listaVariables2 ::= ID:var EQUAL asig COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL asig {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                ;


declararVariables2  ::= FINAL tipo:t listaVariables3:vars PUNTOCOMA {:asignarTipoVariableYCargarVariables(t,vars);RESULT = vars;:}
                    |   tipo:t listaVariables3:vars PUNTOCOMA {:asignarTipoVariableYCargarVariables(t,vars);RESULT = vars;:}
                    ;

listaVariables3 ::= ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var EQUAL asig {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var COMA listaVariables4:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL asig COMA listaVariables4:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                ;
listaVariables4 ::= ID:var EQUAL asig COMA listaVariables4:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var COMA listaVariables4:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL asig {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                ;



sentConstru ::= sentConstru:vars llamadaFuncion:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars condicionalif:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars ciclowhile:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars cicloDoWhile:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars condicionalSwitch:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars cliclofor:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars asignacionvariables:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars declararVariables2:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   llamadaFuncion:vars {:RESULT = vars;:}
            |   condicionalif:vars {:RESULT = vars;:}
            |   ciclowhile:vars {:RESULT = vars;:}
            |   cicloDoWhile:vars {:RESULT = vars;:}
            |   condicionalSwitch:vars {:RESULT = vars;:}
            |   cliclofor:vars {:RESULT = vars;:}
            |   asignacionvariables:vars {:RESULT = vars;:}
            |   declararVariables2:vars {:RESULT = vars;:}
            |   sentConstru error
            |   error
            ;

sentencias  ::= sentencias:vars llamadaFuncion:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars condicionalif:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars ciclowhile:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars cicloDoWhile:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars condicionalSwitch:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars cliclofor:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars sentanciaSalida:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars asignacionvariables:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars declararVariables2:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   llamadaFuncion:vars {:RESULT = vars;:}
            |   condicionalif:vars {:RESULT = vars;:}
            |   ciclowhile:vars {:RESULT = vars;:}
            |   cicloDoWhile:vars {:RESULT = vars;:}
            |   condicionalSwitch:vars {:RESULT = vars;:}
            |   cliclofor:vars {:RESULT = vars;:}
            |   sentanciaSalida:vars {:RESULT = vars;:}
            |   asignacionvariables:vars {:RESULT = vars;:}
            |   declararVariables2:vars {:RESULT = vars;:}
            |   sentencias:vars error   {:RESULT = vars;:}    
            |   error
            ;

sentanciaSalida ::= RETURN exp PUNTOCOMA
                |   RETURN PUNTOCOMA
                |   BREAK PUNTOCOMA
                ;


llamadaFuncion  ::= ID PA_A PA_C PUNTOCOMA
                |   ID PA_A parametrosLlamada PA_C PUNTOCOMA
                |   THIS PUNTO ID PA_A PA_C PUNTOCOMA
                |   THIS PUNTO ID PA_A parametrosLlamada PA_C PUNTOCOMA
                ;

parametrosLlamada   ::= exp
                    |   exp COMA parametrosLlamadaP
                    ;

parametrosLlamadaP  ::= exp COMA parametrosLlamadaP
                    |   exp
                    ;

cliclofor   ::= FOR PA_A INT:t ID:var EQUAL:ref exp:asig PUNTOCOMA:ref2 exp:e PUNTOCOMA ID agregarfor PA_C LLA_A LLA_C  {:verificarForInit(ref,asig);verificarExprecionBool(ref2,e); RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getLexema()));:}
            |   FOR PA_A INT:t ID:var EQUAL:ref exp:asig PUNTOCOMA:ref2 exp:e PUNTOCOMA ID agregarfor PA_C LLA_A sentencias:vars LLA_C {:verificarForInit(ref,asig); verificarExprecionBool(ref2,e); ArrayList<FilaTablaSymbolos> tmp = new ArrayList<>(); tmp.add(new FilaTablaSymbolos(var.getLexema(),t.getLexema()));  RESULT = retornarDosFuentes(vars,tmp);:}
            |   FOR PA_A ID EQUAL:ref exp:asig PUNTOCOMA:ref2 exp:e PUNTOCOMA ID agregarfor PA_C LLA_A LLA_C   {:verificarForInit(ref,asig);verificarExprecionBool(ref2,e);:}
            |   FOR PA_A ID EQUAL:ref exp:asig PUNTOCOMA:ref2 exp:e PUNTOCOMA ID agregarfor PA_C LLA_A sentencias:vars LLA_C {:verificarForInit(ref,asig);verificarExprecionBool(ref2,e);RESULT = vars;:}
            ;

agregarfor  ::= SUMAR
            |   RESTAR
            |   EQUAL:ref exp:asig   {::}
            ;

ciclowhile  ::= WHILE PA_A:ref exp:e PA_C LLA_A LLA_C {:verificarExprecionBool(ref,e);:}
            |   WHILE PA_A:ref exp:e PA_C LLA_A sentencias:vars LLA_C {:verificarExprecionBool(ref,e);RESULT = vars;:}
            ;

cicloDoWhile    ::= DO LLA_A LLA_C WHILE PA_A:ref exp:e PA_C PUNTOCOMA  {:verificarExprecionBool(ref,e);:}
                |   DO LLA_A sentencias:vars LLA_C WHILE PA_A:ref exp:e PA_C PUNTOCOMA {:verificarExprecionBool(ref,e);RESULT = vars;:}
                ;

condicionalif   ::= IF PA_A:ref exp:e PA_C LLA_A sentencias:vars LLA_C {:verificarExprecionBool(ref,e);RESULT = vars;:}
                |   IF PA_A:ref exp:e PA_C LLA_A LLA_C  {:verificarExprecionBool(ref,e);:}
                |   IF PA_A:ref exp:e PA_C LLA_A sentencias:vars LLA_C ELSE LLA_A LLA_C {:verificarExprecionBool(ref,e);RESULT = vars;:}
                |   IF PA_A:ref exp:e PA_C LLA_A sentencias:vars LLA_C ELSE LLA_A sentencias:vars1 LLA_C {:verificarExprecionBool(ref,e);RESULT = retornarDosFuentes(vars,vars1);:}
                |   IF PA_A:ref exp:e PA_C LLA_A LLA_C ELSE LLA_A LLA_C {:verificarExprecionBool(ref,e);:}
                |   IF PA_A:ref exp:e PA_C LLA_A LLA_C ELSE LLA_A sentencias:vars LLA_C {:verificarExprecionBool(ref,e);RESULT = vars;:}
                ;

condicionalSwitch   ::= SWITCH PA_A:ref exp:valSwi PA_C LLA_A contenidoSwitch:vars LLA_C {:RESULT = vars;validarExprecionSwitch(valSwi,ref);:}
                    |   SWITCH PA_A:ref exp:valSwi PA_C LLA_A LLA_C {:validarExprecionSwitch(valSwi,ref);:}
                    ;

contenidoSwitch ::= CASE:ref h:valCase DOSPUNTOS BREAK PUNTOCOMA {:validarExprecionCase(valCase,ref);:}
                |   CASE:ref h:valCase DOSPUNTOS sentencias:vars BREAK PUNTOCOMA {:RESULT = vars;validarExprecionCase(valCase,ref);:}
                |   contenidoSwitch2:vars1 DEFAULT DOSPUNTOS sentencias:vars {:RESULT = retornarDosFuentes(vars,vars1);:}
                |   contenidoSwitch2:vars DEFAULT DOSPUNTOS {:RESULT = vars;:}
                |   contenidoSwitch2:vars1 CASE:ref h:valCase DOSPUNTOS sentencias:vars BREAK PUNTOCOMA {:RESULT = retornarDosFuentes(vars,vars1);validarExprecionCase(valCase,ref);:}
                |   contenidoSwitch2:vars CASE:ref h:valCase DOSPUNTOS  BREAK PUNTOCOMA {:RESULT = vars;validarExprecionCase(valCase,ref);:}
                |   error CASE
                ;

contenidoSwitch2    ::= contenidoSwitch2:vars1 CASE:ref h:valCase DOSPUNTOS sentencias:vars BREAK PUNTOCOMA {:RESULT = retornarDosFuentes(vars,vars1);validarExprecionCase(valCase,ref);:}
                    |   contenidoSwitch2:vars CASE:ref h:valCase DOSPUNTOS BREAK PUNTOCOMA {:RESULT = vars;validarExprecionCase(valCase,ref);:}
                    |   CASE:ref h:valCase DOSPUNTOS sentencias:vars BREAK PUNTOCOMA  {:RESULT = vars;validarExprecionCase(valCase,ref);:}
                    |   CASE:ref h:valCase DOSPUNTOS BREAK PUNTOCOMA    {:validarExprecionCase(valCase,ref);:}
                    |   error CASE
                    ;

asig    ::= exp:r                   {:RESULT=r;:}
        |   NEW OBJ PA_A PA_C       {:RESULT = new Asignacion(TablaSimbolos.OBJECT,TablaSimbolos.OBJECT);:}
        ;
/*|   NEW ID:tipo PA_A PA_C   {:RESULT = new Asignacion(TablaSimbolos.OBJECT,tipo.getLexema());:}*/
exp ::= exp:r1 OR:ref t:r2          {:RESULT = validarAndOr(r1,r2,ref);:}
    |   t:r {:RESULT=r;:}
    |   exp:r error {:RESULT=r;:}
    |   error
    ;

t   ::= t:r1 AND:ref f:r2           {:RESULT = validarAndOr(r1,r2,ref);:}
    |   f:r {:RESULT=r;:}
    ;

f   ::= f:r1 IGUAL:ref g:r2         {:RESULT = validarComparaciones(r1,r2,ref);:}
    |   f:r1 DIFERENTE:ref g:r2     {:RESULT = validarComparaciones(r1,r2,ref);:}
    |   g:r {:RESULT=r;:}
    ;

g   ::= g:r1 MENOR_QUE:ref h:r2     {:RESULT = validarMenorMayor(r1,r2,ref);:}
    |   g:r1 MAYOR_QUE:ref h:r2     {:RESULT = validarMenorMayor(r1,r2,ref);:}
    |   g:r1 MAYOR_IGUAL:ref h:r2   {:RESULT = validarMenorMayor(r1,r2,ref);:}
    |   g:r1 MENOR_IGUAL:ref h:r2   {:RESULT = validarMenorMayor(r1,r2,ref);:}
    |   h:r {:RESULT=r;:}
    ;

h   ::= h:r1 MAS:ref i:r2   {:RESULT = validarSuma(r1,r2,ref);:}
    |   h:r1 MENOS:ref i:r2 {:RESULT = validarResta(r1,r2,ref);:}
    |   i:r {:RESULT=r;:}
    ;

i   ::= i:r1 MUL:ref j:r2   {:RESULT = validarMultiDivicion(r1,r2,ref);:}
    |   i:r1 DIV:ref j:r2   {:RESULT = validarMultiDivicion(r1,r2,ref);:}
    |   j:r {:RESULT=r;:}
    ;

j   ::= NOT:ref k:r     {:RESULT = validarNegacion(r,ref);:}
    |   MENOS:ref k:r   {:RESULT = validarPositivoNegativo(r,ref);:}
    |   MAS:ref k:r     {:RESULT = validarPositivoNegativo(r,ref);:}
    |   k:r {:RESULT=r;:}
    ;

k   ::= l:r SUMAR:ref   {:
                            RESULT = validarMasMasMenosMenos(r,ref);
                        :}
    |   l:r RESTAR:ref  {:
                            RESULT = validarMasMasMenosMenos(r,ref);
                        :}
    |   l:r {:RESULT=r;:}
    ;

l   ::= ID                  {:RESULT = new Asignacion(TablaSimbolos.VARIABLE, TablaSimbolos.VARIABLE,false);:}
    |   THIS PUNTO ID       {:RESULT = new Asignacion(TablaSimbolos.VARIABLE, TablaSimbolos.VARIABLE,false);:}
    |   llamadaFuncionExp:r {:RESULT=r;:}
    |   TRUE                {:RESULT = new Asignacion(TablaSimbolos.BOOLEAN, TablaSimbolos.BOOLEAN,true);:}
    |   FALSE               {:RESULT = new Asignacion(TablaSimbolos.BOOLEAN, TablaSimbolos.BOOLEAN,true);:}
    |   DECIMAL             {:RESULT = new Asignacion(TablaSimbolos.DOUBLE, TablaSimbolos.DOUBLE,true);:}
    |   ENTERO              {:RESULT = new Asignacion(TablaSimbolos.INT, TablaSimbolos.INT,true);:}
    |   STRING              {:RESULT = new Asignacion(TablaSimbolos.STRING, TablaSimbolos.STRING,true);:}
    |   CHAR_VAL            {:RESULT = new Asignacion(TablaSimbolos.CHAR, TablaSimbolos.CHAR,true);:}
    |   PA_A exp:r PA_C     {:RESULT=r;:}
    ;

llamadaFuncionExp   ::= ID PA_A PA_C                                {:RESULT = new Asignacion(TablaSimbolos.COMODIN, TablaSimbolos.COMODIN,false);:}
                    |   ID PA_A parametrosLlamada PA_C              {:RESULT = new Asignacion(TablaSimbolos.COMODIN, TablaSimbolos.COMODIN,false);:}
                    |   THIS PUNTO ID PA_A PA_C                     {:RESULT = new Asignacion(TablaSimbolos.COMODIN, TablaSimbolos.COMODIN,false);:}
                    |   THIS PUNTO ID PA_A parametrosLlamada PA_C   {:RESULT = new Asignacion(TablaSimbolos.COMODIN, TablaSimbolos.COMODIN,false);:}
                    ;