package com.cresb49.serverproyecto1.analizarjava;

import com.cresb49.serverproyecto1.analizarjava.objetos.*;
import com.cresb49.serverproyecto1.consolecontrol.ConsoleControl;

import java.util.ArrayList;
import java_cup.runtime.*;

class ParserJava;

parser code {:
    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerJava lexerJava;
    private SimbolosTerminalesJava simbolosTerminalesJava;
    private TablaSimbolos tablaSimbolos;
    private ArrayList<Clase> clases;
    private ArrayList<Metodo> metodos;
    private ConsoleControl consola;
    private String carpetaFuente;
    private String archivoAnalizado;
    
    public ParserJava (LexerJava lexerJava,TablaSimbolos tablaSimbolos,ArrayList<Clase> clases,ArrayList<Metodo> metodos){ 
        super(lexerJava);
        this.lexerJava=lexerJava;
        this.tablaSimbolos = tablaSimbolos;
        this.metodos = metodos;
        this.clases = clases;
        this.carpetaFuente=this.lexerJava.getCarpetaFunete();
        this.archivoAnalizado=this.lexerJava.getArchivoAnalizado();
        this.consola=this.lexerJava.getConsoleControl();
        this.simbolosTerminalesJava = new SimbolosTerminalesJava();
    }

    public TablaSimbolos getTablaSimbolos(){
        return this.tablaSimbolos;
    }

    public ArrayList<Clase> getClases() {
        return this.clases;
    }

    public ArrayList<Metodo> getMetodos() {
        return this.metodos;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserJavaSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er),carpetaFuente,archivoAnalizado));
                //System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println(tok.getLexema()+" "+er);
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er),carpetaFuente,archivoAnalizado));
                //System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er),carpetaFuente,archivoAnalizado));
            //System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserJavaSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er),carpetaFuente,archivoAnalizado));
            //System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            //System.out.println(tok.getLexema()+" "+er);
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er),carpetaFuente,archivoAnalizado));
            //System.out.println(er);
        }
    }

    private void error_cast(Token operador,String tipo1,String tipo2){
        semantic_error(operador,"No se puede operar un valor: \""+tipo1+"\" con un valor:\""+tipo2+"\"");
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto),carpetaFuente,archivoAnalizado));
    }

    private void agregarVariablesTabla(String metodo_clase, ArrayList<FilaTablaSymbolos> vars) {
        if(metodo_clase!=null && vars != null){
            FilaTablaSymbolos fila;
            for (FilaTablaSymbolos var : vars) {
                var.agregarFuncion(metodo_clase);
                fila = tablaSimbolos.buscarNombreTipo(var.getNombre(),var.getTipo());
                if(fila == null){
                    tablaSimbolos.getFilas().add(var);
                }else{
                    if(fila.getNombre().equals(var.getNombre()) && fila.getTipo().equals(var.getTipo())){
                        fila.mergueFuncions(var.getFunciones());
                    }else{
                        tablaSimbolos.getFilas().add(var);
                    }
                }
            }
        }
    }

    private void asignarTipoVariable(Asignacion t, ArrayList<FilaTablaSymbolos> vars) {
        if(t!=null && vars!=null){
            for (FilaTablaSymbolos var : vars) {
                if(var!=null){
                    var.setTipo(t.getTipo());
                }
            }
        }
    }

    private ArrayList<FilaTablaSymbolos> retornarDosFuentes(ArrayList<FilaTablaSymbolos> vars, ArrayList<FilaTablaSymbolos> vars1) {
        if(vars!=null){
            if(vars1!=null){
                vars1.addAll(vars);
                return vars1;
            }else{
                return vars;
            }
        }else{
            if(vars1!=null){
                return vars1;
            }else{
                return new ArrayList<>();
            }
        }
    }

    private void archivarMetodo(String metodo_constructor,String tipo,ArrayList<FilaTablaSymbolos> parametros,int aux){
        if(parametros!=null){
            System.out.println("Metodo: "+metodo_constructor+" ,Tipo: "+tipo+" ,Parametros: "+parametros.size());
            this.getMetodos().add(new Metodo(metodo_constructor, tipo, parametros.size()));
        }else{
            System.out.println("Metodo: "+metodo_constructor+" ,Tipo: "+tipo+" ,Parametros: "+aux);
            this.getMetodos().add(new Metodo(metodo_constructor, tipo,aux));
        }
    }

    private void agregarClase(String lexema) {
        this.getClases().add(new Clase(lexema));
    }

    protected int error_sync_size() {
		return 1;
	}
:}

/* define how to connect to the scanner! */
scan with {: return this.lexerJava.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal Token  IMPORT,PUBLIC,PRIVATE,PROTECTED,FINAL,BREAK,RETURN,INT,BOOL,STR,CHAR,DOUBLE,OBJ,CHAR_VAL,
                IF,ELSE,FOR,DO,WHILE,SWITCH,CASE,ID,DECIMAL,ENTERO,DIFERENTE,IGUAL,MENOR_IGUAL,THIS,
                MAYOR_IGUAL,MENOR_QUE,MAYOR_QUE,AND,OR,NOT,SUMAR,RESTAR,MUL,DIV,MAS,MENOS,PA_A,
                PA_C,CO_A,CO_C,LLA_A,LLA_C,PUNTO,COMA,DOSPUNTOS,PUNTOCOMA,STRING,CLASS,EQUAL,TRUE,
                FALSE,DEFAULT,STATIC,NEW;


/* Non terminals */
non terminal ArrayList<FilaTablaSymbolos>   initJava,initJavaP,importJava,importJavaContenido,importJavaP,metodoP,sentConstru,
                                            parametrosLlamadaP,parametrosLlamada,classJava,sentencias,metodo,constructorP,
                                            agregarfor,ciclowhile,condicionalif,constructor,cliclofor,cicloDoWhile,sentanciaSalida,asignacionvariables,
                                            contenidoSwitch,contenidoSwitch2,condicionalSwitch,llamadaFuncion;
non terminal ArrayList<FilaTablaSymbolos>   listaVariables,listaVariables2,declararVariables,contClass,parametros,parametrosP,declararVariables2,listaVariables3,
                                            listaVariables4;
non terminal Token                          visibilidad;
non terminal Asignacion             tipo,asig;
non terminal Asignacion             exp,t,f,g,h,i,j,k,l,llamadaFuncionExp;

/* Inicio de las reglas gramticales*/

initJava    ::= initJavaP classJava  {:
                                        System.out.println("Ejecute class java");
                                    :}
            |   classJava           {:
                                        System.out.println("Ejecute class java");
                                    :}
            ;
initJavaP   ::= importJavaP   {:
                                            System.out.println("Ejecute import");
                                        :}
            ;


/*Gramatica de imports*/

importJavaP ::= importJavaP importJava
            |   importJava
            |   importJavaP error
            |   error
            ;
        
importJava  ::= IMPORT ID importJavaContenido
            ;

importJavaContenido ::= PUNTO ID importJavaContenido
                    |   PUNTO MUL PUNTOCOMA
                    |   PUNTOCOMA
                    ;
/*Gramatica de un archivo de java*/

visibilidad ::= PRIVATE:t       {:RESULT = t;:}
            |   PUBLIC:t        {:RESULT = t;:}
            |   PROTECTED:t     {:RESULT = t;:}
            ;

tipo        ::= INT:t     {:RESULT = new Asignacion(TablaSimbolos.INT,t.getLexema());:}
            |   BOOL:t    {:RESULT = new Asignacion(TablaSimbolos.BOOLEAN,t.getLexema());:}
            |   STR:t     {:RESULT = new Asignacion(TablaSimbolos.STRING,t.getLexema());:}
            |   CHAR:t    {:RESULT = new Asignacion(TablaSimbolos.CHAR,t.getLexema());:}
            |   DOUBLE:t  {:RESULT = new Asignacion(TablaSimbolos.DOUBLE,t.getLexema());:}
            |   OBJ:t     {:RESULT = new Asignacion(TablaSimbolos.OBJECT,t.getLexema());:}
            |   ID:t     {:RESULT = new Asignacion(TablaSimbolos.OBJECT,t.getLexema());:}
            ;

classJava   ::= visibilidad CLASS ID:clase LLA_A contClass:vars LLA_C   {:
                                                                            agregarClase(clase.getLexema());
                                                                            agregarVariablesTabla("Clase "+clase.getLexema(),vars);
                                                                        :}
            |   visibilidad CLASS ID:clase LLA_A LLA_C
            |   visibilidad FINAL CLASS ID:clase LLA_A contClass:vars LLA_C {:
                                                                                agregarVariablesTabla("Clase "+clase.getLexema(),vars);
                                                                            :}
            |   visibilidad FINAL CLASS ID:clase LLA_A LLA_C
            ;

contClass   ::= contClass:vars declararVariables:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   contClass:vars constructor {:RESULT = vars;:}
            |   contClass:vars metodo {:RESULT = vars;:}
            |   declararVariables:vars {:RESULT = vars;:}
            |   constructor
            |   metodo
            |   contClass error
            |   error
            ;

constructor ::= visibilidad ID:constructor PA_A parametros:vars PA_C constructorP:vars1 {:
                                                                                            archivarMetodo(constructor.getLexema(),"Constructor",vars,0);
                                                                                            agregarVariablesTabla("Constructor "+constructor.getLexema(),retornarDosFuentes(vars,vars1));
                                                                                        :}
            |   visibilidad ID:constructor PA_A PA_C constructorP:vars1                 {:
                                                                                            archivarMetodo(constructor.getLexema(),"Constructor",null,0);
                                                                                            agregarVariablesTabla("Constructor "+constructor.getLexema(),vars1);
                                                                                        :}
            ;

constructorP    ::= LLA_A LLA_C
                |   LLA_A sentConstru:vars LLA_C {:RESULT = vars;:}
                |   error declararVariables
                |   error metodo
                |   error constructor
                ;

parametros  ::= tipo:t ID:var {:RESULT = new ArrayList<>();RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));:}
            |   tipo:t ID:var COMA parametrosP:vars {:RESULT = vars;if(RESULT!=null){RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));}:}
            |   error PA_C
            |   error LLA_A
            |   error LLA_C
            ;

parametrosP ::= tipo:t ID:var COMA parametrosP:vars {:RESULT = vars;if(RESULT!=null){RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));}:}
            |   tipo:t ID:var {:RESULT = new ArrayList<>();RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));:}
            |   error PA_C
            |   error LLA_A
            |   error LLA_C
            ;

metodo      ::= visibilidad tipo:t ID:metodo PA_A PA_C metodoP:vars     {:
                                                                            archivarMetodo(metodo.getLexema(),t.getTipo(),null,0);
                                                                            agregarVariablesTabla("Metodo "+metodo.getLexema(),vars);
                                                                        :}
            |   visibilidad STATIC tipo:t ID:metodo PA_A PA_C metodoP:vars     {:
                                                                            archivarMetodo(metodo.getLexema(),t.getTipo(),null,0);
                                                                            agregarVariablesTabla("Metodo "+metodo.getLexema(),vars);
                                                                        :}
            |   visibilidad tipo:t ID:metodo PA_A parametros:vars PA_C metodoP:vars1    {:
                                                                                            archivarMetodo(metodo.getLexema(),t.getTipo(),vars,0);
                                                                                            agregarVariablesTabla("Metodo "+metodo.getLexema(),retornarDosFuentes(vars,vars1));
                                                                                        :}
            |   visibilidad STATIC tipo:t ID:metodo PA_A parametros:vars PA_C metodoP:vars1    {:
                                                                                            archivarMetodo(metodo.getLexema(),t.getTipo(),vars,0);
                                                                                            agregarVariablesTabla("Metodo "+metodo.getLexema(),retornarDosFuentes(vars,vars1));
                                                                                        :}
            ;

metodoP     ::= LLA_A sentencias:vars LLA_C {:RESULT = vars;:}
            |   LLA_A LLA_C
            |   error declararVariables
            |   error constructor
            |   error metodo
            ;

asignacionvariables ::= ID EQUAL asig PUNTOCOMA  //{:RESULT = new ArrayList<>();RESULT.add(new FilaTablaSymbolos(t.getLexema()));:}
                    |   THIS PUNTO ID EQUAL asig PUNTOCOMA
                    |   ID SUMAR PUNTOCOMA
                    |   ID RESTAR PUNTOCOMA
                    ;

declararVariables   ::= visibilidad STATIC FINAL tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad FINAL STATIC tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad STATIC tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad FINAL tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   visibilidad tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   tipo:t listaVariables:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    ;

listaVariables  ::= ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var EQUAL asig {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL asig COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                ;
listaVariables2 ::= ID:var EQUAL asig COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var COMA listaVariables2:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL asig {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                ;


declararVariables2  ::= FINAL tipo:t listaVariables3:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    |   tipo:t listaVariables3:vars PUNTOCOMA {:asignarTipoVariable(t,vars);RESULT = vars;:}
                    ;

listaVariables3 ::= ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var EQUAL asig {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var COMA listaVariables4:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL asig COMA listaVariables4:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                ;
listaVariables4 ::= ID:var EQUAL asig COMA listaVariables4:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var COMA listaVariables4:vars {:RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}:}
                |   ID:var EQUAL asig {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                |   ID:var {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));:}
                ;



sentConstru ::= sentConstru:vars llamadaFuncion:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars condicionalif:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars ciclowhile:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars cicloDoWhile:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars condicionalSwitch:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars cliclofor:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars asignacionvariables:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentConstru:vars declararVariables2:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   llamadaFuncion:vars {:RESULT = vars;:}
            |   condicionalif:vars {:RESULT = vars;:}
            |   ciclowhile:vars {:RESULT = vars;:}
            |   cicloDoWhile:vars {:RESULT = vars;:}
            |   condicionalSwitch:vars {:RESULT = vars;:}
            |   cliclofor:vars {:RESULT = vars;:}
            |   asignacionvariables:vars {:RESULT = vars;:}
            |   declararVariables2:vars {:RESULT = vars;:}
            |   sentConstru error
            |   error
            ;

sentencias  ::= sentencias:vars llamadaFuncion:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars condicionalif:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars ciclowhile:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars cicloDoWhile:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars condicionalSwitch:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars cliclofor:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars sentanciaSalida:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars asignacionvariables:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   sentencias:vars declararVariables2:vars1 {:RESULT = retornarDosFuentes(vars,vars1);:}
            |   llamadaFuncion:vars {:RESULT = vars;:}
            |   condicionalif:vars {:RESULT = vars;:}
            |   ciclowhile:vars {:RESULT = vars;:}
            |   cicloDoWhile:vars {:RESULT = vars;:}
            |   condicionalSwitch:vars {:RESULT = vars;:}
            |   cliclofor:vars {:RESULT = vars;:}
            |   sentanciaSalida:vars {:RESULT = vars;:}
            |   asignacionvariables:vars {:RESULT = vars;:}
            |   declararVariables2:vars {:RESULT = vars;:}
            |   sentencias error
            |   error
            ;

sentanciaSalida ::= RETURN exp PUNTOCOMA
                |   RETURN PUNTOCOMA
                |   BREAK PUNTOCOMA
                ;


llamadaFuncion  ::= ID PA_A PA_C PUNTOCOMA
                |   ID PA_A parametrosLlamada PA_C PUNTOCOMA
                |   THIS PUNTO ID PA_A PA_C PUNTOCOMA
                |   THIS PUNTO ID PA_A parametrosLlamada PA_C PUNTOCOMA
                ;

parametrosLlamada   ::= exp
                    |   exp COMA parametrosLlamadaP
                    ;

parametrosLlamadaP  ::= exp COMA parametrosLlamadaP
                    |   exp
                    ;

cliclofor   ::= FOR PA_A INT:t ID:var EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A LLA_C  {:RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getLexema()));:}
            |   FOR PA_A INT:t ID:var EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A sentencias:vars LLA_C {:ArrayList<FilaTablaSymbolos> tmp = new ArrayList<>(); tmp.add(new FilaTablaSymbolos(var.getLexema(),t.getLexema()));  RESULT = retornarDosFuentes(vars,tmp);:}
            |   FOR PA_A ID EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A LLA_C
            |   FOR PA_A ID EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A sentencias:vars LLA_C {:RESULT = vars;:}
            ;

agregarfor  ::= SUMAR
            |   RESTAR
            |   EQUAL exp
            ;

ciclowhile  ::= WHILE PA_A exp PA_C LLA_A LLA_C
            |   WHILE PA_A exp PA_C LLA_A sentencias:vars LLA_C {:RESULT = vars;:}
            ;

cicloDoWhile    ::= DO LLA_A LLA_C WHILE PA_A exp PA_C PUNTOCOMA
                |   DO LLA_A sentencias:vars LLA_C WHILE PA_A exp PA_C PUNTOCOMA {:RESULT = vars;:}
                ;

condicionalif   ::= IF PA_A exp PA_C LLA_A sentencias:vars LLA_C {:RESULT = vars;:}
                |   IF PA_A exp PA_C LLA_A LLA_C
                |   IF PA_A exp PA_C LLA_A sentencias:vars LLA_C ELSE LLA_A LLA_C {:RESULT = vars;:}
                |   IF PA_A exp PA_C LLA_A sentencias:vars LLA_C ELSE LLA_A sentencias:vars1 LLA_C {:RESULT = retornarDosFuentes(vars,vars1);:}
                |   IF PA_A exp PA_C LLA_A LLA_C ELSE LLA_A LLA_C
                |   IF PA_A exp PA_C LLA_A LLA_C ELSE LLA_A sentencias:vars LLA_C {:RESULT = vars;:}
                ;

condicionalSwitch   ::= SWITCH PA_A exp PA_C LLA_A contenidoSwitch:vars LLA_C {:RESULT = vars;:}
                    |   SWITCH PA_A exp PA_C LLA_A LLA_C
                    ;

contenidoSwitch ::= CASE exp DOSPUNTOS BREAK PUNTOCOMA
                |   CASE exp DOSPUNTOS sentencias:vars BREAK PUNTOCOMA {:RESULT = vars;:}
                |   contenidoSwitch2:vars1 DEFAULT DOSPUNTOS sentencias:vars {:RESULT = retornarDosFuentes(vars,vars1);:}
                |   contenidoSwitch2:vars DEFAULT DOSPUNTOS {:RESULT = vars;:}
                |   contenidoSwitch2:vars1 CASE exp DOSPUNTOS sentencias:vars BREAK PUNTOCOMA {:RESULT = retornarDosFuentes(vars,vars1);:}
                |   contenidoSwitch2:vars CASE exp DOSPUNTOS  BREAK PUNTOCOMA {:RESULT = vars;:}
                |   error CASE
                ;

contenidoSwitch2    ::= contenidoSwitch2:vars1 CASE exp DOSPUNTOS sentencias:vars BREAK PUNTOCOMA {:RESULT = retornarDosFuentes(vars,vars1);:}
                    |   contenidoSwitch2:vars CASE exp DOSPUNTOS BREAK PUNTOCOMA {:RESULT = vars;:}
                    |   CASE exp DOSPUNTOS sentencias:vars BREAK PUNTOCOMA  {:RESULT = vars;:}
                    |   CASE exp DOSPUNTOS BREAK PUNTOCOMA
                    |   error CASE
                    ;

asig    ::= exp
        |   NEW OBJ PA_A PA_C
        |   NEW ID PA_A PA_C
        ;

exp ::= exp OR t
    |   t
    ;

t   ::= t AND f
    |   f
    ;

f   ::= f IGUAL g
    |   f DIFERENTE g
    |   g
    ;

g   ::= g MENOR_QUE h
    |   g MAYOR_QUE h
    |   g MAYOR_IGUAL h
    |   g MENOR_IGUAL h
    |   h
    ;

h   ::= h MAS i
    |   h MENOS i
    |   i
    ;

i   ::= i MUL j
    |   i DIV j
    |   j
    ;

j   ::= NOT k
    |   MENOS k
    |   MAS k
    |   k
    ;

k   ::= l SUMAR
    |   l RESTAR
    |   l
    ;

l   ::= ID
    |   THIS PUNTO ID
    |   llamadaFuncionExp
    |   TRUE
    |   FALSE
    |   DECIMAL
    |   ENTERO
    |   STRING
    |   CHAR_VAL
    |   PA_A exp PA_C
    ;

llamadaFuncionExp   ::= ID PA_A PA_C
                    |   ID PA_A parametrosLlamada PA_C
                    |   THIS PUNTO ID PA_A PA_C
                    |   THIS PUNTO ID PA_A parametrosLlamada PA_C
                    ;