package com.cresb49.appcliente.analizadores.filecopy;

import java.util.ArrayList;

import com.cresb49.appcliente.analizadores.ErrorAnalisis;
import com.cresb49.appcliente.analizadores.Token;
import com.cresb49.appcliente.ED.Pila;
import com.cresb49.appcliente.analizadores.filecopy.obj.*;


import java_cup.runtime.*;

class ParserFileCopy;

parser code {:
    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerFileCopy lexerFileCopy;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;
    private SimbolosTerminalesFileCopy simbolosTerminalesFileCopy;

    
    public ParserFileCopy (LexerFileCopy lexerFileCopy){ 
        super(lexerFileCopy);
        this.lexerFileCopy=lexerFileCopy;
        this.simbolosTerminalesFileCopy = new SimbolosTerminalesFileCopy();
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserFileCopySym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesFileCopy.obtenerSimbolos(expected_token_ids()).toString();
                System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesFileCopy.obtenerSimbolos(expected_token_ids()).toString();
                System.out.println(tok.getLexema()+" "+er);
                this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesFileCopy.obtenerSimbolos(expected_token_ids()).toString();
            System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserFileCopySym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesFileCopy.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            System.out.println(tok.getLexema()+" "+er);
            this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            System.out.println(er);
        }
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    private boolean definition_error(Token ini,Token fin,ArrayList<String> errores){
        boolean status = false;
        for (String errore : errores) {
            status = true;
            String error = "Error en definicion, "+errore+" Ubicacion general --> Linea: "+ini.getLinea()+" a Linea: "+fin.getLinea();
            this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, ini.getLexema(), ini.getLinea(), ini.getColumna(), error));
            System.out.println(error);
        }
        return status;
    }

    private void referencia_numerica_incorrecta(Token token,Double valor){
        this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,valor.toString(), token.getLinea(),(token.getColumna()+1), ", Se espera un valor entero o una operacion con resultado entero"));
    }

    private void referencia_numero_negativo(Token token,Double valor){
        this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,String.valueOf(valor.intValue()), token.getLinea(),(token.getColumna()+1), ", Se esperaba un valor positivo"));
    }

    private void referencia_numero_negativo_values(Token token,Double valor){
        this.lexerFileCopy.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,valor.toString(), token.getLinea(),(token.getColumna()+1), ",Se espera un valor positivo o una operacion con resultado positivo"));
    }

    protected int error_sync_size() {
		return 1;
	}
:}

/* define how to connect to the scanner! */
//scan with {: return this.lexerFileCopy.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal    LLA_A,LLA_C,COMA,DOSPUNTOS,STRING,
            PROYECT1,PROYECT2,FILEDEF,REPORTJSON;


/* Non terminals */
non terminal                        ini;
non terminal FileCopy               copy,copyp;


/* The grammar rules */

ini ::= LLA_A copy:copp LLA_C   {:
                                    RESULT=copp;
                                    if(RESULT!=null){
                                        System.out.println(RESULT.toString());
                                    }
                                :}
    ;

/*Gramatica para archivo .copy*/

copy    ::= copyp:copp PROYECT1 DOSPUNTOS STRING:str        {:
                                                                RESULT = copp;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    if(RESULT.getPathProyecto1()!=null){
                                                                        System.out.println("La propeidad JSON ya estaba definida");
                                                                    }else{
                                                                        if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                            System.out.println("La cadena de asigancion esta vacia");
                                                                        }else{
                                                                            RESULT.setPathProyecto1(token.getLexema());
                                                                        }
                                                                    }
                                                                }
                                                            :}
        |   copyp:copp PROYECT2 DOSPUNTOS STRING:str         {:
                                                                RESULT = copp;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    if(RESULT.getPathProyecto2()!=null){
                                                                        System.out.println("La propeidad JSON ya estaba definida");
                                                                    }else{
                                                                        if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                            System.out.println("La cadena de asigancion esta vacia");
                                                                        }else{
                                                                            RESULT.setPathProyecto2(token.getLexema());
                                                                        }
                                                                    }
                                                                }
                                                            :}
        |   copyp:copp FILEDEF DOSPUNTOS STRING:str          {:
                                                                RESULT = copp;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    if(RESULT.getPathFileDef()!=null){
                                                                        System.out.println("La propeidad JSON ya estaba definida");
                                                                    }else{
                                                                        if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                            System.out.println("La cadena de asigancion esta vacia");
                                                                        }else{
                                                                            RESULT.setPathFileDef(token.getLexema());
                                                                        }
                                                                    }
                                                                }
                                                            :}
        |   copyp:copp REPORTJSON DOSPUNTOS STRING:str       {:
                                                                RESULT = copp;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    if(RESULT.getPathFileReporteJson()!=null){
                                                                        System.out.println("La propeidad JSON ya estaba definida");
                                                                    }else{
                                                                        if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                            System.out.println("La cadena de asigancion esta vacia");
                                                                        }else{
                                                                            RESULT.setPathFileReporteJson(token.getLexema());
                                                                        }
                                                                    }
                                                                }
                                                            :}
        ;

copyp   ::= copyp:copp PROYECT1 DOSPUNTOS STRING:str COMA   {:
                                                                RESULT = copp;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    if(RESULT.getPathProyecto1()!=null){
                                                                        System.out.println("La propeidad JSON ya estaba definida");
                                                                    }else{
                                                                        if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                            System.out.println("La cadena de asigancion esta vacia");
                                                                        }else{
                                                                            RESULT.setPathProyecto1(token.getLexema());
                                                                        }
                                                                    }
                                                                }
                                                            :}
        |   copyp:copp PROYECT2 DOSPUNTOS STRING:str COMA   {:
                                                                RESULT = copp;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    if(RESULT.getPathProyecto2()!=null){
                                                                        System.out.println("La propeidad JSON ya estaba definida");
                                                                    }else{
                                                                        if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                            System.out.println("La cadena de asigancion esta vacia");
                                                                        }else{
                                                                            RESULT.setPathProyecto2(token.getLexema());
                                                                        }
                                                                    }
                                                                }
                                                            :}
        |   copyp:copp FILEDEF DOSPUNTOS STRING:str COMA    {:
                                                                RESULT = copp;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    if(RESULT.getPathFileDef()!=null){
                                                                        System.out.println("La propeidad JSON ya estaba definida");
                                                                    }else{
                                                                        if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                            System.out.println("La cadena de asigancion esta vacia");
                                                                        }else{
                                                                            RESULT.setPathFileDef(token.getLexema());
                                                                        }
                                                                    }
                                                                }
                                                            :}
        |   copyp:copp REPORTJSON DOSPUNTOS STRING:str COMA {:
                                                                RESULT = copp;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    if(RESULT.getPathFileReporteJson()!=null){
                                                                        System.out.println("La propeidad JSON ya estaba definida");
                                                                    }else{
                                                                        if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                            System.out.println("La cadena de asigancion esta vacia");
                                                                        }else{
                                                                            RESULT.setPathFileReporteJson(token.getLexema());
                                                                        }
                                                                    }
                                                                }
                                                            :}
        |   {:
                RESULT= new FileCopy();
            :}
        ;