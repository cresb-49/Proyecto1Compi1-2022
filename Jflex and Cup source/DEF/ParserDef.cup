package com.cresb49.appcliente.analizadores.def;

import java.util.ArrayList;

import com.cresb49.appcliente.analizadores.ErrorAnalisis;
import com.cresb49.appcliente.analizadores.Token;
import com.cresb49.appcliente.ED.Pila;
import com.cresb49.appcliente.analizadores.def.obj.*;


import java_cup.runtime.*;

class ParserDef;

parser code {:
    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerDef lexerDef;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;
    private SimbolosTerminalesDef simbolosTerminalesDef;
    private TablaSimbolos tablaSimbolos;
    
    public ParserDef (LexerDef lexerDef){ 
        super(lexerDef);
        this.lexerDef=lexerDef;
        this.tablaSimbolos = new TablaSimbolos();
        this.simbolosTerminalesDef = new SimbolosTerminalesDef();
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserDefSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                //System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println(tok.getLexema()+" "+er);
                this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                //System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserDefSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            //System.out.println(tok.getLexema()+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            //System.out.println(er);
        }
    }


    private void verificar_def_var(Token token,String tipo) {
       FilaTabla fila = tablaSimbolos.buscar(token.getLexema());
        if(fila!=null){
            tablaSimbolos.getFilas().add(new FilaTabla(token.getLexema(),tipo,null));
        }else{
            semantic_error(token,"La variable ya a sido definida con anterioridad");
        }
    }

    private void asig_val_var(Token token,String tipo,Object value) {
       FilaTabla fila = tablaSimbolos.buscar(token.getLexema());
        if(fila!=null){
            tablaSimbolos.getFilas().add(new FilaTabla(token.getLexema(),tipo,null));
        }else{
            semantic_error(token,"El valor que se desea dar a la variable de de tipo \"\" y la variable es de tipo \"\"");
        }
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    public TablaSimbolos getTablaSimbolos() {
        return tablaSimbolos;
    }

    protected int error_sync_size() {
		return 1;
	}
:}

/* define how to connect to the scanner! */
scan with {: return this.lexerDef.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal    CO_A,CO_C,LLA_A,LLA_C,PA_A,PA_C,COMA,DOSPUNTOS,PUNTOCOMA,STRING,ENTERO,
            INT,STR,HTML,H1,H2,TABLE,FOR,TR,TD,BR,ITERATOR,HASTA,TEXT,
            D_PA_A,PA_C_D,ID,EQUAL,ME_Q,MA_Q,ME_QB,MAS,MENOS,DIV,MUL;


/* Non terminals */
non terminal                        ini,asig,dec,decn;
non terminal Pila<Token>            decp;
non terminal Operacion              exp,t,f;



/* Inicio de las reglas gramticales*/

ini ::= ini asig
    |   ini dec
    |   ini decn
    |   asig
    |   dec
    |   decn
    ;

/*Gramatica para declaracion de variables*/


decn   ::=  INT ID:var EQUAL exp:val PUNTOCOMA
        |   STR ID:var EQUAL exp:val PUNTOCOMA
        ;

dec    ::=  INT decp:vars   {:
                                if(vars!=null){
                                    ArrayList<Token> array =  vars.toArrayList();
                                    if(array!=null){
                                        for (Token token : array) {
                                            verificar_def_var(token, TablaSimbolos.STRING);
                                        }
                                    }
                                }
                            :}
        |   STR decp:vars   {:
                                if(vars!=null){
                                    ArrayList<Token> array =  vars.toArrayList();
                                    if(array!=null){
                                        for (Token token : array) {
                                            verificar_def_var(token, TablaSimbolos.STRING);
                                        }
                                    }
                                }
                            :}
        ;
    
decp    ::= ID:id COMA decp:vars {:
                                    RESULT = vars;
                                    if(RESULT!=null){
                                        RESULT.push((Token)id);
                                    }
                                :}
        |   ID:id PUNTOCOMA {:
                                RESULT = new Pila<>();
                                RESULT.push((Token)id);
                            :}
        ;

asig    ::= ID EQUAL exp PUNTOCOMA
        ;


exp ::= exp:val1 MAS:s t:val2   {:  
                                    try {
                                        String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MUL,val2.getTipo());
                                        Object result = Operacion.sumaTerminos(val1, val2);
                                        RESULT = new Operacion(tipo,result);
                                    } catch (NotCastException e) {
                                        System.out.println("No se pudo castear el resultado");
                                        RESULT = val1;
                                    }
                                :}
    |   exp:val1 MENOS:s t:val2 {:
                                    try {
                                        String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MUL,val2.getTipo());
                                        Integer result = ((Integer)val1.getValor())-((Integer)val2.getValor());
                                        RESULT = new Operacion(tipo,result);
                                    } catch (NotCastException e) {
                                        System.out.println("No se pudo castear el resultado");
                                        RESULT = val1;
                                    }
                                :}
    |   t:val   {:
                    RESULT = val;
                :}
    ;

t   ::= t:val1 MUL:s f:val2 {:
                                try {
                                    String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MUL,val2.getTipo());
                                    Integer result = ((Integer)val1.getValor())*((Integer)val2.getValor());
                                    RESULT = new Operacion(tipo,result);
                                } catch (NotCastException e) {
                                    System.out.println("No se pudo castear el resultado");
                                    RESULT = val1;
                                }
                            :}
    |   t:val1 DIV:s f:val2 {:
                                try {
                                    String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MUL,val2.getTipo());
                                    Integer result = ((Integer)val1.getValor())/((Integer)val2.getValor());
                                    RESULT = new Operacion(tipo,result);
                                } catch (NotCastException e) {
                                    System.out.println("No se pudo castear el resultado");
                                    RESULT = val1;
                                }
                            :}
    |   f:val   {:
                    RESULT = val;
                :}
    ;

f   ::= ID:val      {:
                        Token token = (Token) val;
                        System.out.println("Buscar en tabla de simbolos");
                        FilaTabla simbolo = tablaSimbolos.buscar(token.getLexema());
                        if(simbolo!=null){
                            if(simbolo.getValor()!=null){
                                RESULT = new Operacion(simbolo.getTipo(),simbolo.getValor());
                            }else{
                                System.out.println("La variable no tiene valor asignado");
                            }
                        }else{
                            System.out.println("No existe la variable en el programa");
                        }
                    :}
    |   ENTERO:val  {:
                        Token token = (Token) val;
                        RESULT = new Operacion(TablaSimbolos.INT,Integer.parseInt(token.getLexema()));
                    :}
    |   STRING:val  {:
                        Token token = (Token) val;
                        RESULT = new Operacion(TablaSimbolos.STRING,token.getLexema());
                    :}
    |   PA_A exp:val PA_C   {:
                                RESULT = val;
                            :}
    ;
/*Gramatica para lenguaje HTML*/