/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cresb49.appcliente;

import com.cresb49.appcliente.Objetos.ConsoleControl;
import com.cresb49.appcliente.Objetos.EmpaquetarInformacion;
import com.cresb49.appcliente.Objetos.Proyecto;
import com.cresb49.appcliente.analizadores.*;
import com.cresb49.appcliente.analizadores.def.AnalizarDef;
import com.cresb49.appcliente.analizadores.def.obj.exceptions.NoReporteJson;
import com.cresb49.appcliente.analizadores.json.AnalizarJson;
import com.cresb49.appcliente.analizadores.json.obj.ReporteJson;
import com.cresb49.appcliente.comunicacion.*;
import com.cresb49.appcliente.proyecto.*;
import com.cresb49.appcliente.proyecto.exceptions.NotDirectoryCreate;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.*;
import java.security.AccessController;

import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Benjamin
 */
public class FramePrincipal extends javax.swing.JFrame implements Observer {

    private ConsoleControl consolaJson;
    private ConsoleControl consolaDef;

    private Cliente cliente = null;
    private Image imagenCarpeta = null;
    private Image imagenNoCarga = null;

    private String generalPath = null;
    private ProyectoCopy proyectoCopy = null;

    private File carpeta1 = null;
    private File carpeta2 = null;

    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();
        initSubComponents();
    }

    private void cargarImagenes() {
        try {
            //java.net.URL imageURL1 = getClass().getResource("/resources/imgCarpeta.png");
            //java.net.URL imageURL2 = getClass().getResource("/resources/signoIncorrecto.png");
            //ImageIcon ico1 = new ImageIcon(getClass().getResource("/resources/imgCarpeta.png"));
            //ImageIcon ico2 = new ImageIcon(getClass().getResource("/resources/signoIncorrecto.png"));
            ImageIcon ico1 = new ImageIcon(getClass().getResource("/imgs/imgCarpeta.png"));
            ImageIcon ico2 = new ImageIcon(getClass().getResource("/imgs/signoIncorrecto.png"));
            imagenCarpeta = ico1.getImage();
            imagenNoCarga = ico2.getImage();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        }
    }

    private void cargarEstadoCarpetas() {
        this.estadoCarpeta1(false);
        this.estadoCarpeta2(false);
    }

    private void estadoCarpeta1(boolean estado) {
        if (estado) {
            if (imagenCarpeta != null) {
                ImagenEstadoCarpeta1.setIcon(new ImageIcon(imagenCarpeta.getScaledInstance(190, 190, Image.SCALE_DEFAULT)));
            }
        } else {
            if (imagenNoCarga != null) {
                ImagenEstadoCarpeta1.setIcon(new ImageIcon(imagenNoCarga.getScaledInstance(190, 190, Image.SCALE_DEFAULT)));
            }
        }
    }

    private void estadoCarpeta2(boolean estado) {
        if (estado) {
            if (imagenCarpeta != null) {
                ImagenEstadoCarpeta2.setIcon(new ImageIcon(imagenCarpeta.getScaledInstance(190, 190, Image.SCALE_DEFAULT)));
            }
        } else {
            if (imagenNoCarga != null) {
                ImagenEstadoCarpeta2.setIcon(new ImageIcon(imagenNoCarga.getScaledInstance(190, 190, Image.SCALE_DEFAULT)));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        EnviarCarpetasJava = new javax.swing.JButton();
        NombreCarpeta1 = new javax.swing.JLabel();
        NombreCarpeta2 = new javax.swing.JLabel();
        ImagenEstadoCarpeta1 = new javax.swing.JLabel();
        ImagenEstadoCarpeta2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        ButtonEjecutar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        ConsolaDef = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDef = new javax.swing.JTextArea();
        LabelLineaColumnaDef = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ConsolaJson = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaJson = new javax.swing.JTextArea();
        LabelLineaColumnaJson = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        VentanaHTML = new javax.swing.JEditorPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        AbrirProyecto = new javax.swing.JMenuItem();
        GuardarProyecto = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jButton1.setText("Cargar Carpeta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cargar Carpeta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        EnviarCarpetasJava.setText("Enviar");
        EnviarCarpetasJava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarCarpetasJavaActionPerformed(evt);
            }
        });

        NombreCarpeta1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NombreCarpeta1.setText("no seleccionado");

        NombreCarpeta2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NombreCarpeta2.setText("no seleccionado");

        ImagenEstadoCarpeta1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        ImagenEstadoCarpeta2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(391, 391, 391)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(120, 120, 120))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(EnviarCarpetasJava, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ImagenEstadoCarpeta1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(NombreCarpeta1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(325, 325, 325)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NombreCarpeta2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ImagenEstadoCarpeta2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(84, 84, 84))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ImagenEstadoCarpeta1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ImagenEstadoCarpeta2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombreCarpeta1)
                    .addComponent(NombreCarpeta2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EnviarCarpetasJava)
                .addGap(241, 241, 241))
        );

        jTabbedPane1.addTab("CARGA DE ARCHIVOS", jPanel1);

        ButtonEjecutar.setText("EJECUTAR");
        ButtonEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEjecutarActionPerformed(evt);
            }
        });

        jButton4.setText("LIMPIAR CONSOLA");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CONSOLA", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14))); // NOI18N

        ConsolaDef.setColumns(20);
        ConsolaDef.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ConsolaDef.setRows(5);
        jScrollPane6.setViewportView(ConsolaDef);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton5.setText("GUARDAR MODIFICACIONES");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextAreaDef.setColumns(20);
        jTextAreaDef.setRows(5);
        jTextAreaDef.setTabSize(2);
        jTextAreaDef.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextAreaDefCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(jTextAreaDef);

        LabelLineaColumnaDef.setText("Linea: 1         Columna: 1");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelLineaColumnaDef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(ButtonEjecutar, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(368, 368, 368)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelLineaColumnaDef)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonEjecutar)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("resportes.def", jPanel4);

        jButton3.setText("Verificar Json");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("GUARDAR MODIFICACIONES");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("CONSOLA"));

        ConsolaJson.setColumns(20);
        ConsolaJson.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ConsolaJson.setRows(5);
        jScrollPane2.setViewportView(ConsolaJson);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton7.setText("Limpiar Consola");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTextAreaJson.setColumns(20);
        jTextAreaJson.setRows(5);
        jTextAreaJson.setTabSize(2);
        jTextAreaJson.setText("{\n    Score: \"0\",\n    Clases: [],\n    Variables: [],\n    Metodos: [],\n    Comentarios: []\n}");
        jTextAreaJson.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextAreaJsonCaretUpdate(evt);
            }
        });
        jScrollPane4.setViewportView(jTextAreaJson);

        LabelLineaColumnaJson.setText("Linea: 1         Columna: 1");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelLineaColumnaJson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(380, 380, 380)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(LabelLineaColumnaJson)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton3)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("resultado.json", jPanel3);

        VentanaHTML.setEditable(false);
        VentanaHTML.setContentType("text/html"); // NOI18N
        jScrollPane5.setViewportView(VentanaHTML);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Reportes", jPanel5);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        jTabbedPane1.addTab("VISUALIZACION DE PROYECTO", jPanel2);

        jMenu1.setText("MENU");

        AbrirProyecto.setText("Abrir Proyecto");
        AbrirProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirProyectoActionPerformed(evt);
            }
        });
        jMenu1.add(AbrirProyecto);

        GuardarProyecto.setText("Guardar Proyecto");
        GuardarProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarProyectoActionPerformed(evt);
            }
        });
        jMenu1.add(GuardarProyecto);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEjecutarActionPerformed
        // TODO add your handling code here:
        try {
            ////ANALISIS DEL ARCHIVO JSON
            consolaDef.clearLog();
            ReporteJson reporteJson;
            AnalizarJson analizarJson = new AnalizarJson();
            analizarJson.ejecutar(this.jTextAreaJson.getText());
            reporteJson = analizarJson.getReporteJson();
            this.mostrarErroresConsolaDefJson(analizarJson.getErrores());
            if (!analizarJson.getErrores().isEmpty()) {
                consolaDef.addLog("Errores en el archivo Json!!! puede que no se renderice correctamente el reporte");
            }

            ////ANALISIS DEL ARCHIVO DEF
            AnalizarDef analizarDef = new AnalizarDef();
            String texto = jTextAreaDef.getText();
            analizarDef.ejecutar(texto, reporteJson);
            this.mostrarErroresConsolaDef(analizarDef.getErrores());
            if (analizarDef.getErrores().isEmpty()) {
                VentanaHTML.setText(analizarDef.getHTML());
            } else {
                VentanaHTML.setText("");
            }
        } catch (NoReporteJson ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_ButtonEjecutarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        this.ConsolaDef.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void EnviarCarpetasJavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarCarpetasJavaActionPerformed
        // TODO add your handling code here:
        if (this.proyectoCopy == null) {
            JOptionPane.showMessageDialog(this, "No hay archivos cargados al programa", "Sin proyecto cargado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (this.proyectoCopy.getPathCarpetaProyecto().isBlank() || this.proyectoCopy.getPathCarpetaProyecto().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Para continuar genere un proyecto", "Crear Proyecto", JOptionPane.INFORMATION_MESSAGE);
                this.crear_guardar_proyecto();
            }
            if (!(this.proyectoCopy.getPathCarpetaProyecto().isBlank() || this.proyectoCopy.getPathCarpetaProyecto().isEmpty())) {
                System.out.println("carpeta1: " + carpeta1);
                System.out.println("carpeta2: " + carpeta2);
                if (carpeta1 != null && carpeta2 != null) {
                    EmpaquetarInformacion empquetado = new EmpaquetarInformacion();
                    System.out.println("debuj");
                    cliente = new Cliente(5000, "localhost");
                    try {
                        System.out.println("debuj2");
                        Proyecto proyecto = empquetado.empaquetar(carpeta1, carpeta2);
                        cliente.setMensaje(proyecto);
                        Thread hilo = new Thread(cliente);
                        hilo.start();
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error al enviar las carpetas al servidor:\n" + ex.getMessage(), "Error al enviar!!!!", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }

    }//GEN-LAST:event_EnviarCarpetasJavaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.cargarCarpeta1();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.cargarCarpeta2();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void AbrirProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirProyectoActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos", "copy");
        fc.setFileFilter(filter);
        int respuesta = fc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            File archivoElegido = fc.getSelectedFile();
            this.cargarArchivo(archivoElegido);
        }
    }//GEN-LAST:event_AbrirProyectoActionPerformed

    private void GuardarProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarProyectoActionPerformed
        // TODO add your handling code here:
        if (proyectoCopy == null) {
            if (carpeta1 != null && carpeta2 != null) {
                this.proyectoCopy = new ProyectoCopy();
                this.crear_guardar_proyecto();
            } else {
                JOptionPane.showMessageDialog(this, "Cargue las dos carpetas con archivos JAVA", "Cargue los archivos JAVA", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            if (proyectoCopy.getPathCarpetaProyecto().isEmpty() || proyectoCopy.getPathCarpetaProyecto().isBlank()) {
                this.crear_guardar_proyecto();
            } else {
                this.guardar_proyecto();
            }
        }

    }//GEN-LAST:event_GuardarProyectoActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        AnalizarJson analizarJson = new AnalizarJson();
        String texto = jTextAreaJson.getText();
        analizarJson.ejecutar(texto);
        this.mostrarErroresConsolaJson(analizarJson.getErrores());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try {
            this.sobreEscribirDef();
            JOptionPane.showMessageDialog(this, "Guardado Correcto!!!", "Guardado Correcto!!!", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puede guardar el archivo .def:\n" + ex.getMessage(), "Error al guardar el archivo!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            // TODO add your handling code here:
            this.sobreEscribirJson();
            JOptionPane.showMessageDialog(this, "Guardado Correcto!!!", "Guardado Correcto!!!", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puede guardar el archivo .json:\n" + ex.getMessage(), "Error al guardar el archivo!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        ConsolaJson.setText("");
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextAreaJsonCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextAreaJsonCaretUpdate
        // TODO add your handling code here:
        try {
            int caret = jTextAreaJson.getCaretPosition();
            int linea = jTextAreaJson.getLineOfOffset(caret);
            int columna = caret - jTextAreaJson.getLineStartOffset(linea);
            String ubicacion = "Linea: " + (linea + 1) + "         Columna: " + (columna + 1);
            LabelLineaColumnaJson.setText(ubicacion);
        } catch (BadLocationException ex) {
            System.out.println("No se puedo registar el movimiento");
        }
    }//GEN-LAST:event_jTextAreaJsonCaretUpdate

    private void jTextAreaDefCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextAreaDefCaretUpdate
        // TODO add your handling code here:
        try {
            int caret = jTextAreaDef.getCaretPosition();
            int linea = jTextAreaDef.getLineOfOffset(caret);
            int columna = caret - jTextAreaDef.getLineStartOffset(linea);
            String ubicacion = "Linea: " + (linea + 1) + "         Columna: " + (columna + 1);
            LabelLineaColumnaDef.setText(ubicacion);
        } catch (BadLocationException ex) {
            System.out.println("No se puedo registar el movimiento");
        }
    }//GEN-LAST:event_jTextAreaDefCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirProyecto;
    private javax.swing.JButton ButtonEjecutar;
    private javax.swing.JTextArea ConsolaDef;
    private javax.swing.JTextArea ConsolaJson;
    private javax.swing.JButton EnviarCarpetasJava;
    private javax.swing.JMenuItem GuardarProyecto;
    private javax.swing.JLabel ImagenEstadoCarpeta1;
    private javax.swing.JLabel ImagenEstadoCarpeta2;
    private javax.swing.JLabel LabelLineaColumnaDef;
    private javax.swing.JLabel LabelLineaColumnaJson;
    private javax.swing.JLabel NombreCarpeta1;
    private javax.swing.JLabel NombreCarpeta2;
    private javax.swing.JEditorPane VentanaHTML;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextAreaDef;
    private javax.swing.JTextArea jTextAreaJson;
    // End of variables declaration//GEN-END:variables

    private void mostrarErroresConsolaDef(ArrayList<ErrorAnalisis> errores) {
        if (!errores.isEmpty()) {
            this.ConsolaDef.setText("");
            String text;
            for (ErrorAnalisis errore : errores) {
                text = "Error " + errore.getTipo() + " \"" + errore.getLexema() + "\"" + ", Linea: " + errore.getLinea() + ", Columna: " + errore.getColumna() + " -> " + errore.getDescipcion();
                consolaDef.addLog(text);
            }

        } else {
            consolaDef.addLog("Archivo def coorecto!!!! puede visualizarlo en Pestaña Reportes");
        }
    }

    private void mostrarErroresConsolaDefJson(ArrayList<ErrorAnalisis> errores) {
        if (!errores.isEmpty()) {
            this.ConsolaDef.setText("");
            String text;
            for (ErrorAnalisis errore : errores) {
                text = "Json -> Error " + errore.getTipo() + " \"" + errore.getLexema() + "\"" + ", Linea: " + errore.getLinea() + ", Columna: " + errore.getColumna() + " -> " + errore.getDescipcion();
                consolaDef.addLog(text);
            }
        } else {
            consolaDef.addLog("Archivo Json coorecto!!!!");
        }
    }

    private void mostrarErroresConsolaJson(ArrayList<ErrorAnalisis> errores) {
        if (!errores.isEmpty()) {
            this.ConsolaJson.setText("");
            String text;
            for (ErrorAnalisis errore : errores) {
                text = "Error " + errore.getTipo() + " \"" + errore.getLexema() + "\"" + ", Linea: " + errore.getLinea() + ", Columna: " + errore.getColumna() + " -> " + errore.getDescipcion();
                consolaJson.addLog(text);
            }
        } else {
            this.ConsolaJson.setText("Archivo Json correcto puede utilizarlo");
        }
    }

    @Override
    public void update(Observable o, Object arg) {
        System.out.println("Se recibio una respuesta del servidor");
        if (arg instanceof String) {
            if (!(((String) arg).isBlank() || ((String) arg).isEmpty())) {
                System.out.println((String) arg);
                this.jTextAreaJson.setText((String) arg);
                try {
                    this.sobreEscribirJson();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "No puede escribir el resultado Json:\n" + ex.getMessage(), "Error al guardar el archivo", JOptionPane.ERROR_MESSAGE);
                }
                this.asignarEstadoTabProyecto(true);
            }
        }
    }

    private void inicializarServidor() {
        Servidor servidor = new Servidor(6000);
        servidor.addObserver(this);
        Thread hilo = new Thread(servidor);
        hilo.start();
    }

    private File seleccionarDirectorio(JLabel label, ProyectoCopy proyectoCopy, int pos) {
        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int respuesta = fc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            label.setText(fc.getSelectedFile().getName());
            if (pos == 1) {
                proyectoCopy.setPathCarpeta1(fc.getSelectedFile().getAbsolutePath());
                this.carpeta1 = fc.getSelectedFile();
            } else {
                proyectoCopy.setPathCarpeta2(fc.getSelectedFile().getAbsolutePath());
                this.carpeta2 = fc.getSelectedFile();
            }
            return fc.getSelectedFile();
        }
        return null;
    }

    private void cargarArchivo(File archivoElegido) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(archivoElegido))) {
            this.proyectoCopy = (ProyectoCopy) ois.readObject();
            System.out.println(this.proyectoCopy.toString());
            this.generalPath = archivoElegido.getParentFile().getParent();
            System.out.println("path general: " + this.generalPath);
            this.cargarProyecto();
            this.mostrarNombreProyecto(archivoElegido.getName());
            this.asignarEstadoTabProyecto(true);
            JOptionPane.showMessageDialog(this, "Carga exitosa!", "Carga exitosa!", JOptionPane.INFORMATION_MESSAGE);
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "El archivo que desea cargar esta dañado" + e.getMessage(), "Error al cargar el archivo!", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puede abrir el archivo:\n" + ex.getMessage(), "Error al cargar el archivo!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void crear_guardar_proyecto() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Todos los archivos *.copy", "copy", "COPY"));
        int seleccion = fileChooser.showSaveDialog(null);
        try {
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                File JFC = fileChooser.getSelectedFile();
                CrearArchivos.crear_guardar(JFC, proyectoCopy);
                this.generalPath = JFC.getParent();
                this.mostrarNombreProyecto(JFC.getName());
                JOptionPane.showMessageDialog(this, "Guardado exitoso!", "Guardado exitoso!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No guardo el proyecto!", "No guardo el proyecto!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Oops! Error\n" + e.getMessage(), "Error al guardar el archivo!", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problemas con la escritura:\n" + ex.getMessage(), "Error al crear proyecto!", JOptionPane.ERROR_MESSAGE);
        } catch (NotDirectoryCreate ex) {
            JOptionPane.showMessageDialog(this, "Conflicto con directorios!\n" + "Escriba otro nombre, para el proyecto", "Error al crear proyecto!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void crearProyecto() {
        this.proyectoCopy = new ProyectoCopy();
    }

    private void guardar_proyecto() {
        try {
            this.sobreEscribirJson();
            this.sobreEscribirDef();
            this.sobreEscribirFileCopy();
            JOptionPane.showMessageDialog(this, "Guardado exitoso!", "Guardado exitoso!", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private void cargarCarpeta1() {
        if (this.proyectoCopy == null) {
            this.crearProyecto();
        }
        ArrayList<String> errores = VerificarProyectoCopy.verificarArchivos(this.seleccionarDirectorio(NombreCarpeta1, this.proyectoCopy, 1));
        String mensaje = "";
        for (String error : errores) {
            mensaje = mensaje + error + "\n";
        }
        if (!errores.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensaje);
            NombreCarpeta1.setText("no seleccionado");
            this.proyectoCopy.setPathCarpeta1("");
            this.carpeta1 = null;
            this.estadoCarpeta1(false);
        } else {
            this.estadoCarpeta1(true);
        }
    }

    private void cargarCarpeta2() {
        if (this.proyectoCopy == null) {
            this.crearProyecto();
        }
        ArrayList<String> errores = VerificarProyectoCopy.verificarArchivos(this.seleccionarDirectorio(NombreCarpeta2, this.proyectoCopy, 2));
        String mensaje = "";
        for (String error : errores) {
            mensaje = mensaje + error;
        }
        if (!errores.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensaje);
            NombreCarpeta2.setText("no seleccionado");
            this.proyectoCopy.setPathCarpeta2("");
            this.carpeta2 = null;
            this.estadoCarpeta2(false);
        } else {
            this.estadoCarpeta2(true);
        }
    }

    private void cargarProyecto() {
        File cp1 = new File(this.proyectoCopy.getPathCarpeta1());
        ArrayList<String> errores = VerificarProyectoCopy.verificarArchivos(cp1);
        String mensaje = "";
        for (String error : errores) {
            mensaje = mensaje + error + "\n";
        }
        if (!errores.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensaje);
            NombreCarpeta1.setText("no seleccionado");
            this.proyectoCopy.setPathCarpeta1("");
            this.carpeta1 = null;
            this.estadoCarpeta1(false);
        } else {
            this.carpeta1 = cp1;
            NombreCarpeta1.setText(cp1.getName());
            this.estadoCarpeta1(true);
        }

        File cp2 = new File(this.proyectoCopy.getPathCarpeta2());
        ArrayList<String> errores2 = VerificarProyectoCopy.verificarArchivos(cp2);
        String mensaje2 = "";
        for (String error : errores2) {
            mensaje2 = mensaje2 + error;
        }
        if (!errores.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensaje);
            NombreCarpeta2.setText("no seleccionado");
            this.proyectoCopy.setPathCarpeta2("");
            this.carpeta2 = null;
            this.estadoCarpeta2(false);
        } else {
            this.carpeta2 = cp2;
            NombreCarpeta2.setText(cp2.getName());
            this.estadoCarpeta2(true);
        }
        try {
            jTextAreaDef.setText(LeerArchivoTexto.leerArchivo(this.generalPath + this.proyectoCopy.getPathArchivDef()));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puedo cargar el archivo .def", "Error al cargar proyecto!", JOptionPane.ERROR_MESSAGE);
        }
        try {
            jTextAreaJson.setText(LeerArchivoTexto.leerArchivo(this.generalPath + this.proyectoCopy.getPathArchivoJson()));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puedo cargar el archivo .json", "Error al cargar proyecto!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void sobreEscribirFileCopy() throws FileNotFoundException, IOException {
        String path = this.generalPath + this.proyectoCopy.getPathCarpetaProyecto() + this.proyectoCopy.getPathCarpetaProyecto() + ".copy";
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(path));
        oos.writeObject(this.proyectoCopy);
        oos.close();
    }

    private void sobreEscribirDef() throws IOException {
        if (proyectoCopy != null && generalPath != null) {
            SobreEscribirArchivos.sobreEscribirArchivoTexto(this.generalPath + this.proyectoCopy.getPathArchivDef(), jTextAreaDef.getText());
        } else {
            JOptionPane.showMessageDialog(this, "No trabaja en ningun proyecto, no puede guardar el archivo", "Error al guardar!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void sobreEscribirJson() throws IOException {
        if (proyectoCopy != null && generalPath != null) {
            SobreEscribirArchivos.sobreEscribirArchivoTexto(this.generalPath + this.proyectoCopy.getPathArchivoJson(), jTextAreaJson.getText());
        } else {
            JOptionPane.showMessageDialog(this, "No trabaja en ningun proyecto, no puede guardar el archivo", "Error al guardar!", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void mostrarNombreProyecto(String nombre) {
        this.setTitle(nombre);
    }

    private void cargarNumeroLineaDef() {
        NumeroLinea numeroLinea = new NumeroLinea(this.jTextAreaDef);
        this.jScrollPane1.setRowHeaderView(numeroLinea);
    }

    private void cargarNumeroLineaJson() {
        NumeroLinea numeroLinea = new NumeroLinea(this.jTextAreaJson);
        this.jScrollPane4.setRowHeaderView(numeroLinea);
    }

    private void asignarEstadoTabProyecto(boolean b) {
        jTabbedPane1.setEnabledAt(1, b);
    }

    private void initSubComponents() {
        this.cargarNumeroLineaDef();
        this.cargarNumeroLineaJson();
        this.setLocationRelativeTo(null);
        this.consolaJson = new ConsoleControl(ConsolaJson);
        this.consolaDef = new ConsoleControl(ConsolaDef);
        this.inicializarServidor();
        this.mostrarNombreProyecto("Sin proyecto abierto");
        this.asignarEstadoTabProyecto(false);
        this.cargarImagenes();
        this.cargarEstadoCarpetas();
    }
}
