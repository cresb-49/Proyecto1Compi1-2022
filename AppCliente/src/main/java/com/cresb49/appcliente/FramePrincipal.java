/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cresb49.appcliente;

import com.cresb49.appcliente.Objetos.EmpaquetarInformacion;
import com.cresb49.appcliente.Objetos.Proyecto;
import com.cresb49.appcliente.analizadores.*;
import com.cresb49.appcliente.analizadores.def.AnalizarDef;
import com.cresb49.appcliente.analizadores.def.obj.exceptions.NoReporteJson;
import com.cresb49.appcliente.analizadores.json.AnalizarJson;
import com.cresb49.appcliente.analizadores.json.obj.Clase;
import com.cresb49.appcliente.analizadores.json.obj.Comentario;
import com.cresb49.appcliente.analizadores.json.obj.Metodo;
import com.cresb49.appcliente.analizadores.json.obj.ReporteJson;
import com.cresb49.appcliente.analizadores.json.obj.Variable;
import com.cresb49.appcliente.comunicacion.*;
import com.cresb49.appcliente.proyecto.*;
import com.cresb49.appcliente.proyecto.exceptions.NotDirectoryCreate;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.*;

import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Benjamin
 */
public class FramePrincipal extends javax.swing.JFrame implements Observer {

    private Cliente cliente = null;
    private Image imagenCarpeta = null;
    private Image imagenNoCarga = null;

    private String generalPath = null;
    private ProyectoCopy proyectoCopy = null;

    private File carpeta1 = null;
    private File carpeta2 = null;

    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.cargarImagenes();
        this.inicializarServidor();
        this.cargarEstadoCarpetas();
    }

    private void cargarImagenes() {
        try {
            ClassLoader loader = FramePrincipal.class.getClassLoader();
            java.net.URL imageURL1 = loader.getResource("com/resources/imgCarpeta.png");
            java.net.URL imageURL2 = loader.getResource("com/resources/signoIncorrecto.png");
            imagenCarpeta = ImageIO.read(imageURL1);
            imagenNoCarga = ImageIO.read(imageURL2);
            System.out.println("funciono");
            //ImagenEstadoCarpeta1.setIcon(new ImageIcon(image.getScaledInstance(190, 190, Image.SCALE_DEFAULT)));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void cargarEstadoCarpetas() {
        this.estadoCarpeta1(false);
        this.estadoCarpeta2(false);
    }

    private void estadoCarpeta1(boolean estado) {
        if (estado) {
            if (imagenCarpeta != null) {
                ImagenEstadoCarpeta1.setIcon(new ImageIcon(imagenCarpeta.getScaledInstance(190, 190, Image.SCALE_DEFAULT)));
            }
        } else {
            if (imagenNoCarga != null) {
                ImagenEstadoCarpeta1.setIcon(new ImageIcon(imagenNoCarga.getScaledInstance(190, 190, Image.SCALE_DEFAULT)));
            }
        }
    }

    private void estadoCarpeta2(boolean estado) {
        if (estado) {
            if (imagenCarpeta != null) {
                ImagenEstadoCarpeta2.setIcon(new ImageIcon(imagenCarpeta.getScaledInstance(190, 190, Image.SCALE_DEFAULT)));
            }
        } else {
            if (imagenNoCarga != null) {
                ImagenEstadoCarpeta2.setIcon(new ImageIcon(imagenNoCarga.getScaledInstance(190, 190, Image.SCALE_DEFAULT)));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        EnviarCarpetasJava = new javax.swing.JButton();
        NombreCarpeta1 = new javax.swing.JLabel();
        NombreCarpeta2 = new javax.swing.JLabel();
        ImagenEstadoCarpeta1 = new javax.swing.JLabel();
        ImagenEstadoCarpeta2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TextPaneDef = new javax.swing.JTextPane();
        ButtonEjecutar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ConsolaDef = new javax.swing.JTextPane();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextPaneJson = new javax.swing.JTextPane();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jButton6 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        VentanaHTML = new javax.swing.JEditorPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        AbrirProyecto = new javax.swing.JMenuItem();
        GuardarProyecto = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jButton1.setText("Cargar Carpeta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cargar Carpeta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        EnviarCarpetasJava.setText("Enviar");
        EnviarCarpetasJava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarCarpetasJavaActionPerformed(evt);
            }
        });

        NombreCarpeta1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NombreCarpeta1.setText("no seleccionado");

        NombreCarpeta2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NombreCarpeta2.setText("no seleccionado");

        ImagenEstadoCarpeta1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        ImagenEstadoCarpeta2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(391, 391, 391)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(120, 120, 120))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(EnviarCarpetasJava, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ImagenEstadoCarpeta1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(NombreCarpeta1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(325, 325, 325)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NombreCarpeta2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ImagenEstadoCarpeta2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(84, 84, 84))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ImagenEstadoCarpeta1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ImagenEstadoCarpeta2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombreCarpeta1)
                    .addComponent(NombreCarpeta2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EnviarCarpetasJava)
                .addGap(241, 241, 241))
        );

        jTabbedPane1.addTab("CARGA DE ARCHIVOS", jPanel1);

        TextPaneDef.setText("</ iniciare a definir de alguna manera />\nInteger Max, i;\nMax=4;\ni=0;\nString texto=\"Su score fue de: \"+RESULT.Score\n</ Aqui defino el html />\n<html>\n<H1>$$( texto )$$<h1>\n        <table>\n            <tr>\n                <th>Numero</th>\n                <th>Variable</th>\n                <th>Tipo</th>\n                <th>Función</th>\n            </tr>\n            <for iterador:i hasta:Max;>\n                <tr>\n                    <td> $$( i )$$ </td>\n                    <td> $$( RESULT.Variables[i].Nombre )$$ </td>\n                    <td> $$( RESULT.Variables[i].Tipo )$$ </td>\n                    <td> $$( RESULT.Variables[i].Funcion )$$ </td>\n                </tr>\n            </for>\n        </table>\n</html>");
        jScrollPane3.setViewportView(TextPaneDef);

        ButtonEjecutar.setText("EJECUTAR");
        ButtonEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEjecutarActionPerformed(evt);
            }
        });

        jButton4.setText("LIMPIAR CONSOLA");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CONSOLA", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18))); // NOI18N

        ConsolaDef.setEditable(false);
        ConsolaDef.setBorder(null);
        ConsolaDef.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane4.setViewportView(ConsolaDef);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
        );

        jButton5.setText("GUARDAR MODIFICACIONES");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(ButtonEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonEjecutar)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("resportes.def", jPanel4);

        TextPaneJson.setText("{\n    Score: \"0.75\",\n    Clases: [\n        { Nombre: \"clase1\"},\n        {Nombre: \"clase2\"}\n    ],\n    Variables: [\n        {Nombre: \"var1\", Tipo: \"int\", Funcion: \"funcion1, funcion2\"},\n        {Nombre: \"var2\", Tipo: \"int\", Funcion: \"funcion2, Clase hola\"}\n    ],\n    Metodos: [\n        {Nombre: \"metodo1\",Tipo: \"void\", Parametros: 2},\n        {Nombre: \"metodo2\",Tipo: \"String\", Parametros: 0}\n    ],\n    Comentarios: [\n        { Texto: \"hola es un comentario\"},\n        { Texto: \"otro coment\"}\n    ]\n}");
        jScrollPane1.setViewportView(TextPaneJson);

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTextPane2);

        jButton6.setText("GUARDAR MODIFICACIONES");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );

        jTabbedPane2.addTab("resultado.json", jPanel3);

        VentanaHTML.setEditable(false);
        VentanaHTML.setContentType("text/html"); // NOI18N
        jScrollPane5.setViewportView(VentanaHTML);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Reportes", jPanel5);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        jTabbedPane1.addTab("VISUALIZACION DE PROYECTO", jPanel2);

        jMenu1.setText("MENU");

        AbrirProyecto.setText("Abrir Proyecto");
        AbrirProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirProyectoActionPerformed(evt);
            }
        });
        jMenu1.add(AbrirProyecto);

        GuardarProyecto.setText("Guardar Proyecto");
        GuardarProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarProyectoActionPerformed(evt);
            }
        });
        jMenu1.add(GuardarProyecto);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEjecutarActionPerformed
        // TODO add your handling code here:
        try {
            AnalizarDef analizarDef = new AnalizarDef();
            String texto = TextPaneDef.getText();
            analizarDef.ejecutar(texto, this.reportePrueba());
            this.mostrarErroresConsola(analizarDef.getErrores());
            if (analizarDef.getErrores().isEmpty()) {
                VentanaHTML.setText(analizarDef.getHTML());
            } else {
                VentanaHTML.setText("");
            }
        } catch (NoReporteJson ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_ButtonEjecutarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        this.limpiarConsolaDef();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void EnviarCarpetasJavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarCarpetasJavaActionPerformed
        // TODO add your handling code here:
        if (this.proyectoCopy == null) {
            JOptionPane.showMessageDialog(this, "No hay un proyecto cargado al programa", "Sin proyecto cargado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (this.proyectoCopy.getPathCarpetaProyecto().isBlank() || this.proyectoCopy.getPathCarpetaProyecto().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Para continuar genere un proyecto", "Crear Proyecto", JOptionPane.INFORMATION_MESSAGE);
                this.crear_guardar_proyecto();
            }
            if (!(this.proyectoCopy.getPathCarpetaProyecto().isBlank() || this.proyectoCopy.getPathCarpetaProyecto().isEmpty())) {
                if (carpeta1 != null && carpeta2 != null) {
                    EmpaquetarInformacion empquetado = new EmpaquetarInformacion();
                    cliente = new Cliente(5000, "localhost");
                    try {
                        Proyecto proyecto = empquetado.empaquetar(carpeta1, carpeta2);
                        cliente.setMensaje(proyecto);
                        Thread hilo = new Thread(cliente);
                        hilo.start();
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error al enviar el codigo al servidor:\n"+ex.getMessage(), "Error al enviar!!!!", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }

    }//GEN-LAST:event_EnviarCarpetasJavaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.cargarCarpeta1();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.cargarCarpeta2();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void AbrirProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirProyectoActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos", "copy");
        fc.setFileFilter(filter);
        int respuesta = fc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            File archivoElegido = fc.getSelectedFile();
            this.cargarArchivo(archivoElegido);
        }
    }//GEN-LAST:event_AbrirProyectoActionPerformed

    private void GuardarProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarProyectoActionPerformed
        // TODO add your handling code here:
        if (proyectoCopy == null) {
            if (carpeta1 != null && carpeta2 != null) {
                this.proyectoCopy = new ProyectoCopy();
                this.crear_guardar_proyecto();
            } else {
                JOptionPane.showMessageDialog(this, "Cargue las dos carpetas con archivos JAVA", "Cargue los archivos JAVA", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            if (proyectoCopy.getPathCarpetaProyecto().isEmpty() || proyectoCopy.getPathCarpetaProyecto().isBlank()) {
                this.crear_guardar_proyecto();
            } else {
                this.guardar_proyecto();
            }
        }

    }//GEN-LAST:event_GuardarProyectoActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        AnalizarJson analizarJson = new AnalizarJson();
        String texto = TextPaneJson.getText();
        analizarJson.ejecutar(texto);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try {
            this.sobreEscribirDef();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puede guardar el archivo .def:\n" + ex.getMessage(), "Error al guardar el archivo!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            // TODO add your handling code here:
            this.sobreEscribirJson();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puede guardar el archivo .json:\n" + ex.getMessage(), "Error al guardar el archivo!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private ReporteJson reportePrueba() {
        String score = "0.75";
        ArrayList<Clase> clases = new ArrayList<>();
        ArrayList<Variable> variables = new ArrayList<>();
        ArrayList<Metodo> metodos = new ArrayList<>();
        ArrayList<Comentario> comentarios = new ArrayList();
        clases.add(new Clase("clase1"));
        clases.add(new Clase("clase2"));
        variables.add(new Variable("var1", "int", "funcion1, funcion2"));
        variables.add(new Variable("var2", "int", "funcion2, Clase hola"));
        metodos.add(new Metodo("metodo1", "void", 2));
        metodos.add(new Metodo("metodo2", "String", 0));
        comentarios.add(new Comentario("hola es un comentario"));
        comentarios.add(new Comentario("otro coment"));
        ReporteJson reporteJson = new ReporteJson(score, clases, variables, metodos, comentarios);
        return reporteJson;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirProyecto;
    private javax.swing.JButton ButtonEjecutar;
    private javax.swing.JTextPane ConsolaDef;
    private javax.swing.JButton EnviarCarpetasJava;
    private javax.swing.JMenuItem GuardarProyecto;
    private javax.swing.JLabel ImagenEstadoCarpeta1;
    private javax.swing.JLabel ImagenEstadoCarpeta2;
    private javax.swing.JLabel NombreCarpeta1;
    private javax.swing.JLabel NombreCarpeta2;
    private javax.swing.JTextPane TextPaneDef;
    private javax.swing.JTextPane TextPaneJson;
    private javax.swing.JEditorPane VentanaHTML;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables

    private void mostrarErroresConsola(ArrayList<ErrorAnalisis> errores) {
        if (!errores.isEmpty()) {
            this.limpiarConsolaDef();
            String text = ConsolaDef.getText();
            for (ErrorAnalisis errore : errores) {
                text = text + "Error " + errore.getTipo() + " \"" + errore.getLexema() + "\"" + ", Linea: " + errore.getLinea() + ", Columna: " + errore.getColumna() + " -> " + errore.getDescipcion() + "\n";
            }
            ConsolaDef.setText(text);
        } else {
            this.limpiarConsolaDef();
        }
    }

    private void limpiarConsolaDef() {
        this.ConsolaDef.setText("");
    }

    @Override
    public void update(Observable o, Object arg) {
        System.out.println("Se recibio una respuesta del servidor");
        System.out.println(arg.toString());
    }

    private void inicializarServidor() {
        Servidor servidor = new Servidor(6000);
        servidor.addObserver(this);
        Thread hilo = new Thread(servidor);
        hilo.start();
    }

    private File seleccionarDirectorio(JLabel label, ProyectoCopy proyectoCopy, int pos) {
        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int respuesta = fc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            label.setText(fc.getSelectedFile().getName());
            if (pos == 1) {
                proyectoCopy.setPathCarpeta1(fc.getSelectedFile().getAbsolutePath());
                this.carpeta1 = fc.getSelectedFile();
            } else {
                proyectoCopy.setPathCarpeta2(fc.getSelectedFile().getAbsolutePath());
                this.carpeta2 = fc.getSelectedFile();
            }
            return fc.getSelectedFile();
        }
        return null;
    }

    private void cargarArchivo(File archivoElegido) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(archivoElegido))) {
            this.proyectoCopy = (ProyectoCopy) ois.readObject();
            System.out.println(this.proyectoCopy.toString());
            this.generalPath = archivoElegido.getParentFile().getParent();
            System.out.println("path general: " + this.generalPath);
            this.cargarProyecto();
            JOptionPane.showMessageDialog(this, "Carga exitosa!", "Carga exitosa!", JOptionPane.INFORMATION_MESSAGE);
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "El archivo que desea cargar esta dañado" + e.getMessage(), "Error al cargar el archivo!", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puede abrir el archivo:\n" + ex.getMessage(), "Error al cargar el archivo!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void crear_guardar_proyecto() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Todos los archivos *.copy", "copy", "COPY"));
        int seleccion = fileChooser.showSaveDialog(null);
        try {
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                File JFC = fileChooser.getSelectedFile();
                CrearArchivos.crear_guardar(JFC, proyectoCopy);
                this.generalPath = JFC.getParent();
                JOptionPane.showMessageDialog(this, "Guardado exitoso!", "Guardado exitoso!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No guardo el proyecto!", "No guardo el proyecto!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Oops! Error\n" + e.getMessage(), "Error al guardar el archivo!", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problemas con la escritura:\n" + ex.getMessage(), "Error al crear proyecto!", JOptionPane.ERROR_MESSAGE);
        } catch (NotDirectoryCreate ex) {
            JOptionPane.showMessageDialog(this, "Conflicto con directorios!\n" + "Escriba otro nombre, para el proyecto", "Error al crear proyecto!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void crearProyecto() {
        this.proyectoCopy = new ProyectoCopy();
    }

    private void guardar_proyecto() {
        try {
            this.sobreEscribirJson();
            this.sobreEscribirDef();
            this.sobreEscribirFileCopy();
            JOptionPane.showMessageDialog(this, "Guardado exitoso!", "Guardado exitoso!", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private void cargarCarpeta1() {
        if (this.proyectoCopy == null) {
            this.crearProyecto();
        }
        ArrayList<String> errores = VerificarProyectoCopy.verificarArchivos(this.seleccionarDirectorio(NombreCarpeta1, this.proyectoCopy, 1));
        String mensaje = "";
        for (String error : errores) {
            mensaje = mensaje + error + "\n";
        }
        if (!errores.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensaje);
            NombreCarpeta1.setText("no seleccionado");
            this.proyectoCopy.setPathCarpeta1("");
            this.carpeta1 = null;
            this.estadoCarpeta1(false);
        } else {
            this.estadoCarpeta1(true);
        }
    }

    private void cargarCarpeta2() {
        if (this.proyectoCopy == null) {
            this.crearProyecto();
        }
        ArrayList<String> errores = VerificarProyectoCopy.verificarArchivos(this.seleccionarDirectorio(NombreCarpeta2, this.proyectoCopy, 2));
        String mensaje = "";
        for (String error : errores) {
            mensaje = mensaje + error;
        }
        if (!errores.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensaje);
            NombreCarpeta2.setText("no seleccionado");
            this.proyectoCopy.setPathCarpeta2("");
            this.carpeta2 = null;
            this.estadoCarpeta2(false);
        } else {
            this.estadoCarpeta2(true);
        }
    }

    private void cargarProyecto() {
        File cp1 = new File(this.proyectoCopy.getPathCarpeta1());
        ArrayList<String> errores = VerificarProyectoCopy.verificarArchivos(cp1);
        String mensaje = "";
        for (String error : errores) {
            mensaje = mensaje + error + "\n";
        }
        if (!errores.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensaje);
            NombreCarpeta1.setText("no seleccionado");
            this.proyectoCopy.setPathCarpeta1("");
            this.carpeta1 = null;
            this.estadoCarpeta1(false);
        } else {
            NombreCarpeta1.setText(cp1.getName());
            this.estadoCarpeta1(true);
        }

        File cp2 = new File(this.proyectoCopy.getPathCarpeta2());
        ArrayList<String> errores2 = VerificarProyectoCopy.verificarArchivos(cp2);
        String mensaje2 = "";
        for (String error : errores2) {
            mensaje2 = mensaje2 + error;
        }
        if (!errores.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensaje);
            NombreCarpeta2.setText("no seleccionado");
            this.proyectoCopy.setPathCarpeta2("");
            this.carpeta2 = null;
            this.estadoCarpeta2(false);
        } else {
            NombreCarpeta2.setText(cp2.getName());
            this.estadoCarpeta2(true);
        }
        try {
            TextPaneDef.setText(LeerArchivoTexto.leerArchivo(this.generalPath + this.proyectoCopy.getPathArchivDef()));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puedo cargar el archivo .def", "Error al cargar proyecto!", JOptionPane.ERROR_MESSAGE);
        }
        try {
            TextPaneJson.setText(LeerArchivoTexto.leerArchivo(this.generalPath + this.proyectoCopy.getPathArchivoJson()));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se puedo cargar el archivo .json", "Error al cargar proyecto!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void sobreEscribirFileCopy() throws FileNotFoundException, IOException {
        String path = this.generalPath + this.proyectoCopy.getPathCarpetaProyecto() + this.proyectoCopy.getPathCarpetaProyecto() + ".copy";
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(path));
        oos.writeObject(this.proyectoCopy);
        oos.close();
    }

    private void sobreEscribirDef() throws IOException {
        SobreEscribirArchivos.sobreEscribirArchivoTexto(this.generalPath + this.proyectoCopy.getPathArchivDef(), TextPaneDef.getText());
    }

    private void sobreEscribirJson() throws IOException {
        SobreEscribirArchivos.sobreEscribirArchivoTexto(this.generalPath + this.proyectoCopy.getPathArchivoJson(), TextPaneJson.getText());
    }
}
