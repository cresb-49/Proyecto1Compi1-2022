
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cresb49.appcliente.analizadores.json;

import java.util.ArrayList;
import com.cresb49.appcliente.analizadores.ErrorAnalisis;
import com.cresb49.appcliente.analizadores.Token;
import com.cresb49.appcliente.ED.Pila;
import com.cresb49.appcliente.analizadores.json.obj.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserJsonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\005\000\002\002\004\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\003\007\000\002\003\011\000" +
    "\002\003\011\000\002\003\011\000\002\003\011\000\002" +
    "\003\002\000\002\005\010\000\002\006\011\000\002\006" +
    "\002\000\002\007\006\000\002\010\007\000\002\010\002" +
    "\000\002\011\006\000\002\012\007\000\002\012\002\000" +
    "\002\015\006\000\002\015\006\000\002\015\006\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\002\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\020\007\000\002\020\007\000\002\020\007\000" +
    "\002\020\002\000\002\013\010\000\002\014\011\000\002" +
    "\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\006\005\001\002\000\004\002\127\001" +
    "\002\000\014\014\ufff5\015\ufff5\016\ufff5\022\ufff5\023\ufff5" +
    "\001\002\000\004\007\126\001\002\000\014\014\013\015" +
    "\012\016\010\022\014\023\011\001\002\000\004\011\077" +
    "\001\002\000\004\011\063\001\002\000\004\011\047\001" +
    "\002\000\004\011\044\001\002\000\004\011\015\001\002" +
    "\000\004\004\016\001\002\000\004\006\uffec\001\002\000" +
    "\004\005\042\001\002\000\004\006\021\001\002\000\010" +
    "\017\uffde\020\uffde\024\uffde\001\002\000\010\017\027\020" +
    "\030\024\026\001\002\000\004\007\024\001\002\000\006" +
    "\005\uffee\010\025\001\002\000\004\006\uffed\001\002\000" +
    "\004\011\037\001\002\000\004\011\034\001\002\000\004" +
    "\011\031\001\002\000\004\012\032\001\002\000\006\007" +
    "\uffe3\010\033\001\002\000\010\017\uffe0\020\uffe0\024\uffe0" +
    "\001\002\000\004\012\035\001\002\000\006\007\uffe4\010" +
    "\036\001\002\000\010\017\uffe1\020\uffe1\024\uffe1\001\002" +
    "\000\004\013\040\001\002\000\006\007\uffe2\010\041\001" +
    "\002\000\010\017\uffdf\020\uffdf\024\uffdf\001\002\000\006" +
    "\007\ufffc\010\043\001\002\000\014\014\ufff7\015\ufff7\016" +
    "\ufff7\022\ufff7\023\ufff7\001\002\000\004\012\045\001\002" +
    "\000\006\007\uffff\010\046\001\002\000\014\014\ufffa\015" +
    "\ufffa\016\ufffa\022\ufffa\023\ufffa\001\002\000\004\004\050" +
    "\001\002\000\004\006\ufff2\001\002\000\004\005\061\001" +
    "\002\000\004\006\053\001\002\000\004\017\054\001\002" +
    "\000\004\011\055\001\002\000\004\012\056\001\002\000" +
    "\004\007\057\001\002\000\006\005\ufff4\010\060\001\002" +
    "\000\004\006\ufff3\001\002\000\006\007\ufffe\010\062\001" +
    "\002\000\014\014\ufff9\015\ufff9\016\ufff9\022\ufff9\023\ufff9" +
    "\001\002\000\004\004\064\001\002\000\004\006\uffdb\001" +
    "\002\000\004\006\071\001\002\000\004\005\067\001\002" +
    "\000\006\007\ufffb\010\070\001\002\000\014\014\ufff6\015" +
    "\ufff6\016\ufff6\022\ufff6\023\ufff6\001\002\000\004\025\072" +
    "\001\002\000\004\011\073\001\002\000\004\012\074\001" +
    "\002\000\004\007\075\001\002\000\006\005\uffdd\010\076" +
    "\001\002\000\004\006\uffdc\001\002\000\004\004\100\001" +
    "\002\000\004\006\uffef\001\002\000\004\006\105\001\002" +
    "\000\004\005\103\001\002\000\006\007\ufffd\010\104\001" +
    "\002\000\014\014\ufff8\015\ufff8\016\ufff8\022\ufff8\023\ufff8" +
    "\001\002\000\010\017\uffe5\020\uffe5\021\uffe5\001\002\000" +
    "\010\017\112\020\114\021\113\001\002\000\004\007\110" +
    "\001\002\000\006\005\ufff1\010\111\001\002\000\004\006" +
    "\ufff0\001\002\000\004\011\123\001\002\000\004\011\120" +
    "\001\002\000\004\011\115\001\002\000\004\012\116\001" +
    "\002\000\006\007\uffe9\010\117\001\002\000\010\017\uffe6" +
    "\020\uffe6\021\uffe6\001\002\000\004\012\121\001\002\000" +
    "\006\007\uffea\010\122\001\002\000\010\017\uffe7\020\uffe7" +
    "\021\uffe7\001\002\000\004\012\124\001\002\000\006\007" +
    "\uffeb\010\125\001\002\000\010\017\uffe8\020\uffe8\021\uffe8" +
    "\001\002\000\004\002\001\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\006\004\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\016\012\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\022\020\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\050\006" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\065\014" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\101\010" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\106\016\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexerJson.next_token(); 
    }


    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerJson lexerJson;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;
    private SimbolosTerminalesJson simbolosTerminalesJson;

    
    public ParserJson (LexerJson lexerJson){ 
        super(lexerJson);
        this.lexerJson=lexerJson;
        this.simbolosTerminalesJson = new SimbolosTerminalesJson();
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserJsonSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJson.obtenerSimbolos(expected_token_ids()).toString();
                System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJson.obtenerSimbolos(expected_token_ids()).toString();
                System.out.println(tok.getLexema()+" "+er);
                this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJson.obtenerSimbolos(expected_token_ids()).toString();
            System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserJsonSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesJson.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            System.out.println(tok.getLexema()+" "+er);
            this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            System.out.println(er);
        }
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    private boolean definition_error(Token ini,Token fin,ArrayList<String> errores){
        boolean status = false;
        for (String errore : errores) {
            status = true;
            String error = "Error en definicion, "+errore+" Ubicacion general --> Linea: "+ini.getLinea()+" a Linea: "+fin.getLinea();
            this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM, ini.getLexema(), ini.getLinea(), ini.getColumna(), error));
            System.out.println(error);
        }
        return status;
    }

    private void referencia_numerica_incorrecta(Token token,Double valor){
        this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,valor.toString(), token.getLinea(),(token.getColumna()+1), ", Se espera un valor entero o una operacion con resultado entero"));
    }

    private void referencia_numero_negativo(Token token,Double valor){
        this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,String.valueOf(valor.intValue()), token.getLinea(),(token.getColumna()+1), ", Se esperaba un valor positivo"));
    }

    private void referencia_numero_negativo_values(Token token,Double valor){
        this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,valor.toString(), token.getLinea(),(token.getColumna()+1), ",Se espera un valor positivo o una operacion con resultado positivo"));
    }

    protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJson$actions {
  private final ParserJson parser;

  /** Constructor */
  CUP$ParserJson$actions(ParserJson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action_part00000000(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJson$result;

      /* select the action based on the action number */
      switch (CUP$ParserJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ini ::= LLA_A reportep LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = start_val;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJson$parser.done_parsing();
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // reportep ::= reporte SCORE DOSPUNTOS STRING 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                                                            RESULT=r;
                                                            Token tokenTmp;
                                                            tokenTmp = (Token)str;
                                                            System.out.println("Score: "+tokenTmp.getLexema());
                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // reportep ::= reporte CLASS DOSPUNTOS CO_A contClass CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                        RESULT=r;
                                                                        System.out.println("Clases: ");
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // reportep ::= reporte VAR DOSPUNTOS CO_A contVar CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                    RESULT=r;
                                                                    System.out.println("Variables: ");
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // reportep ::= reporte METD DOSPUNTOS CO_A contMet CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                    RESULT=r;
                                                                    System.out.println("Metodos: ");
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // reportep ::= reporte COMENT DOSPUNTOS CO_A contCom CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                        RESULT=r;
                                                                        System.out.println("Comentarios: ");
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // reporte ::= reporte SCORE DOSPUNTOS STRING COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                            RESULT=r;
                                                            Token tokenTmp;
                                                            tokenTmp = (Token)str;
                                                            System.out.println("Score: "+tokenTmp.getLexema());
                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // reporte ::= reporte CLASS DOSPUNTOS CO_A contClass CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                        RESULT=r;
                                                                        System.out.println("Clases: ");
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // reporte ::= reporte VAR DOSPUNTOS CO_A contVar CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                    RESULT=r;
                                                                    System.out.println("Variables: ");
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reporte ::= reporte METD DOSPUNTOS CO_A contMet CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                    RESULT=r;
                                                                    System.out.println("Metodos: ");
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // reporte ::= reporte COMENT DOSPUNTOS CO_A contCom CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                        RESULT = r;
                                                                        System.out.println("Comentarios: ");
                                                                        if(RESULT!=null){

                                                                        }    
                                                                        
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // reporte ::= 
            {
              ReporteJson RESULT =null;
		
                                                            RESULT = new ReporteJson();
                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contClass ::= contClassp LLA_A NAME DOSPUNTOS STRING LLA_C 
            {
              ArrayList<Clase> RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                                RESULT = cc;
                                                                                if(RESULT!=null){
                                                                                    Token token = (Token)str;
                                                                                    if(token.getLexema().isEmpty()||token.getLexema().isBlank()){
                                                                                        System.out.println("La cadena esta vacia");
                                                                                    }else{
                                                                                        Clase clase = new Clase(token.getLexema());
                                                                                        RESULT.add(clase);
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contClass",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contClassp ::= contClassp LLA_A NAME DOSPUNTOS STRING LLA_C COMA 
            {
              ArrayList<Clase> RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                                RESULT = cc;
                                                                                if(RESULT!=null){
                                                                                    Token token = (Token)str;
                                                                                    if(token.getLexema().isEmpty()||token.getLexema().isBlank()){
                                                                                        System.out.println("La cadena esta vacia");
                                                                                    }else{
                                                                                        Clase clase = new Clase(token.getLexema());
                                                                                        RESULT.add(clase);
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contClassp",4, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contClassp ::= 
            {
              ArrayList<Clase> RESULT =null;
		
                    RESULT = new ArrayList<>();
                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contClassp",4, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // contVar ::= contVarp LLA_A expVar LLA_C 
            {
              ArrayList<Variable> RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                    RESULT = cv;
                                                                    if(RESULT!=null){
                                                                        RESULT.add(expv);
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contVar",5, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contVarp ::= contVarp LLA_A expVar LLA_C COMA 
            {
              ArrayList<Variable> RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                    RESULT = cv;
                                                                    if(RESULT!=null){
                                                                        RESULT.add(expv);
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contVarp",6, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contVarp ::= 
            {
              ArrayList<Variable> RESULT =null;
		
                    RESULT = new ArrayList<>();
                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contVarp",6, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contMet ::= contMetp LLA_A expMet LLA_C 
            {
              ArrayList<Metodo> RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                RESULT = cm;
                                                                if(RESULT!=null){
                                                                    RESULT.add(expm);
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contMet",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contMetp ::= contMetp LLA_A expMet LLA_C COMA 
            {
              ArrayList<Metodo> RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                RESULT = cm;
                                                                if(RESULT!=null){
                                                                    RESULT.add(expm);
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contMetp",8, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contMetp ::= 
            {
              ArrayList<Metodo> RESULT =null;
		
                    RESULT = new ArrayList<>();
                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contMetp",8, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expVar ::= expVarp NAME DOSPUNTOS STRING 
            {
              Variable RESULT =null;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                                                                RESULT = expv;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    Token parametro = (Token)p;
                                                                    boolean ban = true;
                                                                    if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                        System.out.println("La cadena esta vacia");
                                                                        ban=false;
                                                                    }
                                                                    if(RESULT.getNombre()!=null){
                                                                        System.out.println("La propiedad ya habia sido definida");
                                                                        ban=false;
                                                                    }
                                                                    if(ban){
                                                                        RESULT.setNombre(token.getLexema());
                                                                    }
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVar",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expVar ::= expVarp FUN DOSPUNTOS STRING 
            {
              Variable RESULT =null;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                                                                RESULT = expv;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    Token parametro = (Token)p;
                                                                    boolean ban = true;
                                                                    if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                        System.out.println("La cadena esta vacia");
                                                                        ban=false;
                                                                    }
                                                                    if(RESULT.getFuncion()!=null){
                                                                        System.out.println("La propiedad ya habia sido definida");
                                                                        ban=false;
                                                                    }
                                                                    if(ban){
                                                                        RESULT.setFuncion(token.getLexema());
                                                                    }
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVar",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expVar ::= expVarp TYPE DOSPUNTOS STRING 
            {
              Variable RESULT =null;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                                                                RESULT = expv;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    Token parametro = (Token)p;
                                                                    boolean ban = true;
                                                                    if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                        System.out.println("La cadena esta vacia");
                                                                        ban=false;
                                                                    }
                                                                    if(RESULT.getTipo()!=null){
                                                                        System.out.println("La propiedad ya habia sido definida");
                                                                        ban=false;
                                                                    }
                                                                    if(ban){
                                                                        RESULT.setTipo(token.getLexema());
                                                                    }
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVar",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expVarp ::= expVarp NAME DOSPUNTOS STRING COMA 
            {
              Variable RESULT =null;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                RESULT = expv;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    Token parametro = (Token)p;
                                                                    boolean ban = true;
                                                                    if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                        System.out.println("La cadena esta vacia");
                                                                        ban=false;
                                                                    }
                                                                    if(RESULT.getNombre()!=null){
                                                                        System.out.println("La propiedad ya habia sido definida");
                                                                        ban=false;
                                                                    }
                                                                    if(ban){
                                                                        RESULT.setNombre(token.getLexema());
                                                                    }
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVarp",12, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expVarp ::= expVarp FUN DOSPUNTOS STRING COMA 
            {
              Variable RESULT =null;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                RESULT = expv;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    Token parametro = (Token)p;
                                                                    boolean ban = true;
                                                                    if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                        System.out.println("La cadena esta vacia");
                                                                        ban=false;
                                                                    }
                                                                    if(RESULT.getFuncion()!=null){
                                                                        System.out.println("La propiedad ya habia sido definida");
                                                                        ban=false;
                                                                    }
                                                                    if(ban){
                                                                        RESULT.setFuncion(token.getLexema());
                                                                    }
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVarp",12, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expVarp ::= expVarp TYPE DOSPUNTOS STRING COMA 
            {
              Variable RESULT =null;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                RESULT = expv;
                                                                if(RESULT != null){
                                                                    Token token = (Token) str;
                                                                    Token parametro = (Token)p;
                                                                    boolean ban = true;
                                                                    if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                        System.out.println("La cadena esta vacia");
                                                                        ban=false;
                                                                    }
                                                                    if(RESULT.getTipo()!=null){
                                                                        System.out.println("La propiedad ya habia sido definida");
                                                                        ban=false;
                                                                    }
                                                                    if(ban){
                                                                        RESULT.setTipo(token.getLexema());
                                                                    }
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVarp",12, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expVarp ::= 
            {
              Variable RESULT =null;
		
                RESULT = new Variable();
            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVarp",12, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expMet ::= expMetp NAME DOSPUNTOS STRING 
            {
              Metodo RESULT =null;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                                                            RESULT = expm;
                                                            if(RESULT!=null){
                                                                Token token = (Token) str;
                                                                Token parametro = (Token)p;
                                                                boolean ban = true;
                                                                if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                    System.out.println("La cadena esta vacia");
                                                                    ban=false;
                                                                }
                                                                if(RESULT.getNombre()!=null){
                                                                    System.out.println("La propiedad ya habia sido definida");
                                                                    ban=false;
                                                                }
                                                                if(ban){
                                                                    RESULT.setNombre(token.getLexema());
                                                                }
                                                            }
                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMet",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expMet ::= expMetp TYPE DOSPUNTOS STRING 
            {
              Metodo RESULT =null;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                                                            RESULT = expm;
                                                            if(RESULT!=null){
                                                                Token token = (Token) str;
                                                                Token parametro = (Token)p;
                                                                boolean ban = true;
                                                                if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                    System.out.println("La cadena esta vacia");
                                                                    ban=false;
                                                                }
                                                                if(RESULT.getTipo()!=null){
                                                                    System.out.println("La propiedad ya habia sido definida");
                                                                    ban=false;
                                                                }
                                                                if(ban){
                                                                    RESULT.setTipo(token.getLexema());
                                                                }
                                                            }
                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMet",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expMet ::= expMetp PARA DOSPUNTOS ENTERO 
            {
              Metodo RESULT =null;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                                                            RESULT = expm;
                                                            if(RESULT!=null){
                                                                Token token = (Token) ent;
                                                                Token parametro = (Token)p;

                                                                if(RESULT.getParametros()!=null){
                                                                    System.out.println("La propiedad ya habia sido definida");
                                                                }else{
                                                                    RESULT.setParametros(Integer.valueOf(token.getLexema()));
                                                                }
                                                            }
                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMet",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expMetp ::= expMetp NAME DOSPUNTOS STRING COMA 
            {
              Metodo RESULT =null;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                RESULT = expm;
                                                                if(RESULT!=null){
                                                                    Token token = (Token) str;
                                                                    Token parametro = (Token)p;
                                                                    boolean ban = true;
                                                                    if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                        System.out.println("La cadena esta vacia");
                                                                        ban=false;
                                                                    }
                                                                    if(RESULT.getNombre()!=null){
                                                                        System.out.println("La propiedad ya habia sido definida");
                                                                        ban=false;
                                                                    }
                                                                    if(ban){
                                                                        RESULT.setNombre(token.getLexema());
                                                                    }
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMetp",14, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expMetp ::= expMetp TYPE DOSPUNTOS STRING COMA 
            {
              Metodo RESULT =null;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                RESULT = expm;
                                                                if(RESULT!=null){
                                                                    Token token = (Token) str;
                                                                    Token parametro = (Token)p;
                                                                    boolean ban = true;
                                                                    if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                        System.out.println("La cadena esta vacia");
                                                                        ban=false;
                                                                    }
                                                                    if(RESULT.getTipo()!=null){
                                                                        System.out.println("La propiedad ya habia sido definida");
                                                                        ban=false;
                                                                    }
                                                                    if(ban){
                                                                        RESULT.setTipo(token.getLexema());
                                                                    }
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMetp",14, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expMetp ::= expMetp PARA DOSPUNTOS ENTERO COMA 
            {
              Metodo RESULT =null;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                RESULT = expm;
                                                                if(RESULT!=null){
                                                                    Token token = (Token) ent;
                                                                    Token parametro = (Token)p;

                                                                    if(RESULT.getParametros()!=null){
                                                                        System.out.println("La propiedad ya habia sido definida");
                                                                    }else{
                                                                        RESULT.setParametros(Integer.valueOf(token.getLexema()));
                                                                    }
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMetp",14, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expMetp ::= 
            {
              Metodo RESULT =null;
		
                RESULT = new Metodo();
            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMetp",14, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contCom ::= contComp LLA_A TEXT DOSPUNTOS STRING LLA_C 
            {
              ArrayList<Comentario> RESULT =null;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                            RESULT = cme;
                                                                            if(RESULT!=null){
                                                                                Token token = (Token)str;
                                                                                if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                                    System.out.println("La cadena esta vacia");
                                                                                }else{
                                                                                    Comentario comentario = new Comentario(token.getLexema());
                                                                                    RESULT.add(comentario);
                                                                                }
                                                                            }
                                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contCom",9, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // contComp ::= contComp LLA_A TEXT DOSPUNTOS STRING LLA_C COMA 
            {
              ArrayList<Comentario> RESULT =null;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                            RESULT = cme;
                                                                            if(RESULT!=null){
                                                                                Token token = (Token)str;
                                                                                if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                                    System.out.println("La cadena esta vacia");
                                                                                }else{
                                                                                    Comentario comentario = new Comentario(token.getLexema());
                                                                                    RESULT.add(comentario);
                                                                                }
                                                                            }
                                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contComp",10, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contComp ::= 
            {
              ArrayList<Comentario> RESULT =null;
		
                    RESULT = new ArrayList<>();
                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contComp",10, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJson$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
              return CUP$ParserJson$do_action_part00000000(
                               CUP$ParserJson$act_num,
                               CUP$ParserJson$parser,
                               CUP$ParserJson$stack,
                               CUP$ParserJson$top);
    }
}

}
