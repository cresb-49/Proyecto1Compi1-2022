
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cresb49.appcliente.analizadores.json;

import java.util.ArrayList;
import com.cresb49.appcliente.analizadores.ErrorAnalisis;
import com.cresb49.appcliente.analizadores.Token;
import com.cresb49.appcliente.ED.Pila;
import com.cresb49.appcliente.analizadores.json.obj.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserJsonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\005\000\002\002\004\000\002\004" +
    "\006\000\002\004\010\000\002\004\007\000\002\004\010" +
    "\000\002\004\007\000\002\004\010\000\002\004\007\000" +
    "\002\004\010\000\002\004\007\000\002\004\004\000\002" +
    "\003\007\000\002\003\011\000\002\003\010\000\002\003" +
    "\011\000\002\003\010\000\002\003\011\000\002\003\010" +
    "\000\002\003\011\000\002\003\010\000\002\003\002\000" +
    "\002\003\004\000\002\005\010\000\002\005\004\000\002" +
    "\006\011\000\002\006\002\000\002\006\004\000\002\007" +
    "\006\000\002\007\004\000\002\010\007\000\002\010\002" +
    "\000\002\010\004\000\002\011\006\000\002\011\004\000" +
    "\002\012\007\000\002\012\002\000\002\012\004\000\002" +
    "\015\015\000\002\015\015\000\002\015\015\000\002\015" +
    "\015\000\002\015\015\000\002\015\015\000\002\017\015" +
    "\000\002\017\015\000\002\017\015\000\002\017\015\000" +
    "\002\017\015\000\002\017\015\000\002\013\010\000\002" +
    "\013\004\000\002\014\011\000\002\014\002\000\002\014" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\006\005\001\002\000\004\002\266\001" +
    "\002\000\016\003\uffec\014\uffec\015\uffec\016\uffec\022\uffec" +
    "\023\uffec\001\002\000\004\007\265\001\002\000\016\003" +
    "\011\014\014\015\013\016\010\022\015\023\012\001\002" +
    "\000\004\011\162\001\002\000\020\003\uffeb\007\ufff6\014" +
    "\uffeb\015\uffeb\016\uffeb\022\uffeb\023\uffeb\001\002\000\004" +
    "\011\143\001\002\000\004\011\124\001\002\000\004\011" +
    "\121\001\002\000\004\011\016\001\002\000\004\004\017" +
    "\001\002\000\010\003\uffdd\005\020\006\uffdd\001\002\000" +
    "\006\007\ufff9\010\120\001\002\000\004\005\116\001\002" +
    "\000\006\003\023\006\024\001\002\000\010\003\uffdc\005" +
    "\uffdf\006\uffdc\001\002\000\010\017\027\020\030\024\025" +
    "\001\002\000\004\011\075\001\002\000\004\007\073\001" +
    "\002\000\004\011\052\001\002\000\004\011\031\001\002" +
    "\000\004\012\032\001\002\000\004\010\033\001\002\000" +
    "\006\017\035\024\034\001\002\000\004\011\044\001\002" +
    "\000\004\011\036\001\002\000\004\012\037\001\002\000" +
    "\004\010\040\001\002\000\004\024\041\001\002\000\004" +
    "\011\042\001\002\000\004\013\043\001\002\000\004\007" +
    "\uffd2\001\002\000\004\013\045\001\002\000\004\010\046" +
    "\001\002\000\004\017\047\001\002\000\004\011\050\001" +
    "\002\000\004\012\051\001\002\000\004\007\uffd3\001\002" +
    "\000\004\012\053\001\002\000\004\010\054\001\002\000" +
    "\006\020\056\024\055\001\002\000\004\011\065\001\002" +
    "\000\004\011\057\001\002\000\004\012\060\001\002\000" +
    "\004\010\061\001\002\000\004\024\062\001\002\000\004" +
    "\011\063\001\002\000\004\013\064\001\002\000\004\007" +
    "\uffd5\001\002\000\004\013\066\001\002\000\004\010\067" +
    "\001\002\000\004\020\070\001\002\000\004\011\071\001" +
    "\002\000\004\012\072\001\002\000\004\007\uffd4\001\002" +
    "\000\006\005\uffe0\010\074\001\002\000\006\003\uffde\006" +
    "\uffde\001\002\000\004\013\076\001\002\000\004\010\077" +
    "\001\002\000\006\017\100\020\101\001\002\000\004\011" +
    "\110\001\002\000\004\011\102\001\002\000\004\012\103" +
    "\001\002\000\004\010\104\001\002\000\004\017\105\001" +
    "\002\000\004\011\106\001\002\000\004\012\107\001\002" +
    "\000\004\007\uffd1\001\002\000\004\012\111\001\002\000" +
    "\004\010\112\001\002\000\004\020\113\001\002\000\004" +
    "\011\114\001\002\000\004\012\115\001\002\000\004\007" +
    "\uffd0\001\002\000\006\007\ufffa\010\117\001\002\000\016" +
    "\003\ufff0\014\ufff0\015\ufff0\016\ufff0\022\ufff0\023\ufff0\001" +
    "\002\000\016\003\uffef\014\uffef\015\uffef\016\uffef\022\uffef" +
    "\023\uffef\001\002\000\004\012\122\001\002\000\006\007" +
    "\uffff\010\123\001\002\000\016\003\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\022\ufff5\023\ufff5\001\002\000\004\004\125\001" +
    "\002\000\010\003\uffe7\005\126\006\uffe7\001\002\000\006" +
    "\007\ufffd\010\142\001\002\000\004\005\140\001\002\000" +
    "\006\003\131\006\132\001\002\000\010\003\uffe6\005\uffe9" +
    "\006\uffe6\001\002\000\004\017\133\001\002\000\004\011" +
    "\134\001\002\000\004\012\135\001\002\000\004\007\136" +
    "\001\002\000\006\005\uffea\010\137\001\002\000\006\003" +
    "\uffe8\006\uffe8\001\002\000\006\007\ufffe\010\141\001\002" +
    "\000\016\003\ufff4\014\ufff4\015\ufff4\016\ufff4\022\ufff4\023" +
    "\ufff4\001\002\000\016\003\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\022\ufff3\023\ufff3\001\002\000\004\004\144\001\002\000" +
    "\010\003\uffcc\005\145\006\uffcc\001\002\000\006\007\ufff7" +
    "\010\161\001\002\000\006\003\152\006\153\001\002\000" +
    "\004\005\150\001\002\000\006\007\ufff8\010\151\001\002" +
    "\000\016\003\uffee\014\uffee\015\uffee\016\uffee\022\uffee\023" +
    "\uffee\001\002\000\010\003\uffcb\005\uffce\006\uffcb\001\002" +
    "\000\004\025\154\001\002\000\004\011\155\001\002\000" +
    "\004\012\156\001\002\000\004\007\157\001\002\000\006" +
    "\005\uffcf\010\160\001\002\000\006\003\uffcd\006\uffcd\001" +
    "\002\000\016\003\uffed\014\uffed\015\uffed\016\uffed\022\uffed" +
    "\023\uffed\001\002\000\004\004\163\001\002\000\010\003" +
    "\uffe2\005\164\006\uffe2\001\002\000\006\007\ufffb\010\264" +
    "\001\002\000\006\003\171\006\172\001\002\000\004\005" +
    "\167\001\002\000\006\007\ufffc\010\170\001\002\000\016" +
    "\003\ufff2\014\ufff2\015\ufff2\016\ufff2\022\ufff2\023\ufff2\001" +
    "\002\000\010\003\uffe1\005\uffe4\006\uffe1\001\002\000\010" +
    "\017\173\020\176\021\175\001\002\000\004\011\243\001" +
    "\002\000\004\007\241\001\002\000\004\011\220\001\002" +
    "\000\004\011\177\001\002\000\004\012\200\001\002\000" +
    "\004\010\201\001\002\000\006\017\202\021\203\001\002" +
    "\000\004\011\212\001\002\000\004\011\204\001\002\000" +
    "\004\012\205\001\002\000\004\010\206\001\002\000\004" +
    "\017\207\001\002\000\004\011\210\001\002\000\004\012" +
    "\211\001\002\000\004\007\uffd7\001\002\000\004\012\213" +
    "\001\002\000\004\010\214\001\002\000\004\021\215\001" +
    "\002\000\004\011\216\001\002\000\004\012\217\001\002" +
    "\000\004\007\uffd6\001\002\000\004\012\221\001\002\000" +
    "\004\010\222\001\002\000\006\017\223\020\224\001\002" +
    "\000\004\011\233\001\002\000\004\011\225\001\002\000" +
    "\004\012\226\001\002\000\004\010\227\001\002\000\004" +
    "\017\230\001\002\000\004\011\231\001\002\000\004\012" +
    "\232\001\002\000\004\007\uffd8\001\002\000\004\012\234" +
    "\001\002\000\004\010\235\001\002\000\004\020\236\001" +
    "\002\000\004\011\237\001\002\000\004\012\240\001\002" +
    "\000\004\007\uffd9\001\002\000\006\005\uffe5\010\242\001" +
    "\002\000\006\003\uffe3\006\uffe3\001\002\000\004\012\244" +
    "\001\002\000\004\010\245\001\002\000\006\020\247\021" +
    "\246\001\002\000\004\011\256\001\002\000\004\011\250" +
    "\001\002\000\004\012\251\001\002\000\004\010\252\001" +
    "\002\000\004\021\253\001\002\000\004\011\254\001\002" +
    "\000\004\012\255\001\002\000\004\007\uffdb\001\002\000" +
    "\004\012\257\001\002\000\004\010\260\001\002\000\004" +
    "\020\261\001\002\000\004\011\262\001\002\000\004\012" +
    "\263\001\002\000\004\007\uffda\001\002\000\016\003\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\022\ufff1\023\ufff1\001\002\000" +
    "\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\006\004\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\020\012\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\126\006\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\146\014\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\165\010\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexerJson.next_token(); 
    }


    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerJson lexerJson;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;
    private SimbolosTerminalesJson simbolosTerminalesJson;
    private ReporteJson reporteJson;

    
    public ParserJson (LexerJson lexerJson){ 
        super(lexerJson);
        this.lexerJson=lexerJson;
        this.simbolosTerminalesJson = new SimbolosTerminalesJson();
    }

    public ReporteJson getReporteJson() {
        return reporteJson;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserJsonSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJson.obtenerSimbolos(expected_token_ids()).toString();
                System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJson.obtenerSimbolos(expected_token_ids()).toString();
                System.out.println(tok.getLexema()+" "+er);
                this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJson.obtenerSimbolos(expected_token_ids()).toString();
            System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserJsonSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesJson.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            System.out.println(tok.getLexema()+" "+er);
            this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            System.out.println(er);
        }
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    private boolean definition_error(Token ini,Token fin,ArrayList<String> errores){
        boolean status = false;
        for (String errore : errores) {
            status = true;
            String error = "Error en definicion, "+errore+" Ubicacion general --> Linea: "+ini.getLinea()+" a Linea: "+fin.getLinea();
            this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM, ini.getLexema(), ini.getLinea(), ini.getColumna(), error));
            System.out.println(error);
        }
        return status;
    }

    private void verificar_reporte_json(ReporteJson verReporteJson,Token ref){
        if(verReporteJson.getScore() == null){
          String error = "Error en definicion, el resultado Json no tiene Score";
          this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,"Score", ref.getLinea(),ref.getColumna(), error));
        }
        if(verReporteJson.getClases() == null){
          String error = "Error en definicion, el resultado Json no tiene lista de Clases";
          this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,"Clases", ref.getLinea(),ref.getColumna(), error));
        }
        if(verReporteJson.getVariables() == null){
          String error = "Error en definicion, el resultado Json no tiene lista de Variables";
          this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,"Variables", ref.getLinea(),ref.getColumna(), error));
        }
        if(verReporteJson.getMetodos() == null){
          String error = "Error en definicion, el resultado Json no tiene lista de Metodos";
          this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,"Metodos", ref.getLinea(),ref.getColumna(), error));
        }
        if(verReporteJson.getComentarios() == null){
          String error = "Error en definicion, el resultado Json no tiene lista de Comentarios";
          this.lexerJson.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,"Comentarios", ref.getLinea(),ref.getColumna(), error));
        }
    }

    private Metodo verificar_metodo(Token valname, Token valtipo, Token valpara) {
        if(valname.getLexema().isEmpty()||valname.getLexema().isBlank()){
            semantic_error(valname,"El valor de la cadena de texto esta vacia");
        }
        if(valtipo.getLexema().isEmpty()||valtipo.getLexema().isBlank()){
            semantic_error(valtipo,"El valor de la cadena de texto esta vacia");
        }
        return new Metodo(valname.getLexema(), valtipo.getLexema(), Integer.valueOf(valpara.getLexema()));
    }

    private Variable verificar_variable(Token valname, Token valtipo, Token valFun) {
        if(valname.getLexema().isEmpty()||valname.getLexema().isBlank()){
            semantic_error(valname,"El valor de la cadena de texto esta vacia");
        }
        if(valtipo.getLexema().isEmpty()||valtipo.getLexema().isBlank()){
            semantic_error(valtipo,"El valor de la cadena de texto esta vacia");
        }
        if(valFun.getLexema().isEmpty()||valFun.getLexema().isBlank()){
            semantic_error(valFun,"El valor de la cadena de texto esta vacia");
        }
        return new Variable(valname.getLexema(), valtipo.getLexema(), valFun.getLexema());
    }

    protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJson$actions {
  private final ParserJson parser;

  /** Constructor */
  CUP$ParserJson$actions(ParserJson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action_part00000000(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJson$result;

      /* select the action based on the action number */
      switch (CUP$ParserJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ini ::= LLA_A reportep LLA_C 
            {
              Object RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                        if(r!=null){
                                            reporteJson=r;
                                            verificar_reporte_json(reporteJson,ref);
                                        }
                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = start_val;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJson$parser.done_parsing();
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // reportep ::= reporte SCORE DOSPUNTOS STRING 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                                                            RESULT=r;
                                                            if(RESULT!=null){
                                                                Token tokenTmp = str;
                                                                boolean bandera = true;
                                                                if(tokenTmp.getLexema().isEmpty()||tokenTmp.getLexema().isBlank()){
                                                                    semantic_error(tokenTmp,"El valor de la cadena de texto esta vacia");
                                                                    bandera=false;
                                                                }
                                                                String val="";
                                                                try {
                                                                    Double val2 = Double.valueOf(tokenTmp.getLexema());
                                                                    val = val2.toString();
                                                                } catch (NumberFormatException e) {
                                                                    bandera=false;
                                                                    semantic_error(tokenTmp,"El valor de la cadena no representa un valor numerico");
                                                                }
                                                                if(RESULT.getScore()!=null){
                                                                    semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                    bandera=false;
                                                                }
                                                                if(bandera){
                                                                    RESULT.setScore(val);
                                                                }
                                                            }
                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // reportep ::= reporte CLASS DOSPUNTOS CO_A contClass CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                        RESULT=r;
                                                                        if(RESULT!=null){
                                                                            if(RESULT.getClases()!=null){
                                                                                semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                            }else{
                                                                                RESULT.setClases(cc);
                                                                            }
                                                                        }
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // reportep ::= reporte CLASS DOSPUNTOS CO_A CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		
                                                                        RESULT=r;
                                                                        if(RESULT!=null){
                                                                            if(RESULT.getClases()!=null){
                                                                                semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                            }else{
                                                                                RESULT.setClases(new ArrayList<>());
                                                                            }
                                                                        }
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // reportep ::= reporte VAR DOSPUNTOS CO_A contVar CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                    RESULT=r;
                                                                    if(RESULT!=null){
                                                                        if(RESULT.getVariables()!=null){
                                                                            semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                        }else{
                                                                            RESULT.setVariables(cv);
                                                                        }
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // reportep ::= reporte VAR DOSPUNTOS CO_A CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		
                                                                    RESULT=r;
                                                                    if(RESULT!=null){
                                                                        if(RESULT.getVariables()!=null){
                                                                            semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                        }else{
                                                                            RESULT.setVariables(new ArrayList<>());
                                                                        }
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // reportep ::= reporte METD DOSPUNTOS CO_A contMet CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                    RESULT=r;
                                                                    if(RESULT!=null){
                                                                        if(RESULT.getMetodos()!=null){
                                                                            semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                        }else{
                                                                            RESULT.setMetodos(cm);
                                                                        }
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // reportep ::= reporte METD DOSPUNTOS CO_A CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		
                                                                    RESULT=r;
                                                                    if(RESULT!=null){
                                                                        if(RESULT.getMetodos()!=null){
                                                                            semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                        }else{
                                                                            RESULT.setMetodos(new ArrayList<>());
                                                                        }
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // reportep ::= reporte COMENT DOSPUNTOS CO_A contCom CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                        RESULT = r;
                                                                        if(RESULT!=null){
                                                                            if(RESULT.getComentarios()!=null){
                                                                                semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                            }else{
                                                                                RESULT.setComentarios(cme);
                                                                            }
                                                                        }
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reportep ::= reporte COMENT DOSPUNTOS CO_A CO_C 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		
                                                                        RESULT = r;
                                                                        if(RESULT!=null){
                                                                            if(RESULT.getComentarios()!=null){
                                                                                semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                            }else{
                                                                                RESULT.setComentarios(new ArrayList<>());
                                                                            }
                                                                        }
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // reportep ::= reporte error 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = r;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reportep",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // reporte ::= reporte SCORE DOSPUNTOS STRING COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                            RESULT=r;
                                                            if(RESULT!=null){
                                                                Token tokenTmp = str;
                                                                boolean bandera = true;
                                                                if(tokenTmp.getLexema().isEmpty()||tokenTmp.getLexema().isBlank()){
                                                                    semantic_error(tokenTmp,"El valor de la cadena de texto esta vacia");
                                                                    bandera=false;
                                                                }
                                                                String val="";
                                                                try {
                                                                    Double val2 = Double.valueOf(tokenTmp.getLexema());
                                                                    val = val2.toString();
                                                                } catch (NumberFormatException e) {
                                                                    bandera=false;
                                                                    semantic_error(tokenTmp,"El valor de la cadena no representa un valor numerico");
                                                                }
                                                                if(RESULT.getScore()!=null){
                                                                    semantic_error(p,"La propiedad ya a sido generada con anterioridad");
                                                                    bandera=false;
                                                                }
                                                                if(bandera){
                                                                    RESULT.setScore(val);
                                                                }
                                                            }
                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // reporte ::= reporte CLASS DOSPUNTOS CO_A contClass CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                        RESULT=r;
                                                                        if(RESULT!=null){
                                                                            if(RESULT.getClases()!=null){
                                                                                semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                            }else{
                                                                                RESULT.setClases(cc);
                                                                            }
                                                                        }
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reporte ::= reporte CLASS DOSPUNTOS CO_A CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		
                                                                        RESULT=r;
                                                                        if(RESULT!=null){
                                                                            if(RESULT.getClases()!=null){
                                                                                semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                            }else{
                                                                                RESULT.setClases(new ArrayList<>());
                                                                            }
                                                                        }
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reporte ::= reporte VAR DOSPUNTOS CO_A contVar CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                    RESULT=r;
                                                                    if(RESULT!=null){
                                                                        if(RESULT.getVariables()!=null){
                                                                            semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                        }else{
                                                                            RESULT.setVariables(cv);
                                                                        }
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reporte ::= reporte VAR DOSPUNTOS CO_A CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		
                                                                    RESULT=r;
                                                                    if(RESULT!=null){
                                                                        if(RESULT.getVariables()!=null){
                                                                            semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                        }else{
                                                                            RESULT.setVariables(new ArrayList<>());
                                                                        }
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // reporte ::= reporte METD DOSPUNTOS CO_A contMet CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                    RESULT=r;
                                                                    if(RESULT!=null){
                                                                        if(RESULT.getMetodos()!=null){
                                                                            semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                        }else{
                                                                            RESULT.setMetodos(cm);
                                                                        }
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // reporte ::= reporte METD DOSPUNTOS CO_A CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		
                                                                    RESULT=r;
                                                                    if(RESULT!=null){
                                                                        if(RESULT.getMetodos()!=null){
                                                                            semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                        }else{
                                                                            RESULT.setMetodos(new ArrayList<>());
                                                                        }
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // reporte ::= reporte COMENT DOSPUNTOS CO_A contCom CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                        RESULT = r;
                                                                        if(RESULT!=null){
                                                                            if(RESULT.getComentarios()!=null){
                                                                                semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                            }else{
                                                                                RESULT.setComentarios(cme);
                                                                            }
                                                                        }
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // reporte ::= reporte COMENT DOSPUNTOS CO_A CO_C COMA 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		
                                                                        RESULT = r;
                                                                        if(RESULT!=null){
                                                                            if(RESULT.getComentarios()!=null){
                                                                                semantic_error(p,"La propiedad ya habia sido definida con anterioridad");
                                                                            }else{
                                                                                RESULT.setComentarios(new ArrayList<>());
                                                                            }
                                                                        }
                                                                    
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // reporte ::= 
            {
              ReporteJson RESULT =null;
		
                                                            RESULT = new ReporteJson();
                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // reporte ::= reporte error 
            {
              ReporteJson RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ReporteJson r = (ReporteJson)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = r;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contClass ::= contClassp LLA_A NAME DOSPUNTOS STRING LLA_C 
            {
              ArrayList<Clase> RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                                RESULT = cc;
                                                                                if(RESULT!=null){
                                                                                    Token token = str;
                                                                                    if(token.getLexema().isEmpty()||token.getLexema().isBlank()){
                                                                                        semantic_error(token,"El valor de la cadena de texto esta vacia");
                                                                                    }else{
                                                                                        Clase clase = new Clase(token.getLexema());
                                                                                        RESULT.add(clase);
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contClass",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contClass ::= contClassp error 
            {
              ArrayList<Clase> RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = cc;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contClass",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contClassp ::= contClassp LLA_A NAME DOSPUNTOS STRING LLA_C COMA 
            {
              ArrayList<Clase> RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                                RESULT = cc;
                                                                                if(RESULT!=null){
                                                                                    Token token = str;
                                                                                    if(token.getLexema().isEmpty()||token.getLexema().isBlank()){
                                                                                        semantic_error(token,"El valor de la cadena de texto esta vacia");
                                                                                    }else{
                                                                                        Clase clase = new Clase(token.getLexema());
                                                                                        RESULT.add(clase);
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contClassp",4, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contClassp ::= 
            {
              ArrayList<Clase> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contClassp",4, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contClassp ::= contClassp error 
            {
              ArrayList<Clase> RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Clase> cc = (ArrayList<Clase>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = cc;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contClassp",4, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contVar ::= contVarp LLA_A expVar LLA_C 
            {
              ArrayList<Variable> RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                    RESULT = cv;
                                                                    if(RESULT!=null){
                                                                        RESULT.add(expv);
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contVar",5, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contVar ::= contVarp error 
            {
              ArrayList<Variable> RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = cv;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contVar",5, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contVarp ::= contVarp LLA_A expVar LLA_C COMA 
            {
              ArrayList<Variable> RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int expvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int expvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Variable expv = (Variable)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                    RESULT = cv;
                                                                    if(RESULT!=null){
                                                                        RESULT.add(expv);
                                                                    }
                                                                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contVarp",6, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contVarp ::= 
            {
              ArrayList<Variable> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contVarp",6, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contVarp ::= contVarp error 
            {
              ArrayList<Variable> RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Variable> cv = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = cv;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contVarp",6, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contMet ::= contMetp LLA_A expMet LLA_C 
            {
              ArrayList<Metodo> RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)).value;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                RESULT = cm;
                                                                if(RESULT!=null){
                                                                    RESULT.add(expm);
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contMet",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // contMet ::= contMetp error 
            {
              ArrayList<Metodo> RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT=cm;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contMet",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // contMetp ::= contMetp LLA_A expMet LLA_C COMA 
            {
              ArrayList<Metodo> RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int expmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int expmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Metodo expm = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                RESULT = cm;
                                                                if(RESULT!=null){
                                                                    RESULT.add(expm);
                                                                }
                                                            
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contMetp",8, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contMetp ::= 
            {
              ArrayList<Metodo> RESULT =null;
		
                    RESULT = new ArrayList<>();
                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contMetp",8, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // contMetp ::= contMetp error 
            {
              ArrayList<Metodo> RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Metodo> cm = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT=cm;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contMetp",8, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expVar ::= NAME DOSPUNTOS STRING COMA TYPE DOSPUNTOS STRING COMA FUN DOSPUNTOS STRING 
            {
              Variable RESULT =null;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valFunleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valFunright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valFun = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT=verificar_variable(valname,valtipo,valFun);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVar",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expVar ::= NAME DOSPUNTOS STRING COMA FUN DOSPUNTOS STRING COMA TYPE DOSPUNTOS STRING 
            {
              Variable RESULT =null;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valFunleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valFunright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valFun = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT=verificar_variable(valname,valtipo,valFun);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVar",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expVar ::= FUN DOSPUNTOS STRING COMA NAME DOSPUNTOS STRING COMA TYPE DOSPUNTOS STRING 
            {
              Variable RESULT =null;
		int valFunleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valFunright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valFun = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT=verificar_variable(valname,valtipo,valFun);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVar",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expVar ::= FUN DOSPUNTOS STRING COMA TYPE DOSPUNTOS STRING COMA NAME DOSPUNTOS STRING 
            {
              Variable RESULT =null;
		int valFunleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valFunright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valFun = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT=verificar_variable(valname,valtipo,valFun);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVar",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expVar ::= TYPE DOSPUNTOS STRING COMA FUN DOSPUNTOS STRING COMA NAME DOSPUNTOS STRING 
            {
              Variable RESULT =null;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valFunleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valFunright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valFun = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT=verificar_variable(valname,valtipo,valFun);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVar",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expVar ::= TYPE DOSPUNTOS STRING COMA NAME DOSPUNTOS STRING COMA FUN DOSPUNTOS STRING 
            {
              Variable RESULT =null;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valFunleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valFunright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valFun = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT=verificar_variable(valname,valtipo,valFun);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expVar",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expMet ::= NAME DOSPUNTOS STRING COMA TYPE DOSPUNTOS STRING COMA PARA DOSPUNTOS ENTERO 
            {
              Metodo RESULT =null;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valparaleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valpararight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valpara = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = verificar_metodo(valname,valtipo,valpara);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMet",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expMet ::= NAME DOSPUNTOS STRING COMA PARA DOSPUNTOS ENTERO COMA TYPE DOSPUNTOS STRING 
            {
              Metodo RESULT =null;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valparaleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valpararight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valpara = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = verificar_metodo(valname,valtipo,valpara);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMet",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expMet ::= TYPE DOSPUNTOS STRING COMA PARA DOSPUNTOS ENTERO COMA NAME DOSPUNTOS STRING 
            {
              Metodo RESULT =null;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valparaleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valpararight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valpara = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = verificar_metodo(valname,valtipo,valpara);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMet",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expMet ::= TYPE DOSPUNTOS STRING COMA NAME DOSPUNTOS STRING COMA PARA DOSPUNTOS ENTERO 
            {
              Metodo RESULT =null;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valparaleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valpararight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valpara = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = verificar_metodo(valname,valtipo,valpara);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMet",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expMet ::= PARA DOSPUNTOS ENTERO COMA TYPE DOSPUNTOS STRING COMA NAME DOSPUNTOS STRING 
            {
              Metodo RESULT =null;
		int valparaleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valpararight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valpara = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = verificar_metodo(valname,valtipo,valpara);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMet",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expMet ::= PARA DOSPUNTOS ENTERO COMA NAME DOSPUNTOS STRING COMA TYPE DOSPUNTOS STRING 
            {
              Metodo RESULT =null;
		int valparaleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).left;
		int valpararight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).right;
		Token valpara = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)).value;
		int valnameleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int valnameright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		Token valname = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int valtipoleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valtiporight = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token valtipo = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = verificar_metodo(valname,valtipo,valpara);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("expMet",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contCom ::= contComp LLA_A TEXT DOSPUNTOS STRING LLA_C 
            {
              ArrayList<Comentario> RESULT =null;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                                                                            RESULT = cme;
                                                                            if(RESULT!=null){
                                                                                Token token = str;
                                                                                if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                                    semantic_error(token,"El valor de la cadena de texto esta vacia");
                                                                                }else{
                                                                                    Comentario comentario = new Comentario(token.getLexema());
                                                                                    RESULT.add(comentario);
                                                                                }
                                                                            }
                                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contCom",9, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contCom ::= contComp error 
            {
              ArrayList<Comentario> RESULT =null;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = cme;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contCom",9, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contComp ::= contComp LLA_A TEXT DOSPUNTOS STRING LLA_C COMA 
            {
              ArrayList<Comentario> RESULT =null;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		
                                                                            RESULT = cme;
                                                                            if(RESULT!=null){
                                                                                Token token = str;
                                                                                if(token.getLexema().isEmpty() || token.getLexema().isBlank()){
                                                                                    semantic_error(token,"El valor de la cadena de texto esta vacia");
                                                                                }else{
                                                                                    Comentario comentario = new Comentario(token.getLexema());
                                                                                    RESULT.add(comentario);
                                                                                }
                                                                            }
                                                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contComp",10, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contComp ::= 
            {
              ArrayList<Comentario> RESULT =null;
		
                    RESULT = new ArrayList<>();
                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contComp",10, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contComp ::= contComp error 
            {
              ArrayList<Comentario> RESULT =null;
		int cmeleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int cmeright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<Comentario> cme = (ArrayList<Comentario>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = cme;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("contComp",10, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJson$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
              return CUP$ParserJson$do_action_part00000000(
                               CUP$ParserJson$act_num,
                               CUP$ParserJson$parser,
                               CUP$ParserJson$stack,
                               CUP$ParserJson$top);
    }
}

}
