
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cresb49.appcliente.analizadores.def;

import java.util.ArrayList;
import com.cresb49.appcliente.analizadores.ErrorAnalisis;
import com.cresb49.appcliente.analizadores.json.obj.*;
import com.cresb49.appcliente.analizadores.Token;
import com.cresb49.appcliente.ED.Pila;
import com.cresb49.appcliente.analizadores.def.obj.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDef extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserDefSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDef() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDef(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDef(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\006\004\000\002\002\004\000\002\006" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\004\000\002\005\007\000\002\005\007\000\002" +
    "\004\004\000\002\004\004\000\002\007\005\000\002\007" +
    "\004\000\002\003\006\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\012\003\000\002\012\005\000\002" +
    "\012\010\000\002\012\012\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\013\011\000\002\013\010" +
    "\000\002\014\005\000\002\014\004\000\002\014\006\000" +
    "\002\014\004\000\002\014\003\000\002\014\005\000\002" +
    "\014\004\000\002\021\004\000\002\021\010\000\002\021" +
    "\007\000\002\021\010\000\002\021\007\000\002\021\010" +
    "\000\002\021\007\000\002\021\017\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\015\005\000\002" +
    "\015\004\000\002\015\004\000\002\015\006\000\002\015" +
    "\003\000\002\015\005\000\002\015\004\000\002\016\010" +
    "\000\002\016\007\000\002\016\004\000\002\016\010\000" +
    "\002\016\007\000\002\016\010\000\002\016\007\000\002" +
    "\016\010\000\002\016\007\000\002\016\017\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\017\012" +
    "\000\002\017\011\000\002\017\012\000\002\017\011\000" +
    "\002\017\011\000\002\017\010\000\002\017\011\000\002" +
    "\017\010\000\002\017\004\000\002\022\003\000\002\022" +
    "\005\000\002\022\010\000\002\022\012\000\002\022\004" +
    "\000\002\022\004\000\002\022\004\000\002\023\003\000" +
    "\002\023\003\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\020\003\000\002\020\003\000\002\020" +
    "\004\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\010\020\012\021\007\050\004\001\002\000" +
    "\004\026\376\001\002\000\016\002\uffff\003\372\020\012" +
    "\021\007\027\uffff\050\004\001\002\000\016\002\ufffb\003" +
    "\ufffb\020\ufffb\021\ufffb\027\ufffb\050\ufffb\001\002\000\004" +
    "\050\365\001\002\000\006\002\056\027\055\001\002\000" +
    "\016\002\ufffa\003\ufffa\020\ufffa\021\ufffa\027\ufffa\050\ufffa" +
    "\001\002\000\004\050\014\001\002\000\016\002\ufff9\003" +
    "\ufff9\020\ufff9\021\ufff9\027\ufff9\050\ufff9\001\002\000\010" +
    "\012\016\015\020\026\017\001\002\000\016\002\ufff5\003" +
    "\ufff5\020\ufff5\021\ufff5\027\ufff5\050\ufff5\001\002\000\004" +
    "\050\052\001\002\000\012\010\025\016\022\017\027\050" +
    "\021\001\002\000\016\002\ufff2\003\ufff2\020\ufff2\021\ufff2" +
    "\027\ufff2\050\ufff2\001\002\000\022\005\uffea\011\uffea\013" +
    "\043\015\uffea\032\uffea\033\uffea\034\uffea\035\uffea\001\002" +
    "\000\020\005\uffe5\011\uffe5\015\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\001\002\000\020\005\uffee\011\uffee\015\uffee" +
    "\032\uffee\033\uffee\034\035\035\034\001\002\000\020\005" +
    "\uffeb\011\uffeb\015\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\001\002\000\012\010\025\016\022\017\027\050\021\001" +
    "\002\000\010\015\032\032\030\033\031\001\002\000\020" +
    "\005\uffe6\011\uffe6\015\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\001\002\000\012\010\025\016\022\017\027\050\021" +
    "\001\002\000\012\010\025\016\022\017\027\050\021\001" +
    "\002\000\016\002\ufff7\003\ufff7\020\ufff7\021\ufff7\027\ufff7" +
    "\050\ufff7\001\002\000\020\005\uffef\011\uffef\015\uffef\032" +
    "\uffef\033\uffef\034\035\035\034\001\002\000\012\010\025" +
    "\016\022\017\027\050\021\001\002\000\012\010\025\016" +
    "\022\017\027\050\021\001\002\000\020\005\uffec\011\uffec" +
    "\015\uffec\032\uffec\033\uffec\034\uffec\035\uffec\001\002\000" +
    "\020\005\uffed\011\uffed\015\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\001\002\000\020\005\ufff0\011\ufff0\015\ufff0\032" +
    "\ufff0\033\ufff0\034\035\035\034\001\002\000\010\011\042" +
    "\032\030\033\031\001\002\000\020\005\uffe4\011\uffe4\015" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000\004" +
    "\050\044\001\002\000\022\004\045\005\uffe9\011\uffe9\015" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\001\002\000\012" +
    "\010\025\016\022\017\027\050\021\001\002\000\010\005" +
    "\047\032\030\033\031\001\002\000\022\005\uffe8\011\uffe8" +
    "\013\050\015\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\001" +
    "\002\000\004\050\051\001\002\000\020\005\uffe7\011\uffe7" +
    "\015\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002\000" +
    "\006\012\016\015\020\001\002\000\016\002\ufff3\003\ufff3" +
    "\020\ufff3\021\ufff3\027\ufff3\050\ufff3\001\002\000\006\002" +
    "\001\027\001\001\002\000\004\036\057\001\002\000\004" +
    "\002\000\001\002\000\004\030\060\001\002\000\012\024" +
    "\064\027\065\031\062\047\061\001\002\000\014\003\uffdd" +
    "\024\uffdd\027\uffdd\031\uffdd\047\uffdd\001\002\000\004\036" +
    "\363\001\002\000\014\003\102\024\103\027\104\031\360" +
    "\047\100\001\002\000\006\003\110\050\106\001\002\000" +
    "\016\003\066\037\073\040\071\041\072\042\067\046\070" +
    "\001\002\000\010\027\355\030\353\031\354\001\002\000" +
    "\004\022\337\001\002\000\004\030\336\001\002\000\004" +
    "\030\326\001\002\000\004\030\136\001\002\000\004\030" +
    "\075\001\002\000\014\003\uffde\024\uffde\027\uffde\031\uffde" +
    "\047\uffde\001\002\000\012\024\064\027\065\031\076\047" +
    "\061\001\002\000\004\037\134\001\002\000\014\003\102" +
    "\024\103\027\104\031\101\047\100\001\002\000\014\003" +
    "\uffe0\024\uffe0\027\uffe0\031\uffe0\047\uffe0\001\002\000\004" +
    "\037\132\001\002\000\014\003\uffdb\024\uffdb\027\uffdb\031" +
    "\uffdb\047\uffdb\001\002\000\006\003\110\050\106\001\002" +
    "\000\016\003\066\037\073\040\071\041\072\042\067\046" +
    "\070\001\002\000\014\003\uffe1\024\uffe1\027\uffe1\031\uffe1" +
    "\047\uffe1\001\002\000\006\013\115\025\uffb2\001\002\000" +
    "\004\025\114\001\002\000\010\025\111\030\112\031\113" +
    "\001\002\000\004\025\uffae\001\002\000\004\025\uffac\001" +
    "\002\000\004\025\uffad\001\002\000\014\003\uffdf\024\uffdf" +
    "\027\uffdf\031\uffdf\047\uffdf\001\002\000\004\050\116\001" +
    "\002\000\006\004\117\025\uffb1\001\002\000\010\003\122" +
    "\017\123\050\120\001\002\000\004\005\uffab\001\002\000" +
    "\004\005\127\001\002\000\010\025\124\030\125\031\126" +
    "\001\002\000\004\005\uffaa\001\002\000\004\005\uffa9\001" +
    "\002\000\004\005\uffa7\001\002\000\004\005\uffa8\001\002" +
    "\000\006\013\130\025\uffb0\001\002\000\004\050\131\001" +
    "\002\000\004\025\uffaf\001\002\000\004\030\133\001\002" +
    "\000\014\003\uffd9\024\uffd9\027\uffd9\031\uffd9\047\uffd9\001" +
    "\002\000\004\030\135\001\002\000\014\003\uffd8\024\uffd8" +
    "\027\uffd8\031\uffd8\047\uffd8\001\002\000\012\024\141\027" +
    "\142\031\137\047\140\001\002\000\004\041\324\001\002" +
    "\000\014\003\uffcb\024\uffcb\027\uffcb\031\uffcb\047\uffcb\001" +
    "\002\000\006\003\110\050\106\001\002\000\020\003\152" +
    "\037\157\040\155\041\156\042\153\043\160\046\154\001" +
    "\002\000\014\003\146\024\147\027\150\031\145\047\144" +
    "\001\002\000\014\003\uffcd\024\uffcd\027\uffcd\031\uffcd\047" +
    "\uffcd\001\002\000\004\041\317\001\002\000\014\003\uffc9" +
    "\024\uffc9\027\uffc9\031\uffc9\047\uffc9\001\002\000\006\003" +
    "\110\050\106\001\002\000\020\003\152\037\157\040\155" +
    "\041\156\042\153\043\160\046\154\001\002\000\014\003" +
    "\uffcf\024\uffcf\027\uffcf\031\uffcf\047\uffcf\001\002\000\010" +
    "\027\314\030\312\031\313\001\002\000\004\022\271\001" +
    "\002\000\004\030\270\001\002\000\004\030\260\001\002" +
    "\000\004\030\250\001\002\000\004\030\240\001\002\000" +
    "\004\030\161\001\002\000\006\027\164\031\162\001\002" +
    "\000\004\043\236\001\002\000\010\003\210\027\211\031" +
    "\207\001\002\000\006\044\166\045\165\001\002\000\004" +
    "\030\177\001\002\000\004\030\167\001\002\000\012\024" +
    "\064\027\065\031\170\047\061\001\002\000\004\044\175" +
    "\001\002\000\014\003\102\024\103\027\104\031\172\047" +
    "\100\001\002\000\004\044\173\001\002\000\004\030\174" +
    "\001\002\000\010\003\uffb7\027\uffb7\031\uffb7\001\002\000" +
    "\004\030\176\001\002\000\010\003\uffb6\027\uffb6\031\uffb6" +
    "\001\002\000\012\024\064\027\065\031\200\047\061\001" +
    "\002\000\004\045\205\001\002\000\014\003\102\024\103" +
    "\027\104\031\202\047\100\001\002\000\004\045\203\001" +
    "\002\000\004\030\204\001\002\000\010\003\uffb5\027\uffb5" +
    "\031\uffb5\001\002\000\004\030\206\001\002\000\010\003" +
    "\uffb4\027\uffb4\031\uffb4\001\002\000\004\043\234\001\002" +
    "\000\010\003\uffb3\027\uffb3\031\uffb3\001\002\000\006\044" +
    "\213\045\212\001\002\000\004\030\224\001\002\000\004" +
    "\030\214\001\002\000\012\024\064\027\065\031\215\047" +
    "\061\001\002\000\004\044\222\001\002\000\014\003\102" +
    "\024\103\027\104\031\217\047\100\001\002\000\004\044" +
    "\220\001\002\000\004\030\221\001\002\000\010\003\uffbb" +
    "\027\uffbb\031\uffbb\001\002\000\004\030\223\001\002\000" +
    "\010\003\uffba\027\uffba\031\uffba\001\002\000\012\024\064" +
    "\027\065\031\225\047\061\001\002\000\004\045\232\001" +
    "\002\000\014\003\102\024\103\027\104\031\227\047\100" +
    "\001\002\000\004\045\230\001\002\000\004\030\231\001" +
    "\002\000\010\003\uffb9\027\uffb9\031\uffb9\001\002\000\004" +
    "\030\233\001\002\000\010\003\uffb8\027\uffb8\031\uffb8\001" +
    "\002\000\004\030\235\001\002\000\014\003\uffc8\024\uffc8" +
    "\027\uffc8\031\uffc8\047\uffc8\001\002\000\004\030\237\001" +
    "\002\000\014\003\uffc7\024\uffc7\027\uffc7\031\uffc7\047\uffc7" +
    "\001\002\000\012\024\064\027\065\031\241\047\061\001" +
    "\002\000\004\037\246\001\002\000\014\003\102\024\103" +
    "\027\104\031\243\047\100\001\002\000\004\037\244\001" +
    "\002\000\004\030\245\001\002\000\014\003\uffc5\024\uffc5" +
    "\027\uffc5\031\uffc5\047\uffc5\001\002\000\004\030\247\001" +
    "\002\000\014\003\uffc4\024\uffc4\027\uffc4\031\uffc4\047\uffc4" +
    "\001\002\000\012\024\141\027\142\031\251\047\140\001" +
    "\002\000\004\041\256\001\002\000\014\003\146\024\147" +
    "\027\150\031\253\047\144\001\002\000\004\041\254\001" +
    "\002\000\004\030\255\001\002\000\014\003\uffc1\024\uffc1" +
    "\027\uffc1\031\uffc1\047\uffc1\001\002\000\004\030\257\001" +
    "\002\000\014\003\uffc0\024\uffc0\027\uffc0\031\uffc0\047\uffc0" +
    "\001\002\000\012\024\064\027\065\031\261\047\061\001" +
    "\002\000\004\040\266\001\002\000\014\003\102\024\103" +
    "\027\104\031\263\047\100\001\002\000\004\040\264\001" +
    "\002\000\004\030\265\001\002\000\014\003\uffc3\024\uffc3" +
    "\027\uffc3\031\uffc3\047\uffc3\001\002\000\004\030\267\001" +
    "\002\000\014\003\uffc2\024\uffc2\027\uffc2\031\uffc2\047\uffc2" +
    "\001\002\000\014\003\uffc6\024\uffc6\027\uffc6\031\uffc6\047" +
    "\uffc6\001\002\000\004\014\272\001\002\000\004\050\273" +
    "\001\002\000\004\023\274\001\002\000\004\014\275\001" +
    "\002\000\010\003\300\017\301\050\276\001\002\000\004" +
    "\015\uffa6\001\002\000\004\015\304\001\002\000\006\030" +
    "\302\031\303\001\002\000\004\015\uffa5\001\002\000\004" +
    "\015\uffa3\001\002\000\004\015\uffa4\001\002\000\004\030" +
    "\305\001\002\000\010\024\141\027\142\047\140\001\002" +
    "\000\014\003\146\024\147\027\150\031\307\047\144\001" +
    "\002\000\004\042\310\001\002\000\004\030\311\001\002" +
    "\000\014\003\uffbf\024\uffbf\027\uffbf\031\uffbf\047\uffbf\001" +
    "\002\000\014\003\uffbe\024\uffbe\027\uffbe\031\uffbe\047\uffbe" +
    "\001\002\000\014\003\uffbd\024\uffbd\027\uffbd\031\uffbd\047" +
    "\uffbd\001\002\000\014\003\uffbc\024\uffbc\027\uffbc\031\uffbc" +
    "\047\uffbc\001\002\000\004\025\316\001\002\000\014\003" +
    "\uffcc\024\uffcc\027\uffcc\031\uffcc\047\uffcc\001\002\000\004" +
    "\030\320\001\002\000\014\003\uffd5\024\uffd5\027\uffd5\031" +
    "\uffd5\047\uffd5\001\002\000\014\003\uffce\024\uffce\027\uffce" +
    "\031\uffce\047\uffce\001\002\000\004\025\323\001\002\000" +
    "\014\003\uffca\024\uffca\027\uffca\031\uffca\047\uffca\001\002" +
    "\000\004\030\325\001\002\000\014\003\uffd4\024\uffd4\027" +
    "\uffd4\031\uffd4\047\uffd4\001\002\000\012\024\064\027\065" +
    "\031\327\047\061\001\002\000\004\040\334\001\002\000" +
    "\014\003\102\024\103\027\104\031\331\047\100\001\002" +
    "\000\004\040\332\001\002\000\004\030\333\001\002\000" +
    "\014\003\uffd7\024\uffd7\027\uffd7\031\uffd7\047\uffd7\001\002" +
    "\000\004\030\335\001\002\000\014\003\uffd6\024\uffd6\027" +
    "\uffd6\031\uffd6\047\uffd6\001\002\000\014\003\uffda\024\uffda" +
    "\027\uffda\031\uffda\047\uffda\001\002\000\004\014\340\001" +
    "\002\000\004\050\341\001\002\000\004\023\342\001\002" +
    "\000\004\014\343\001\002\000\010\003\300\017\301\050" +
    "\276\001\002\000\004\015\345\001\002\000\004\030\346" +
    "\001\002\000\010\024\064\027\065\047\061\001\002\000" +
    "\014\003\102\024\103\027\104\031\350\047\100\001\002" +
    "\000\004\042\351\001\002\000\004\030\352\001\002\000" +
    "\014\003\uffd3\024\uffd3\027\uffd3\031\uffd3\047\uffd3\001\002" +
    "\000\014\003\uffd2\024\uffd2\027\uffd2\031\uffd2\047\uffd2\001" +
    "\002\000\014\003\uffd1\024\uffd1\027\uffd1\031\uffd1\047\uffd1" +
    "\001\002\000\014\003\uffd0\024\uffd0\027\uffd0\031\uffd0\047" +
    "\uffd0\001\002\000\004\025\357\001\002\000\014\003\uffdc" +
    "\024\uffdc\027\uffdc\031\uffdc\047\uffdc\001\002\000\004\036" +
    "\361\001\002\000\004\030\362\001\002\000\006\002\uffe3" +
    "\027\uffe3\001\002\000\004\030\364\001\002\000\006\002" +
    "\uffe2\027\uffe2\001\002\000\010\012\016\015\020\026\367" +
    "\001\002\000\016\002\ufff4\003\ufff4\020\ufff4\021\ufff4\027" +
    "\ufff4\050\ufff4\001\002\000\012\010\025\016\022\017\027" +
    "\050\021\001\002\000\010\015\371\032\030\033\031\001" +
    "\002\000\016\002\ufff6\003\ufff6\020\ufff6\021\ufff6\027\ufff6" +
    "\050\ufff6\001\002\000\016\002\ufff8\003\ufff8\020\ufff8\021" +
    "\ufff8\027\ufff8\050\ufff8\001\002\000\016\002\ufffe\003\ufffe" +
    "\020\ufffe\021\ufffe\027\ufffe\050\ufffe\001\002\000\016\002" +
    "\ufffd\003\ufffd\020\ufffd\021\ufffd\027\ufffd\050\ufffd\001\002" +
    "\000\016\002\ufffc\003\ufffc\020\ufffc\021\ufffc\027\ufffc\050" +
    "\ufffc\001\002\000\012\010\025\016\022\017\027\050\021" +
    "\001\002\000\010\015\u0100\032\030\033\031\001\002\000" +
    "\016\002\ufff1\003\ufff1\020\ufff1\021\ufff1\027\ufff1\050\ufff1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\014\002\004\003\005\004\010\005\012\006" +
    "\007\001\001\000\002\001\001\000\010\003\372\004\373" +
    "\005\374\001\001\000\002\001\001\000\004\007\365\001" +
    "\001\000\004\013\053\001\001\000\002\001\001\000\004" +
    "\007\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\052\001\001\000\010\010\025" +
    "\011\022\012\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\040\011\022\012\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\037\012\023\001\001" +
    "\000\006\011\032\012\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\036\001\001\000\004\012\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\045\011\022\012\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\355\001\001" +
    "\000\004\021\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\106\001" +
    "\001\000\004\021\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\321\001\001\000" +
    "\004\016\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\314\001" +
    "\001\000\004\016\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\367\011\022\012\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\376\011\022\012\023\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDef$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDef$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDef$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexerDef.next_token(); 
    }


    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerDef lexerDef;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;
    private SimbolosTerminalesDef simbolosTerminalesDef;
    private TablaSimbolos tablaSimbolos;
    private ReporteJson reporteJson;
    
    public ParserDef (LexerDef lexerDef){ 
        super(lexerDef);
        this.lexerDef=lexerDef;
        this.simbolosTerminalesDef = new SimbolosTerminalesDef();
    }

    public void setTablasimbolos(TablaSimbolos tablaSimbolos){
        this.tablaSimbolos = tablaSimbolos;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserDefSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                //System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println(tok.getLexema()+" "+er);
                this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                //System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserDefSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            //System.out.println(tok.getLexema()+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            //System.out.println(er);
        }
    }


    private void verificar_def_var(Token token,String tipo) {
       FilaTabla fila = tablaSimbolos.buscar(token.getLexema());
        if(fila==null){
            tablaSimbolos.getFilas().add(new FilaTabla(token.getLexema(),tipo,null));
        }else{
            semantic_error(token,"La variable ya a sido definida con anterioridad");
        }
    }

    private void verificar_tipo_var_for(Token identificador,String tipo){
        FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila!=null){
            if(!(fila.getTipo().equals(tipo))){
                semantic_error(identificador,"Debe utilizar una variable de tipo "+tipo);
            }
        }else{
            semantic_error(identificador,"La variable que sea utilizar no existe en el programa");
        }
    }
    private void varificar_no_null(Token identificador){
        FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila!=null){
            if(fila.getValor()==null){
                semantic_error(identificador,"La variable no esta inicializada");
            }
        }
    }

    private void asig_val_var(Token identificador,String tipo,Object value) {
       FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila==null){
            semantic_error(identificador,"La variable a la que le quiere asignar valor no esta definida");
        }else{
            if(fila.getTipo().equals(tipo)){
              fila.setValor(value);
            }else{
                semantic_error(identificador,"La variable es de tipo: \""+fila.getTipo()+"\", no puede asignar un \""+tipo+"\"");
            }
        }
    }

    private void verificarUnId(Token id){
      if(id.getLexema().equals("RESULT")){
        FilaTabla var = this.tablaSimbolos.buscar("RESULT");
        id.setAccion(Token.PRINT);
        id.setValorToken("ObjetoRESULT"+((ReporteJson)var.getValor()).hashCode());
      }
    }

    private void verificarDosId(Token id1,Token id2){
      if(id1.getLexema().equals("RESULT")){
        FilaTabla var = this.tablaSimbolos.buscar("RESULT");
        id1.setAccion(Token.IGNORE);
        switch (id2.getLexema()) {
          case "Score":
            id2.setAccion(Token.PRINT);
            id2.setValorToken(((ReporteJson)var.getValor()).getScore());
            break;
          case "Clases":
            id2.setAccion(Token.PRINT);
            id2.setValorToken("ObjectClases"+((ReporteJson)var.getValor()).hashCode());
            break;
          case "Variables":
            id2.setAccion(Token.PRINT);
            id2.setValorToken("ObjectVariables"+((ReporteJson)var.getValor()).hashCode());
            break;
          case "Metodos":
            id2.setAccion(Token.PRINT);
            id2.setValorToken("ObjectMetodos"+((ReporteJson)var.getValor()).hashCode());
            break;
          case "Comentarios":
            id2.setAccion(Token.PRINT);
            id2.setValorToken("ObjectComentarios"+((ReporteJson)var.getValor()).hashCode());
            break;
          default:
            semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\" ,se esperaba [Score,Clases,Variables,Metodos,Comentarios]");
            break;
        }
      }else{
        semantic_error(id1,"No es una variable que contenga parametros internos");
        semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\"");
      }
    }

    private void verificarDosId_id2Index(Token id1,Token id2,AccesoVariables acc){
      if(id1.getLexema().equals("RESULT")){
        id1.setAccion(Token.IGNORE);
        FilaTabla var = this.tablaSimbolos.buscar("RESULT");
        switch (id2.getLexema()) {
          case "Clases":
            id2.setAccion(Token.CAMBIAR);
            acc.setArreglo(((ReporteJson)var.getValor()).getClases());
            break;
          case "Variables":
            id2.setAccion(Token.CAMBIAR);
            acc.setArreglo(((ReporteJson)var.getValor()).getVariables());
            break;
          case "Metodos":
            id2.setAccion(Token.CAMBIAR);
            acc.setArreglo(((ReporteJson)var.getValor()).getMetodos());
            break;
          case "Comentarios":
            id2.setAccion(Token.CAMBIAR);
            acc.setArreglo(((ReporteJson)var.getValor()).getComentarios());
            break;
          default:
            semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\",se esperaba [Clases,Variables,Metodos,Comentarios]");
            semantic_error(id2,"No es un parametro vectorial: \""+id1.getLexema()+"\"");
            break;
        }
      }else{
        semantic_error(id1,"No es una variable que contenga parametros internos");
        semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\"");
        semantic_error(id2,"No es un parametro vectorial: \""+id1.getLexema()+"\"");
      }
    }

    private void verificarTresId(Token id1,Token id2,Token id3,AccesoVariables acc){
        if(id1.getLexema().equals("RESULT")){
            id1.setAccion(Token.IGNORE);
            FilaTabla var = this.tablaSimbolos.buscar("RESULT");
            id2.setAccion(Token.VIEW);
            switch (id2.getLexema()) {
            case "Clases":
                acc.setArreglo(((ReporteJson)var.getValor()).getClases());
                if(id3.getLexema().equals("Nombre")){
                    id3.setAccion(Token.VAR_CONSULT);
                }else{
                    semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\"");
                }
                break;
            case "Variables":
                acc.setArreglo(((ReporteJson)var.getValor()).getVariables());
                switch(id3.getLexema()){
                    case "Nombre":
                        id3.setAccion(Token.VAR_CONSULT);
                    break;
                    case "Tipo":
                        id3.setAccion(Token.VAR_CONSULT);
                    break;
                    case "Funcion":
                        id3.setAccion(Token.VAR_CONSULT);
                    break;
                    default:
                        semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\" ,se esperaba [Nombre,Tipo,Funcion]");
                    break;
                }
                break;
            case "Metodos":
                acc.setArreglo(((ReporteJson)var.getValor()).getMetodos());
                switch(id3.getLexema()){
                    case "Nombre":
                        id3.setAccion(Token.VAR_CONSULT);
                    break;
                    case "Tipo":
                        id3.setAccion(Token.VAR_CONSULT);
                    break;
                    case "Parametros":
                        id3.setAccion(Token.VAR_CONSULT);
                    break;
                    default:
                        semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\" ,se esperaba [Nombre,Tipo,Parametros]");
                    break;
                }
                break;
            case "Comentarios":
                acc.setArreglo(((ReporteJson)var.getValor()).getComentarios());
                switch(id3.getLexema()){
                    case "Texto":
                        id3.setAccion(Token.VAR_CONSULT);
                    break;
                    default:
                        semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\" ,se esperaba [Texto]");
                    break;
                }
                break;
            default:
                semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\",se esperaba [Clases,Variables,Metodos,Comentarios]");
                semantic_error(id2,"No es un parametro vectorial: \""+id1.getLexema()+"\"");
                semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\"");
                break;
            }
      }else{
        semantic_error(id1,"No es una variable que contenga parametros internos");
        semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\"");
        semantic_error(id2,"No es un parametro vectorial: \""+id1.getLexema()+"\"");
        semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\"");
      }
    }

    private Operacion devolver_val_2Id(Token id1,Token id2){
      if(id1.getLexema().equals("RESULT")){
        FilaTabla var = this.tablaSimbolos.buscar("RESULT");
        switch (id2.getLexema()) {
          case "Score":
            return new Operacion(TablaSimbolos.STRING,((ReporteJson)var.getValor()).getScore());
          case "Clases":
            return new Operacion(TablaSimbolos.OBJECT,((ReporteJson)var.getValor()).getClases());
          case "Variables":
            return new Operacion(TablaSimbolos.OBJECT,((ReporteJson)var.getValor()).getVariables());
          case "Metodos":
            return new Operacion(TablaSimbolos.OBJECT,((ReporteJson)var.getValor()).getMetodos());
          case "Comentarios":
            return new Operacion(TablaSimbolos.OBJECT,((ReporteJson)var.getValor()).getComentarios());
          default:
            semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\" ,se esperaba [Score,Clases,Variables,Metodos,Comentarios]");
        }
      }else{
        semantic_error(id1,"No es una variable que contenga parametros internos");
        semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\"");
      }
      return new Operacion(TablaSimbolos.OBJECT,null);
    }

    private Operacion devolver_val_2Id_index(Token id1,Token id2,Integer index){
        if(id1.getLexema().equals("RESULT")){
        FilaTabla var = this.tablaSimbolos.buscar("RESULT");
        switch (id2.getLexema()) {
          case "Clases":
            try{
                return new Operacion(TablaSimbolos.OBJECT,((ReporteJson)var.getValor()).getClases().get(index));
            }catch(Exception ex){
                semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
            }
            break;
          case "Variables":
            try{
                return new Operacion(TablaSimbolos.OBJECT,((ReporteJson)var.getValor()).getVariables().get(index));
            }catch(Exception ex){
                semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
            }
            break;
          case "Metodos":
            try{
                return new Operacion(TablaSimbolos.OBJECT,((ReporteJson)var.getValor()).getMetodos().get(index));
            }catch(Exception ex){
                semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
            }
            break;
          case "Comentarios":
            try{
                return new Operacion(TablaSimbolos.OBJECT,((ReporteJson)var.getValor()).getComentarios().get(index));
            }catch(Exception ex){
                semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
            }
            break;
          default:
            semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\" ,se esperaba [Clases,Variables,Metodos,Comentarios]");
            break;
        }
      }else{
        semantic_error(id1,"No es una variable que contenga parametros internos");
        semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\"");
      }
      return new Operacion(TablaSimbolos.OBJECT,null);
    }

    private Operacion devolver_val_3Id(Token id1,Token id2,Token id3,Integer index){
        if(id1.getLexema().equals("RESULT")){
            FilaTabla var = this.tablaSimbolos.buscar("RESULT");
            switch (id2.getLexema()) {
            case "Clases":
                if(id3.getLexema().equals("Nombre")){
                    try{
                        return new Operacion(TablaSimbolos.STRING,((ReporteJson)var.getValor()).getClases().get(index).getNombre());
                    }catch(Exception ex){
                        semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
                    }
                }else{
                    semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\"");
                }
                break;
            case "Variables":
                switch(id3.getLexema()){
                    case "Nombre":
                        try{
                            return new Operacion(TablaSimbolos.STRING,((ReporteJson)var.getValor()).getVariables().get(index).getNombre());
                        }catch(Exception ex){
                            semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
                        }
                        break;
                    case "Tipo":
                        try{
                            return new Operacion(TablaSimbolos.STRING,((ReporteJson)var.getValor()).getVariables().get(index).getTipo());
                        }catch(Exception ex){
                            semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
                        }
                        break;
                    case "Funcion":
                        try{
                            return new Operacion(TablaSimbolos.STRING,((ReporteJson)var.getValor()).getVariables().get(index).getFuncion());
                        }catch(Exception ex){
                            semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
                        }
                        break;
                    default:
                        semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\" ,se esperaba [Nombre,Tipo,Funcion]");
                    break;
                }
                break;
            case "Metodos":
                switch(id3.getLexema()){
                    case "Nombre":
                        try{
                            return new Operacion(TablaSimbolos.STRING,((ReporteJson)var.getValor()).getMetodos().get(index).getNombre());
                        }catch(Exception ex){
                                semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
                        }
                        break;
                    case "Tipo":
                        try{
                            return new Operacion(TablaSimbolos.STRING,((ReporteJson)var.getValor()).getMetodos().get(index).getTipo());
                        }catch(Exception ex){
                                semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
                        }
                        break;
                    case "Parametros":
                        try{
                            return new Operacion(TablaSimbolos.INT,((ReporteJson)var.getValor()).getMetodos().get(index).getParametros());
                        }catch(Exception ex){
                                semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
                        }
                        break;
                    default:
                        semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\" ,se esperaba [Nombre,Tipo,Parametros]");
                    break;
                }
                break;
            case "Comentarios":
                switch(id3.getLexema()){
                    case "Texto":
                        try{
                            return new Operacion(TablaSimbolos.STRING,((ReporteJson)var.getValor()).getComentarios().get(index).getTexto());
                        }catch(Exception ex){
                                semantic_error(id2,"El index ingresado es mayor al tamaño de la lista");
                        }
                        break;
                    default:
                        semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\" ,se esperaba [Texto]");
                    break;
                }
                break;
            default:
                semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\",se esperaba [Clases,Variables,Metodos,Comentarios]");
                semantic_error(id2,"No es un parametro vectorial: \""+id1.getLexema()+"\"");
                semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\"");
                break;
            }
      }else{
        semantic_error(id1,"No es una variable que contenga parametros internos");
        semantic_error(id2,"No es un parametro de la variable: \""+id1.getLexema()+"\"");
        semantic_error(id2,"No es un parametro vectorial: \""+id1.getLexema()+"\"");
        semantic_error(id3,"No es un parametro de la variable \""+id2.getLexema()+"\"");
      }
      return new Operacion(TablaSimbolos.OBJECT,null);
    }

    private void create_var_asig_val(Token identificador,String tipo_id,String tipo_value,Object value) {
       FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila==null){
            if(tipo_id.equals(tipo_value)){
                tablaSimbolos.getFilas().add(new FilaTabla(identificador.getLexema(),tipo_id,value));
            }else{
                semantic_error(identificador,"La variable es de tipo: \""+tipo_id+"\", no puede asignar un \""+tipo_value+"\"");
            }
        }else{
            semantic_error(identificador,"La variable ya a sido definida con anterioridad");
            //semantic_error(identificador,"El valor que se desea dar a la variable de de tipo \"\" y la variable es de tipo \"\"");
        }
    }

    private void error_cast(Token operador,String tipo1,String tipo2){
        semantic_error(operador,"No se puede operar un valor: \""+tipo1+"\" con un valor:\""+tipo2+"\"");
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    public TablaSimbolos getTablaSimbolos() {
        return tablaSimbolos;
    }

    protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDef$actions {
  private final ParserDef parser;

  /** Constructor */
  CUP$ParserDef$actions(ParserDef parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDef$do_action_part00000000(
    int                        CUP$ParserDef$act_num,
    java_cup.runtime.lr_parser CUP$ParserDef$parser,
    java.util.Stack            CUP$ParserDef$stack,
    int                        CUP$ParserDef$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDef$result;

      /* select the action based on the action number */
      switch (CUP$ParserDef$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // def ::= def html 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("def",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= def EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		RESULT = start_val;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDef$parser.done_parsing();
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // def ::= ini 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("def",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= ini asig 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= ini dec 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini ::= ini decn 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini ::= asig 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini ::= dec 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ini ::= decn 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ini ::= ini error 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decn ::= INT ID EQUAL exp PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                    Token identificador = (Token)var;
                                                    if(val!=null){
                                                        create_var_asig_val((Token)var,TablaSimbolos.INT,val.getTipo(),val.getValor());
                                                    }else{
                                                        verificar_def_var(identificador,TablaSimbolos.INT);
                                                    }
                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("decn",3, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decn ::= STR ID EQUAL exp PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                    Token identificador = (Token)var;
                                                    if(val!=null){
                                                        create_var_asig_val((Token)var,TablaSimbolos.STRING,val.getTipo(),val.getValor());
                                                    }else{
                                                        verificar_def_var(identificador,TablaSimbolos.STRING);
                                                    }
                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("decn",3, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec ::= INT decp 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Pila<Token> vars = (Pila<Token>)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                if(vars!=null){
                                    ArrayList<Token> array =  vars.toArrayList();
                                    if(array!=null){
                                        for (Token token : array) {
                                            verificar_def_var(token, TablaSimbolos.INT);
                                        }
                                    }
                                }
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec ::= STR decp 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Pila<Token> vars = (Pila<Token>)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                if(vars!=null){
                                    ArrayList<Token> array =  vars.toArrayList();
                                    if(array!=null){
                                        for (Token token : array) {
                                            verificar_def_var(token, TablaSimbolos.STRING);
                                        }
                                    }
                                }
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decp ::= ID COMA decp 
            {
              Pila<Token> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Pila<Token> vars = (Pila<Token>)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                    RESULT = vars;
                                    if(RESULT!=null){
                                        RESULT.push((Token)id);
                                    }else{
                                        RESULT = new Pila<>();
                                    }
                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("decp",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decp ::= ID PUNTOCOMA 
            {
              Pila<Token> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                RESULT = new Pila<>();
                                RESULT.push((Token)id);
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("decp",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asig ::= ID EQUAL exp PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                Token identificador = (Token)var;
                                                if(val!=null){
                                                    asig_val_var(identificador,val.getTipo(),val.getValor());
                                                }
                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("asig",1, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp MAS t 
            {
              Operacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Operacion val1 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val2 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		  
                                    try {
                                        String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MAS,val2.getTipo());
                                        Object result = Operacion.sumaTerminos(val1, val2);
                                        RESULT = new Operacion(tipo,result);
                                    } catch (NotCastException e) {
                                        error_cast((Token)s,val1.getTipo(),val2.getTipo());
                                        //System.out.println("No se pudo castear el resultado");
                                        RESULT = val1;
                                    }
                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp MENOS t 
            {
              Operacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Operacion val1 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val2 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                    try {
                                        String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MENOS,val2.getTipo());
                                        Integer result = ((Integer)val1.getValor())-((Integer)val2.getValor());
                                        RESULT = new Operacion(tipo,result);
                                    } catch (NotCastException e) {
                                        error_cast((Token)s,val1.getTipo(),val2.getTipo());
                                        //System.out.println("No se pudo castear el resultado");
                                        RESULT = val1;
                                    }
                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= t 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                    RESULT = val;
                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // t ::= t MUL f 
            {
              Operacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Operacion val1 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val2 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                try {
                                    String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MUL,val2.getTipo());
                                    Integer result = ((Integer)val1.getValor())*((Integer)val2.getValor());
                                    RESULT = new Operacion(tipo,result);
                                } catch (NotCastException e) {
                                    error_cast((Token)s,val1.getTipo(),val2.getTipo());
                                    //System.out.println("No se pudo castear el resultado");
                                    RESULT = val1;
                                }
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("t",7, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // t ::= t DIV f 
            {
              Operacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Operacion val1 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val2 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                try {
                                    String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.DIV,val2.getTipo());
                                    Integer result = ((Integer)val1.getValor())/((Integer)val2.getValor());
                                    RESULT = new Operacion(tipo,result);
                                } catch (NotCastException e) {
                                    error_cast((Token)s,val1.getTipo(),val2.getTipo());
                                    //System.out.println("No se pudo castear el resultado");
                                    RESULT = val1;
                                }
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("t",7, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // t ::= f 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                    RESULT = val;
                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("t",7, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // f ::= ID 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        Token token = (Token) val;
                        FilaTabla simbolo = tablaSimbolos.buscar(token.getLexema());
                        if(simbolo!=null){
                            if(simbolo.getValor()!=null){
                                RESULT = new Operacion(simbolo.getTipo(),simbolo.getValor());
                            }else{
                                semantic_error(token, "La variable no esta inicializada");
                            }
                        }else{
                            semantic_error(token, "La variable no esta definida");
                        }
                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // f ::= ID PUNTO ID 
            {
              Operacion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                    RESULT = devolver_val_2Id(id1, id2);
                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // f ::= ID PUNTO ID CO_A exp CO_C 
            {
              Operacion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Operacion index = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                            if(index.getValor() instanceof Integer){
                                                                RESULT = devolver_val_2Id_index(id1, id2, (Integer) index.getValor());
                                                            }else{
                                                                semantic_error((Token)ref,"El valor del indice de la lista debe ser un \""+TablaSimbolos.INT+"\"");
                                                            }
                                                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // f ::= ID PUNTO ID CO_A exp CO_C PUNTO ID 
            {
              Operacion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Operacion index = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token id3 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                                                        if(index.getValor() instanceof Integer){
                                                                            RESULT = devolver_val_3Id(id1, id2, id3, (Integer) index.getValor());
                                                                        }else{
                                                                            semantic_error((Token)ref,"El valor del indice de la lista debe ser un \""+TablaSimbolos.INT+"\"");
                                                                        }
                                                                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // f ::= ENTERO 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        Token token = (Token) val;
                        RESULT = new Operacion(TablaSimbolos.INT,Integer.parseInt(token.getLexema()));
                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // f ::= STRING 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        Token token = (Token) val;
                        RESULT = new Operacion(TablaSimbolos.STRING,token.getLexema());
                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // f ::= PA_A exp PA_C 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                RESULT = val;
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // html ::= ME_Q HTML MA_Q contHTML ME_QB HTML MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                        tagini.setValorToken("<hmtl>");
                                                                        tagfin.setValorToken("</hmtl>");
                                                                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("html",9, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // html ::= ME_Q HTML MA_Q ME_QB HTML MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                tagini.setValorToken("<hmtl>");
                                                                tagfin.setValorToken("</hmtl>");
                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("html",9, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contHTML ::= contHTML ME_Q etiquetas 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contHTML ::= contHTML TEXT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token txt = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                        txt.setValorToken(txt.getLexema());
                                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // contHTML ::= contHTML D_PA_A varHTML2 PA_C_D 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // contHTML ::= ME_Q etiquetas 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contHTML ::= TEXT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token txt = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                txt.setValorToken(txt.getLexema());
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // contHTML ::= D_PA_A varHTML2 PA_C_D 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contHTML ::= contHTML error 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // etiquetas ::= BR MA_Q 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tag = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                    tag.setValorToken("<br>");
                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // etiquetas ::= H1 MA_Q contHTML ME_QB H1 MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                tagini.setValorToken("<h1>");
                                                                                tagfin.setValorToken("</h1>");
                                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // etiquetas ::= H1 MA_Q ME_QB H1 MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                tagini.setValorToken("<h1>");
                                                                                tagfin.setValorToken("</h1>");
                                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // etiquetas ::= H2 MA_Q contHTML ME_QB H2 MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                tagini.setValorToken("<h2>");
                                                                                tagfin.setValorToken("</h2>");
                                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // etiquetas ::= H2 MA_Q ME_QB H2 MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                tagini.setValorToken("<h2>");
                                                                                tagfin.setValorToken("</h2>");
                                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // etiquetas ::= TABLE MA_Q tablec ME_QB TABLE MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                    tagini.setValorToken("<table border=\"1\">");
                                                                                    tagfin.setValorToken("</table>");
                                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // etiquetas ::= TABLE MA_Q ME_QB TABLE MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                    tagini.setValorToken("<table border=\"1\">");
                                                                                    tagfin.setValorToken("</table>");
                                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetas ::= FOR ITERATOR DOSPUNTOS ID HASTA DOSPUNTOS paramhasta PUNTOCOMA MA_Q contHTML ME_QB FOR MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-12)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-12)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-12)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-11)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-11)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-11)).value;
		int var_iteleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-9)).left;
		int var_iteright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-9)).right;
		Token var_ite = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-9)).value;
		int hasleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-8)).left;
		int hasright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-8)).right;
		Object has = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-8)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)).right;
		Object max = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                                                                                            verificar_tipo_var_for((Token)var_ite,TablaSimbolos.INT);
                                                                                                                                                            varificar_no_null((Token)var_ite);
                                                                                                                                                            tagini.setAccion(Token.BUCLE_INI);
                                                                                                                                                            tagfin.setAccion(Token.BUCLE_FIN);
                                                                                                                                                            if(max!=null){
                                                                                                                                                                Token limite = (Token)has;
                                                                                                                                                                if(max instanceof Integer){
                                                                                                                                                                    limite.setValorToken(max);
                                                                                                                                                                }else if(max instanceof FilaTabla){
                                                                                                                                                                    limite.setValorToken(max);
                                                                                                                                                                }else{
                                                                                                                                                                  System.out.println("Analizador sintactico: error al recupera valor maximo de ciclo");
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-12)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetas ::= error MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // etiquetas ::= error ME_QB 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiquetas ::= error ME_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiquetas",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tablec ::= tablec ME_Q tablectag 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tablec ::= ME_Q tablectag 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tablec ::= tablec TEXT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token txt = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                        txt.setValorToken(txt.getLexema());
                                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tablec ::= tablec D_PA_A varHTML2 PA_C_D 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tablec ::= TEXT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token txt = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                txt.setValorToken(txt.getLexema());
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tablec ::= D_PA_A varHTML2 PA_C_D 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tablec ::= tablec error 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tablectag ::= TR MA_Q trc ME_QB TR MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<tr>");
                                                                    tagfin.setValorToken("</tr>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tablectag ::= TR MA_Q ME_QB TR MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<tr>");
                                                                    tagfin.setValorToken("</tr>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tablectag ::= BR MA_Q 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tag = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                    tag.setValorToken("<br>");
                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tablectag ::= H1 MA_Q contHTML ME_QB H1 MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                tagini.setValorToken("<h1>");
                                                                                tagfin.setValorToken("</h1>");
                                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tablectag ::= H1 MA_Q ME_QB H1 MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                tagini.setValorToken("<h1>");
                                                                                tagfin.setValorToken("</h1>");
                                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tablectag ::= H2 MA_Q contHTML ME_QB H2 MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                tagini.setValorToken("<h2>");
                                                                                tagfin.setValorToken("</h2>");
                                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tablectag ::= H2 MA_Q ME_QB H2 MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                tagini.setValorToken("<h2>");
                                                                                tagfin.setValorToken("</h2>");
                                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tablectag ::= TABLE MA_Q tablec ME_QB TABLE MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                    tagini.setValorToken("<table border=\"1\">");
                                                                                    tagfin.setValorToken("</table>");
                                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tablectag ::= TABLE MA_Q ME_QB TABLE MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                    tagini.setValorToken("<table border=\"1\">");
                                                                                    tagfin.setValorToken("</table>");
                                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tablectag ::= FOR ITERATOR DOSPUNTOS ID HASTA DOSPUNTOS paramhasta PUNTOCOMA MA_Q tablec ME_QB FOR MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-12)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-12)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-12)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-11)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-11)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-11)).value;
		int var_iteleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-9)).left;
		int var_iteright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-9)).right;
		Token var_ite = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-9)).value;
		int hasleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-8)).left;
		int hasright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-8)).right;
		Object has = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-8)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)).right;
		Object max = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                                                                                                            verificar_tipo_var_for((Token)var_ite,TablaSimbolos.INT);
                                                                                                                                                            varificar_no_null((Token)var_ite);
                                                                                                                                                            tagini.setAccion(Token.BUCLE_INI);
                                                                                                                                                            tagfin.setAccion(Token.BUCLE_FIN);
                                                                                                                                                            if(max!=null){
                                                                                                                                                                Token limite = (Token)has;
                                                                                                                                                                if(max instanceof Integer){
                                                                                                                                                                    limite.setValorToken(max);
                                                                                                                                                                }else if(max instanceof FilaTabla){
                                                                                                                                                                    limite.setValorToken(max);
                                                                                                                                                                }else{
                                                                                                                                                                  System.out.println("Analizador sintactico: error al recupera valor maximo de ciclo");
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-12)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tablectag ::= error MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tablectag ::= error ME_QB 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tablectag ::= error ME_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablectag",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // trc ::= trc ME_Q TH MA_Q contHTML ME_QB TH MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<th>");
                                                                    tagfin.setValorToken("</th>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // trc ::= trc ME_Q TH MA_Q ME_QB TH MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<th>");
                                                                    tagfin.setValorToken("</th>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // trc ::= trc ME_Q TD MA_Q contHTML ME_QB TD MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<td>");
                                                                    tagfin.setValorToken("</td>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // trc ::= trc ME_Q TD MA_Q ME_QB TD MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<td>");
                                                                    tagfin.setValorToken("</td>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // trc ::= ME_Q TH MA_Q contHTML ME_QB TH MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<th>");
                                                                    tagfin.setValorToken("</th>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // trc ::= ME_Q TH MA_Q ME_QB TH MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<th>");
                                                                    tagfin.setValorToken("</th>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // trc ::= ME_Q TD MA_Q contHTML ME_QB TD MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<td>");
                                                                    tagfin.setValorToken("</td>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // trc ::= ME_Q TD MA_Q ME_QB TD MA_Q 
            {
              Object RESULT =null;
		int taginileft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int taginiright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Token tagini = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int tagfinleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagfinright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Token tagfin = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    tagini.setValorToken("<td>");
                                                                    tagfin.setValorToken("</td>");
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // trc ::= trc error 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // varHTML2 ::= ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                            FilaTabla variable = tablaSimbolos.buscar(id1.getLexema());
                            if(variable==null){
                              semantic_error(id1,"La variable que desea utilizar no esta definida en el programa");
                            }
                            id1.setAccion(Token.CONSULTAR);
                            verificarUnId(id1);
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML2",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // varHTML2 ::= ID PUNTO ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                        verificarDosId(id1,id2);
                                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML2",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // varHTML2 ::= ID PUNTO ID CO_A varHTML4 CO_C 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                                    AccesoVariables acc = new AccesoVariables();
                                                                    verificarDosId_id2Index(id1,id2,acc);
                                                                    acc.setIndex(index);
                                                                    id2.setValorToken(acc);    
                                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML2",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // varHTML2 ::= ID PUNTO ID CO_A varHTML4 CO_C PUNTO ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token id3 = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                                                                AccesoVariables acc = new AccesoVariables();
                                                                                verificarTresId(id1,id2,id3,acc);
                                                                                acc.setIndex(index);
                                                                                id2.setValorToken(acc);
                                                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML2",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // varHTML2 ::= error PA_C_D 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML2",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // varHTML2 ::= error ME_QB 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML2",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // varHTML2 ::= error MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML2",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // varHTML4 ::= ID 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                            verificar_tipo_var_for((Token)var,TablaSimbolos.INT);
                            varificar_no_null((Token)var);
                            var.setAccion(Token.IGNORE);
                            FilaTabla variable = tablaSimbolos.buscar(((Token)var).getLexema());
                            if(variable!=null){
                                RESULT = variable;
                            }
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML4",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // varHTML4 ::= ENTERO 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                        RESULT = Integer.parseInt(((Token)en).getLexema());
                                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML4",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // varHTML4 ::= error PA_C_D 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML4",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // varHTML4 ::= error ME_QB 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML4",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // varHTML4 ::= error MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("varHTML4",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // paramhasta ::= ID 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                            verificar_tipo_var_for((Token)var,TablaSimbolos.INT);
                            varificar_no_null((Token)var);
                            FilaTabla variable = tablaSimbolos.buscar(((Token)var).getLexema());
                            if(variable!=null){
                              RESULT = variable;
                            }
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("paramhasta",14, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // paramhasta ::= ENTERO 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                RESULT = Integer.parseInt(((Token)en).getLexema());
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("paramhasta",14, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // paramhasta ::= error ME_QB 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("paramhasta",14, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // paramhasta ::= error MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("paramhasta",14, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDef$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDef$do_action(
    int                        CUP$ParserDef$act_num,
    java_cup.runtime.lr_parser CUP$ParserDef$parser,
    java.util.Stack            CUP$ParserDef$stack,
    int                        CUP$ParserDef$top)
    throws java.lang.Exception
    {
              return CUP$ParserDef$do_action_part00000000(
                               CUP$ParserDef$act_num,
                               CUP$ParserDef$parser,
                               CUP$ParserDef$stack,
                               CUP$ParserDef$top);
    }
}

}
