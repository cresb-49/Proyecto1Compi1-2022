
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cresb49.appcliente.analizadores.def;

import java.util.ArrayList;
import com.cresb49.appcliente.analizadores.ErrorAnalisis;
import com.cresb49.appcliente.analizadores.json.obj.ReporteJson;
import com.cresb49.appcliente.analizadores.Token;
import com.cresb49.appcliente.ED.Pila;
import com.cresb49.appcliente.analizadores.def.obj.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDef extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserDefSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDef() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDef(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDef(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\006\004\000\002\002\004\000\002\006" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\005\007\000\002\005\007\000\002\004\004\000\002" +
    "\004\004\000\002\007\005\000\002\007\004\000\002\003" +
    "\006\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\005\000\002\013\006\000\002\014\006\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\002" +
    "\000\002\016\004\000\002\020\004\000\002\020\010\000" +
    "\002\020\010\000\002\017\003\000\002\017\003\000\002" +
    "\017\005\000\002\021\011\000\002\021\004\000\002\022" +
    "\005\000\002\022\004\000\002\022\011\000\002\022\004" +
    "\000\002\022\004\000\002\030\010\000\002\030\003\000" +
    "\002\030\003\000\002\023\012\000\002\023\012\000\002" +
    "\023\004\000\002\023\011\000\002\023\011\000\002\023" +
    "\003\000\002\023\004\000\002\027\004\000\002\027\004" +
    "\000\002\027\006\000\002\027\003\000\002\027\003\000" +
    "\002\027\005\000\002\027\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\006\000\002\026\003\000\002\026" +
    "\003\000\002\026\005\000\002\026\004\000\002\024\004" +
    "\000\002\031\017\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\010\017\013\020\007\037\004\001\002\000" +
    "\004\040\256\001\002\000\014\002\uffff\017\013\020\007" +
    "\037\004\043\uffff\001\002\000\014\002\ufffb\017\ufffb\020" +
    "\ufffb\037\ufffb\043\ufffb\001\002\000\004\037\246\001\002" +
    "\000\006\002\047\043\045\001\002\000\014\002\ufffa\017" +
    "\ufffa\020\ufffa\037\ufffa\043\ufffa\001\002\000\014\002\ufff9" +
    "\017\ufff9\020\ufff9\037\ufff9\043\ufff9\001\002\000\004\037" +
    "\014\001\002\000\010\012\016\014\020\040\017\001\002" +
    "\000\014\002\ufff6\017\ufff6\020\ufff6\037\ufff6\043\ufff6\001" +
    "\002\000\004\037\043\001\002\000\012\010\025\015\022" +
    "\016\027\037\021\001\002\000\014\002\ufff3\017\ufff3\020" +
    "\ufff3\037\ufff3\043\ufff3\001\002\000\020\011\uffeb\014\uffeb" +
    "\033\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\001\002\000" +
    "\020\011\uffe9\014\uffe9\033\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\001\002\000\020\011\uffef\014\uffef\033\uffef\044" +
    "\uffef\045\uffef\046\035\047\034\001\002\000\020\011\uffec" +
    "\014\uffec\033\uffec\044\uffec\045\uffec\046\uffec\047\uffec\001" +
    "\002\000\012\010\025\015\022\016\027\037\021\001\002" +
    "\000\010\014\032\044\030\045\031\001\002\000\020\011" +
    "\uffea\014\uffea\033\uffea\044\uffea\045\uffea\046\uffea\047\uffea" +
    "\001\002\000\012\010\025\015\022\016\027\037\021\001" +
    "\002\000\012\010\025\015\022\016\027\037\021\001\002" +
    "\000\014\002\ufff8\017\ufff8\020\ufff8\037\ufff8\043\ufff8\001" +
    "\002\000\020\011\ufff0\014\ufff0\033\ufff0\044\ufff0\045\ufff0" +
    "\046\035\047\034\001\002\000\012\010\025\015\022\016" +
    "\027\037\021\001\002\000\012\010\025\015\022\016\027" +
    "\037\021\001\002\000\020\011\uffed\014\uffed\033\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\001\002\000\020\011\uffee" +
    "\014\uffee\033\uffee\044\uffee\045\uffee\046\uffee\047\uffee\001" +
    "\002\000\020\011\ufff1\014\ufff1\033\ufff1\044\ufff1\045\ufff1" +
    "\046\035\047\034\001\002\000\010\011\042\044\030\045" +
    "\031\001\002\000\020\011\uffe8\014\uffe8\033\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\001\002\000\006\012\016\014" +
    "\020\001\002\000\014\002\ufff4\017\ufff4\020\ufff4\037\ufff4" +
    "\043\ufff4\001\002\000\004\021\054\001\002\000\006\002" +
    "\001\043\001\001\002\000\004\002\000\001\002\000\004" +
    "\043\051\001\002\000\004\021\052\001\002\000\004\042" +
    "\053\001\002\000\006\002\uffe7\043\uffe7\001\002\000\004" +
    "\042\055\001\002\000\010\003\uffe2\041\uffe2\043\uffe2\001" +
    "\002\000\010\003\061\041\063\043\uffe6\001\002\000\010" +
    "\003\uffe3\041\uffe3\043\uffe3\001\002\000\010\003\uffe5\041" +
    "\uffe5\043\uffe5\001\002\000\004\042\245\001\002\000\010" +
    "\003\uffe4\041\uffe4\043\uffe4\001\002\000\014\022\071\023" +
    "\067\024\070\025\065\031\066\001\002\000\010\003\uffbb" +
    "\041\uffbb\043\uffbb\001\002\000\004\032\230\001\002\000" +
    "\004\042\227\001\002\000\004\042\222\001\002\000\004" +
    "\042\106\001\002\000\004\042\073\001\002\000\014\003" +
    "\uffe1\034\uffe1\035\uffe1\041\uffe1\043\uffe1\001\002\000\010" +
    "\034\075\035\076\041\100\001\002\000\004\043\uffdd\001" +
    "\002\000\004\043\uffdc\001\002\000\004\037\104\001\002" +
    "\000\004\043\101\001\002\000\010\022\071\023\067\031" +
    "\066\001\002\000\004\022\102\001\002\000\004\042\103" +
    "\001\002\000\014\003\uffdf\034\uffdf\035\uffdf\041\uffdf\043" +
    "\uffdf\001\002\000\004\036\105\001\002\000\004\043\uffdb" +
    "\001\002\000\004\041\107\001\002\000\014\022\071\023" +
    "\067\025\065\026\214\031\066\001\002\000\010\003\111" +
    "\041\113\043\112\001\002\000\010\003\uffd4\041\uffd4\043" +
    "\uffd4\001\002\000\004\024\210\001\002\000\014\022\071" +
    "\023\067\025\065\026\117\031\066\001\002\000\010\003" +
    "\uffd1\041\uffd1\043\uffd1\001\002\000\010\003\uffd2\041\uffd2" +
    "\043\uffd2\001\002\000\010\003\uffd8\041\uffd8\043\uffd8\001" +
    "\002\000\004\042\120\001\002\000\004\041\123\001\002" +
    "\000\010\003\uffcb\041\uffcb\043\uffcb\001\002\000\010\003" +
    "\170\041\171\043\167\001\002\000\014\022\071\023\067" +
    "\027\125\030\124\031\066\001\002\000\004\042\146\001" +
    "\002\000\004\042\126\001\002\000\010\034\130\035\131" +
    "\041\100\001\002\000\014\003\uffc6\034\uffc6\035\uffc6\041" +
    "\uffc6\043\uffc6\001\002\000\014\003\uffc5\034\uffc5\035\uffc5" +
    "\041\uffc5\043\uffc5\001\002\000\004\037\144\001\002\000" +
    "\014\003\135\034\136\035\137\041\100\043\134\001\002" +
    "\000\014\003\uffc9\034\uffc9\035\uffc9\041\uffc9\043\uffc9\001" +
    "\002\000\004\027\142\001\002\000\014\003\uffc3\034\uffc3" +
    "\035\uffc3\041\uffc3\043\uffc3\001\002\000\014\003\uffc8\034" +
    "\uffc8\035\uffc8\041\uffc8\043\uffc8\001\002\000\004\037\140" +
    "\001\002\000\004\036\141\001\002\000\014\003\uffc7\034" +
    "\uffc7\035\uffc7\041\uffc7\043\uffc7\001\002\000\004\042\143" +
    "\001\002\000\010\003\uffcd\041\uffcd\043\uffcd\001\002\000" +
    "\004\036\145\001\002\000\014\003\uffc4\034\uffc4\035\uffc4" +
    "\041\uffc4\043\uffc4\001\002\000\010\034\150\035\151\041" +
    "\100\001\002\000\014\003\uffbf\034\uffbf\035\uffbf\041\uffbf" +
    "\043\uffbf\001\002\000\014\003\uffbe\034\uffbe\035\uffbe\041" +
    "\uffbe\043\uffbe\001\002\000\004\037\164\001\002\000\014" +
    "\003\154\034\155\035\157\041\100\043\156\001\002\000" +
    "\014\003\uffc2\034\uffc2\035\uffc2\041\uffc2\043\uffc2\001\002" +
    "\000\014\003\uffbc\034\uffbc\035\uffbc\041\uffbc\043\uffbc\001" +
    "\002\000\014\003\uffc1\034\uffc1\035\uffc1\041\uffc1\043\uffc1" +
    "\001\002\000\004\030\162\001\002\000\004\037\160\001" +
    "\002\000\004\036\161\001\002\000\014\003\uffc0\034\uffc0" +
    "\035\uffc0\041\uffc0\043\uffc0\001\002\000\004\042\163\001" +
    "\002\000\010\003\uffcc\041\uffcc\043\uffcc\001\002\000\004" +
    "\036\165\001\002\000\014\003\uffbd\034\uffbd\035\uffbd\041" +
    "\uffbd\043\uffbd\001\002\000\010\003\uffce\041\uffce\043\uffce" +
    "\001\002\000\004\026\206\001\002\000\010\003\uffca\041" +
    "\uffca\043\uffca\001\002\000\014\022\071\023\067\027\173" +
    "\030\172\031\066\001\002\000\004\042\201\001\002\000" +
    "\004\042\174\001\002\000\010\034\130\035\131\041\100" +
    "\001\002\000\014\003\135\034\136\035\137\041\100\043" +
    "\176\001\002\000\004\027\177\001\002\000\004\042\200" +
    "\001\002\000\010\003\uffd0\041\uffd0\043\uffd0\001\002\000" +
    "\010\034\150\035\151\041\100\001\002\000\014\003\154" +
    "\034\155\035\157\041\100\043\203\001\002\000\004\030" +
    "\204\001\002\000\004\042\205\001\002\000\010\003\uffcf" +
    "\041\uffcf\043\uffcf\001\002\000\004\042\207\001\002\000" +
    "\010\003\uffd3\041\uffd3\043\uffd3\001\002\000\004\042\211" +
    "\001\002\000\010\003\uffda\041\uffda\043\uffda\001\002\000" +
    "\010\003\uffd5\041\uffd5\043\uffd5\001\002\000\010\003\uffd7" +
    "\041\uffd7\043\uffd7\001\002\000\004\042\215\001\002\000" +
    "\004\041\123\001\002\000\010\003\170\041\171\043\217" +
    "\001\002\000\004\026\220\001\002\000\004\042\221\001" +
    "\002\000\010\003\uffd6\041\uffd6\043\uffd6\001\002\000\010" +
    "\034\075\035\076\041\100\001\002\000\004\043\224\001" +
    "\002\000\004\023\225\001\002\000\004\042\226\001\002" +
    "\000\014\003\uffde\034\uffde\035\uffde\041\uffde\043\uffde\001" +
    "\002\000\014\003\uffe0\034\uffe0\035\uffe0\041\uffe0\043\uffe0" +
    "\001\002\000\004\013\231\001\002\000\012\010\025\015" +
    "\022\016\027\037\021\001\002\000\010\033\233\044\030" +
    "\045\031\001\002\000\004\013\234\001\002\000\012\010" +
    "\025\015\022\016\027\037\021\001\002\000\010\014\236" +
    "\044\030\045\031\001\002\000\004\042\237\001\002\000" +
    "\004\041\107\001\002\000\004\043\242\001\002\000\010" +
    "\003\111\041\113\043\uffb9\001\002\000\004\025\243\001" +
    "\002\000\004\042\244\001\002\000\010\003\uffba\041\uffba" +
    "\043\uffba\001\002\000\010\003\uffd9\041\uffd9\043\uffd9\001" +
    "\002\000\010\012\016\014\020\040\250\001\002\000\014" +
    "\002\ufff5\017\ufff5\020\ufff5\037\ufff5\043\ufff5\001\002\000" +
    "\012\010\025\015\022\016\027\037\021\001\002\000\010" +
    "\014\252\044\030\045\031\001\002\000\014\002\ufff7\017" +
    "\ufff7\020\ufff7\037\ufff7\043\ufff7\001\002\000\014\002\ufffe" +
    "\017\ufffe\020\ufffe\037\ufffe\043\ufffe\001\002\000\014\002" +
    "\ufffd\017\ufffd\020\ufffd\037\ufffd\043\ufffd\001\002\000\014" +
    "\002\ufffc\017\ufffc\020\ufffc\037\ufffc\043\ufffc\001\002\000" +
    "\012\010\025\015\022\016\027\037\021\001\002\000\010" +
    "\014\260\044\030\045\031\001\002\000\014\002\ufff2\017" +
    "\ufff2\020\ufff2\037\ufff2\043\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\014\002\004\003\005\004\010\005\011\006" +
    "\007\001\001\000\002\001\001\000\010\003\252\004\253" +
    "\005\254\001\001\000\002\001\001\000\004\007\246\001" +
    "\001\000\006\013\045\014\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\043\001\001\000\010" +
    "\010\025\011\022\012\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\040\011\022\012\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\037\012\023" +
    "\001\001\000\006\011\032\012\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\036\001\001\000\004" +
    "\012\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\055\001\001\000\010\016\057\021\061\024\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\071\031\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\073\017\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\107\001\001\000\006\020\212\031\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\114\030\115\031\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\120\023\121\001\001\000\002\001\001\000" +
    "\004\016\165\001\001\000\004\020\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\126\027\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\146\026\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\126\027\174\001\001\000\004" +
    "\016\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\146\026\201\001\001\000\004" +
    "\016\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\120\023\215\001\001" +
    "\000\004\016\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\073\017\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\231\011\022\012\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\234\011\022\012\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\240\025" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\250" +
    "\011\022\012\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\256\011\022\012\023\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDef$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDef$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDef$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexerDef.next_token(); 
    }


    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerDef lexerDef;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;
    private SimbolosTerminalesDef simbolosTerminalesDef;
    private TablaSimbolos tablaSimbolos;
    private ReporteJson reporteJson;
    
    public ParserDef (LexerDef lexerDef){ 
        super(lexerDef);
        this.lexerDef=lexerDef;
        this.tablaSimbolos = new TablaSimbolos();
        this.simbolosTerminalesDef = new SimbolosTerminalesDef();
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserDefSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                //System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println(tok.getLexema()+" "+er);
                this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                //System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserDefSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            //System.out.println(tok.getLexema()+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            //System.out.println(er);
        }
    }


    private void verificar_def_var(Token token,String tipo) {
       FilaTabla fila = tablaSimbolos.buscar(token.getLexema());
        if(fila==null){
            tablaSimbolos.getFilas().add(new FilaTabla(token.getLexema(),tipo,null));
        }else{
            semantic_error(token,"La variable ya a sido definida con anterioridad");
        }
    }

    private void asig_val_var(Token identificador,String tipo,Object value) {
       FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila==null){
            semantic_error(identificador,"La variable a la que le quiere asignar valor no esta definida");
        }else{
            if(fila.getTipo().equals(tipo)){
              fila.setValor(value);
            }else{
                semantic_error(identificador,"La variable es de tipo: \""+fila.getTipo()+"\", no puede asignar un \""+tipo+"\"");
            }
        }
    }

    private void create_var_asig_val(Token identificador,String tipo_id,String tipo_value,Object value) {
       FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila==null){
            if(tipo_id.equals(tipo_value)){
                tablaSimbolos.getFilas().add(new FilaTabla(identificador.getLexema(),tipo_id,value));
            }else{
                semantic_error(identificador,"La variable es de tipo: \""+tipo_id+"\", no puede asignar un \""+tipo_value+"\"");
            }
        }else{
            semantic_error(identificador,"La variable ya a sido definida con anterioridad");
            //semantic_error(identificador,"El valor que se desea dar a la variable de de tipo \"\" y la variable es de tipo \"\"");
        }
    }

    private void error_cast(Token operador,String tipo1,String tipo2){
        semantic_error(operador,"No se puede operar un valor: \""+tipo1+"\" con un valor:\""+tipo2+"\"");
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    public TablaSimbolos getTablaSimbolos() {
        return tablaSimbolos;
    }

    protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDef$actions {
  private final ParserDef parser;

  /** Constructor */
  CUP$ParserDef$actions(ParserDef parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDef$do_action_part00000000(
    int                        CUP$ParserDef$act_num,
    java_cup.runtime.lr_parser CUP$ParserDef$parser,
    java.util.Stack            CUP$ParserDef$stack,
    int                        CUP$ParserDef$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDef$result;

      /* select the action based on the action number */
      switch (CUP$ParserDef$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // def ::= def html 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("def",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= def EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		RESULT = start_val;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDef$parser.done_parsing();
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // def ::= ini 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("def",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= ini asig 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= ini dec 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini ::= ini decn 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini ::= asig 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini ::= dec 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ini ::= decn 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decn ::= INT ID EQUAL exp PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                    Token identificador = (Token)var;
                                                    if(val!=null){
                                                        create_var_asig_val((Token)var,TablaSimbolos.INT,val.getTipo(),val.getValor());
                                                    }else{
                                                        verificar_def_var(identificador,TablaSimbolos.INT);
                                                    }
                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("decn",3, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decn ::= STR ID EQUAL exp PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                    Token identificador = (Token)var;
                                                    if(val!=null){
                                                        create_var_asig_val((Token)var,TablaSimbolos.STRING,val.getTipo(),val.getValor());
                                                    }else{
                                                        verificar_def_var(identificador,TablaSimbolos.STRING);
                                                    }
                                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("decn",3, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec ::= INT decp 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Pila<Token> vars = (Pila<Token>)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                if(vars!=null){
                                    ArrayList<Token> array =  vars.toArrayList();
                                    if(array!=null){
                                        for (Token token : array) {
                                            verificar_def_var(token, TablaSimbolos.INT);
                                        }
                                    }
                                }
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec ::= STR decp 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Pila<Token> vars = (Pila<Token>)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                if(vars!=null){
                                    ArrayList<Token> array =  vars.toArrayList();
                                    if(array!=null){
                                        for (Token token : array) {
                                            verificar_def_var(token, TablaSimbolos.STRING);
                                        }
                                    }
                                }
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decp ::= ID COMA decp 
            {
              Pila<Token> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Pila<Token> vars = (Pila<Token>)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                    RESULT = vars;
                                    if(RESULT!=null){
                                        RESULT.push((Token)id);
                                    }else{
                                        RESULT = new Pila<>();
                                    }
                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("decp",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decp ::= ID PUNTOCOMA 
            {
              Pila<Token> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                RESULT = new Pila<>();
                                RESULT.push((Token)id);
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("decp",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asig ::= ID EQUAL exp PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                                Token identificador = (Token)var;
                                                if(val!=null){
                                                    asig_val_var(identificador,val.getTipo(),val.getValor());
                                                }
                                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("asig",1, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp MAS t 
            {
              Operacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Operacion val1 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val2 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		  
                                    try {
                                        String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MAS,val2.getTipo());
                                        Object result = Operacion.sumaTerminos(val1, val2);
                                        RESULT = new Operacion(tipo,result);
                                    } catch (NotCastException e) {
                                        error_cast((Token)s,val1.getTipo(),val2.getTipo());
                                        //System.out.println("No se pudo castear el resultado");
                                        RESULT = val1;
                                    }
                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp MENOS t 
            {
              Operacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Operacion val1 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val2 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                    try {
                                        String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MENOS,val2.getTipo());
                                        Integer result = ((Integer)val1.getValor())-((Integer)val2.getValor());
                                        RESULT = new Operacion(tipo,result);
                                    } catch (NotCastException e) {
                                        error_cast((Token)s,val1.getTipo(),val2.getTipo());
                                        //System.out.println("No se pudo castear el resultado");
                                        RESULT = val1;
                                    }
                                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= t 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                    RESULT = val;
                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // t ::= t MUL f 
            {
              Operacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Operacion val1 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val2 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                try {
                                    String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.MUL,val2.getTipo());
                                    Integer result = ((Integer)val1.getValor())*((Integer)val2.getValor());
                                    RESULT = new Operacion(tipo,result);
                                } catch (NotCastException e) {
                                    error_cast((Token)s,val1.getTipo(),val2.getTipo());
                                    //System.out.println("No se pudo castear el resultado");
                                    RESULT = val1;
                                }
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("t",7, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // t ::= t DIV f 
            {
              Operacion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Operacion val1 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val2 = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                                try {
                                    String tipo = Operacion.autoCast(val1.getTipo(),TablaSimbolos.DIV,val2.getTipo());
                                    Integer result = ((Integer)val1.getValor())/((Integer)val2.getValor());
                                    RESULT = new Operacion(tipo,result);
                                } catch (NotCastException e) {
                                    error_cast((Token)s,val1.getTipo(),val2.getTipo());
                                    //System.out.println("No se pudo castear el resultado");
                                    RESULT = val1;
                                }
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("t",7, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // t ::= f 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                    RESULT = val;
                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("t",7, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // f ::= ID 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        Token token = (Token) val;
                        FilaTabla simbolo = tablaSimbolos.buscar(token.getLexema());
                        if(simbolo!=null){
                            if(simbolo.getValor()!=null){
                                RESULT = new Operacion(simbolo.getTipo(),simbolo.getValor());
                            }else{
                                semantic_error(token, "La variable no esta inicializada");
                            }
                        }else{
                            semantic_error(token, "La variable no esta definida");
                        }
                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // f ::= ENTERO 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        Token token = (Token) val;
                        RESULT = new Operacion(TablaSimbolos.INT,Integer.parseInt(token.getLexema()));
                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // f ::= STRING 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        Token token = (Token) val;
                        RESULT = new Operacion(TablaSimbolos.STRING,token.getLexema());
                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // f ::= PA_A exp PA_C 
            {
              Operacion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Operacion val = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                                RESULT = val;
                            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // html ::= htmlp ME_QB HTML MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("html",9, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // htmlp ::= ME_QB HTML MA_Q contHTML 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("htmlp",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contHTML ::= contHTML inertags 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contHTML ::= contHTML table 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contHTML ::= contHTML metFor 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contHTML ::= 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contHTML",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inertags ::= ME_Q inertagspp 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("inertags",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inertagspp ::= BR MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("inertagspp",14, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inertagspp ::= H1 MA_Q inertagsp ME_QB H1 MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("inertagspp",14, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inertagspp ::= H2 MA_Q inertagsp ME_QB H2 MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("inertagspp",14, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inertagsp ::= inertags 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("inertagsp",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inertagsp ::= TEXT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("inertagsp",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inertagsp ::= D_PA_A ID PA_C_D 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("inertagsp",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // table ::= ME_Q TABLE MA_Q tablec ME_QB TABLE MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("table",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // table ::= error MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("table",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tablec ::= tablec ME_Q tablecpp 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tablec ::= ME_Q inertagspp 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tablec ::= ME_Q TR MA_Q trc ME_QB TR MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tablec ::= ME_Q actionfor 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tablec ::= tablec error 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablec",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tablecpp ::= TR MA_Q trc ME_QB TR MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablecpp",22, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tablecpp ::= inertagspp 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablecpp",22, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tablecpp ::= actionfor 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tablecpp",22, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // trc ::= trc ME_Q TH MA_Q thc ME_QB TH MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // trc ::= trc ME_Q TD MA_Q tdc ME_QB TD MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // trc ::= trc inertags 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // trc ::= ME_Q TH MA_Q thc ME_QB TH MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // trc ::= ME_Q TD MA_Q tdc ME_QB TD MA_Q 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // trc ::= inertags 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // trc ::= trc error 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("trc",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // thc ::= thc inertags 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("thc",21, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // thc ::= thc TEXT 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("thc",21, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // thc ::= thc D_PA_A ID PA_C_D 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("thc",21, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // thc ::= inertags 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("thc",21, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // thc ::= TEXT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("thc",21, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // thc ::= D_PA_A ID PA_C_D 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("thc",21, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // thc ::= thc error 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("thc",21, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tdc ::= tdc inertags 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tdc",20, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tdc ::= tdc TEXT 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tdc",20, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tdc ::= tdc D_PA_A ID PA_C_D 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tdc",20, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tdc ::= inertags 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tdc",20, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tdc ::= TEXT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tdc",20, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tdc ::= D_PA_A ID PA_C_D 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tdc",20, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tdc ::= tdc error 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tdc",20, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // metFor ::= ME_Q actionfor 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("metFor",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // actionfor ::= FOR ITERATOR DOSPUNTOS exp HASTA DOSPUNTOS exp PUNTOCOMA MA_Q contFor ME_QB FOR MA_Q 
            {
              Object RESULT =null;
		int iterleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-9)).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-9)).right;
		Operacion iter = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-9)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)).right;
		Operacion max = (Operacion)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("actionfor",23, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-12)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // contFor ::= tablec 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("contFor",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDef$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDef$do_action(
    int                        CUP$ParserDef$act_num,
    java_cup.runtime.lr_parser CUP$ParserDef$parser,
    java.util.Stack            CUP$ParserDef$stack,
    int                        CUP$ParserDef$top)
    throws java.lang.Exception
    {
              return CUP$ParserDef$do_action_part00000000(
                               CUP$ParserDef$act_num,
                               CUP$ParserDef$parser,
                               CUP$ParserDef$stack,
                               CUP$ParserDef$top);
    }
}

}
