// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: DEF/LexerDef.jflex

package com.cresb49.appcliente.analizadores.def;

import com.cresb49.appcliente.analizadores.Token;
import com.cresb49.appcliente.analizadores.ErrorAnalisis;
import com.cresb49.appcliente.analizadores.def.obj.TablaEjecucion;

import java.util.ArrayList;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerDef implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int INERTEXT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\41\u2000\1\u1100\1\u3100\1\u3200\1\u1100"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u1100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u2000\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00"+
    "\1\u5000\1\u5100\1\u2000\3\u1100\1\u5200\1\u5300\1\u5400\12\u2000"+
    "\4\u1100\1\u5500\17\u2000\2\u1100\1\u5600\41\u2000\2\u1100\1\u5700"+
    "\1\u5800\2\u2000\1\u5900\1\u5a00\27\u1100\1\u5b00\2\u1100\1\u5c00"+
    "\45\u2000\1\u1100\1\u5d00\1\u5e00\11\u2000\1\u5f00\24\u2000\1\u6000"+
    "\1\u6100\1\u2000\1\u6200\1\u6300\1\u6400\1\u6500\2\u2000\1\u6600"+
    "\5\u2000\1\u6700\1\u6800\1\u6900\5\u2000\1\u6a00\1\u6b00\4\u2000"+
    "\1\u6c00\2\u2000\1\u6d00\16\u2000\246\u1100\1\u6e00\20\u1100\1\u6f00"+
    "\1\u7000\25\u1100\1\u7100\34\u1100\1\u7200\14\u2000\2\u1100\1\u7300"+
    "\u0b05\u2000\1\u7400\1\u7500\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\3\1\6\1\3\1\7\3\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\7\20\1\23\1\24\1\25\1\26\1\27\2\3"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\32\1\41\1\42\1\43\1\44\2\32\1\45"+
    "\1\46\1\47\6\32\1\50\1\51\1\52\1\3\1\32"+
    "\1\3\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\2\32\1\41\1\42\1\43\1\44\2\32"+
    "\1\45\1\46\1\47\6\32\4\3\41\0\2\3\4\53"+
    "\4\3\1\32\2\3\1\0\7\3\1\32\4\3\1\32"+
    "\5\3\27\32\1\3\37\32\1\3\70\32\2\40\115\32"+
    "\1\46\u0142\32\4\3\14\32\16\3\5\32\7\3\1\32"+
    "\1\3\1\32\21\3\160\54\5\32\1\3\2\32\2\3"+
    "\4\32\1\3\1\32\6\3\1\32\1\3\3\32\1\3"+
    "\1\32\1\3\24\32\1\3\123\32\1\3\213\32\1\3"+
    "\5\54\2\55\246\32\1\3\46\32\2\3\1\32\6\3"+
    "\1\55\47\32\1\55\6\3\1\53\1\3\55\54\1\3"+
    "\1\54\1\3\2\54\1\3\2\54\1\3\1\54\10\3"+
    "\33\32\4\3\1\55\3\32\15\3\6\0\5\3\1\53"+
    "\4\3\13\54\1\3\1\0\3\3\53\32\37\54\4\3"+
    "\2\32\1\54\143\32\1\3\1\32\7\54\1\0\1\3"+
    "\6\54\2\32\2\54\1\3\4\54\2\32\12\54\3\32"+
    "\2\3\1\32\17\3\1\0\1\32\1\54\36\32\33\54"+
    "\2\3\131\32\13\54\1\32\16\3\12\54\41\32\11\54"+
    "\2\32\4\3\1\32\2\3\1\55\2\3\26\32\4\54"+
    "\1\32\11\54\1\32\3\54\1\32\5\54\22\3\31\32"+
    "\3\54\4\3\13\32\65\3\25\32\1\3\10\32\25\3"+
    "\1\55\16\54\1\0\41\54\66\32\3\54\1\32\22\54"+
    "\1\32\7\54\12\32\2\54\2\3\12\54\1\3\20\32"+
    "\3\54\1\3\10\32\2\3\2\32\2\3\26\32\1\3"+
    "\7\32\1\3\1\32\3\3\4\32\2\3\1\54\1\32"+
    "\7\54\2\3\2\54\2\3\3\54\1\32\10\3\1\54"+
    "\4\3\2\32\1\3\3\32\2\54\2\3\12\54\2\32"+
    "\2\53\7\3\1\53\1\32\1\3\1\55\2\3\3\54"+
    "\1\3\6\32\4\3\2\32\2\3\26\32\1\3\7\32"+
    "\1\3\2\32\1\3\2\32\1\3\2\32\2\3\1\54"+
    "\1\3\5\54\4\3\2\54\2\3\3\54\3\3\1\54"+
    "\7\3\4\32\1\3\1\32\7\3\14\54\3\32\1\54"+
    "\13\3\3\54\1\3\11\32\1\3\3\32\1\3\26\32"+
    "\1\3\7\32\1\3\2\32\1\3\5\32\2\3\1\54"+
    "\1\32\10\54\1\3\3\54\1\3\3\54\2\3\1\32"+
    "\17\3\2\32\2\54\2\3\12\54\1\3\1\53\7\3"+
    "\1\32\6\54\1\3\3\54\1\3\10\32\2\3\2\32"+
    "\2\3\26\32\1\3\7\32\1\3\2\32\1\3\5\32"+
    "\2\3\1\54\1\32\7\54\2\3\2\54\2\3\3\54"+
    "\10\3\2\54\4\3\2\32\1\3\3\32\2\54\2\3"+
    "\12\54\1\3\1\32\20\3\1\54\1\32\1\3\6\32"+
    "\3\3\3\32\1\3\4\32\3\3\2\32\1\3\1\32"+
    "\1\3\2\32\3\3\2\32\3\3\3\32\3\3\14\32"+
    "\4\3\5\54\3\3\3\54\1\3\4\54\2\3\1\32"+
    "\6\3\1\54\16\3\12\54\11\3\1\53\6\3\4\54"+
    "\1\55\10\32\1\3\3\32\1\3\27\32\1\3\20\32"+
    "\3\3\1\32\7\54\1\3\3\54\1\3\4\54\7\3"+
    "\2\54\1\3\3\32\5\3\2\32\2\54\2\3\12\54"+
    "\20\3\1\32\3\54\1\3\10\32\1\3\3\32\1\3"+
    "\27\32\1\3\12\32\1\3\5\32\2\3\1\54\1\32"+
    "\7\54\1\3\3\54\1\3\4\54\7\3\2\54\7\3"+
    "\1\32\1\3\2\32\2\54\2\3\12\54\1\3\2\32"+
    "\15\3\4\54\1\3\10\32\1\3\3\32\1\3\51\32"+
    "\2\54\1\32\7\54\1\3\3\54\1\3\4\54\1\32"+
    "\5\3\3\32\1\54\7\3\3\32\2\54\2\3\12\54"+
    "\12\3\6\32\2\3\2\54\1\3\22\32\3\3\30\32"+
    "\1\3\11\32\1\3\1\32\2\3\7\32\3\3\1\54"+
    "\4\3\6\54\1\3\1\54\1\3\10\54\6\3\12\54"+
    "\2\3\2\54\15\3\60\32\1\54\2\32\7\54\4\3"+
    "\1\53\7\32\10\54\1\3\12\54\47\3\2\32\1\3"+
    "\1\32\1\3\1\55\2\32\1\55\1\32\1\3\1\55"+
    "\1\32\6\55\4\32\1\55\7\32\1\55\3\32\1\3"+
    "\1\32\1\3\1\32\2\55\2\32\1\55\4\32\1\54"+
    "\2\32\6\54\1\55\2\54\1\32\2\3\5\32\1\3"+
    "\1\32\1\3\6\54\2\3\12\54\2\3\4\32\40\3"+
    "\1\32\27\3\2\54\6\3\12\54\13\3\1\54\1\3"+
    "\1\54\1\3\1\54\4\3\2\54\10\32\1\3\44\32"+
    "\4\3\24\54\1\3\2\54\5\32\13\54\1\3\44\54"+
    "\11\3\1\54\71\3\53\32\24\54\1\32\12\54\6\3"+
    "\6\32\4\54\4\32\3\54\1\32\3\54\2\32\7\54"+
    "\3\32\4\54\15\32\14\54\1\32\17\54\2\3\46\32"+
    "\1\3\1\32\5\3\1\32\2\3\53\32\1\3\u014d\32"+
    "\1\3\4\32\2\3\7\32\1\3\1\32\1\3\4\32"+
    "\2\3\51\32\1\3\4\32\2\3\41\32\1\3\4\32"+
    "\2\3\7\32\1\3\1\32\1\3\4\32\2\3\17\32"+
    "\1\3\71\32\1\3\4\32\2\3\103\32\2\3\3\54"+
    "\40\3\20\32\20\3\126\32\2\3\6\32\3\3\u016c\32"+
    "\2\3\21\32\1\3\32\32\5\3\113\32\3\3\13\32"+
    "\7\3\15\32\1\3\4\32\3\54\13\3\22\32\3\54"+
    "\13\3\22\32\2\54\14\3\15\32\1\3\3\32\1\3"+
    "\2\54\14\3\64\32\40\54\3\3\1\32\3\3\1\53"+
    "\1\32\1\54\2\3\12\54\41\3\3\54\1\0\1\3"+
    "\12\54\6\3\130\32\1\55\7\3\5\32\2\54\42\32"+
    "\1\54\1\32\5\3\106\32\12\3\37\32\1\3\14\54"+
    "\4\3\14\54\12\3\12\54\36\32\2\3\5\32\13\3"+
    "\54\32\4\3\32\32\6\3\12\54\46\3\27\32\5\54"+
    "\4\3\65\32\12\54\1\3\35\54\2\3\13\54\6\3"+
    "\12\54\15\3\1\32\10\3\16\54\1\55\101\3\5\54"+
    "\57\32\21\54\7\32\4\3\12\54\21\3\11\54\14\3"+
    "\3\54\36\32\15\54\2\32\12\54\54\32\16\54\14\3"+
    "\44\32\24\54\10\3\12\54\3\3\3\32\12\54\44\32"+
    "\2\3\11\32\7\3\53\55\2\3\3\55\20\3\3\54"+
    "\1\3\25\54\4\32\1\54\4\32\3\54\2\32\3\54"+
    "\1\55\5\3\300\32\72\54\1\3\5\54\26\32\2\3"+
    "\6\32\2\3\46\32\2\3\6\32\2\3\10\32\1\3"+
    "\1\32\1\3\1\32\1\3\1\32\1\3\37\32\2\3"+
    "\65\32\1\3\7\32\1\3\1\32\3\3\3\32\1\3"+
    "\7\32\3\3\4\32\2\3\6\32\4\3\15\32\5\3"+
    "\3\32\1\3\7\32\16\3\5\0\32\3\5\0\20\3"+
    "\2\32\23\3\1\32\13\3\5\0\1\3\12\0\1\3"+
    "\1\32\15\3\1\32\20\3\15\32\3\3\40\53\20\3"+
    "\15\54\4\55\1\54\3\55\14\54\21\3\1\32\4\3"+
    "\1\32\2\3\12\32\1\3\1\32\3\3\5\32\6\3"+
    "\1\32\1\3\1\32\1\3\1\32\1\3\4\32\1\3"+
    "\13\32\2\3\4\32\5\3\5\32\4\3\1\32\21\3"+
    "\51\32\u022d\3\64\55\26\3\57\32\1\3\57\32\1\3"+
    "\205\32\6\3\4\32\3\54\2\32\14\3\46\32\1\3"+
    "\1\32\5\3\1\32\2\3\70\32\7\3\1\32\17\3"+
    "\1\54\27\32\11\3\7\32\1\3\7\32\1\3\7\32"+
    "\1\3\7\32\1\3\7\32\1\3\7\32\1\3\7\32"+
    "\1\3\7\32\1\3\40\54\57\3\1\32\325\3\3\32"+
    "\31\3\11\32\6\54\1\3\5\32\2\3\5\32\4\3"+
    "\126\32\2\3\2\54\2\3\3\32\1\3\132\32\1\3"+
    "\4\32\5\3\52\32\1\55\1\3\136\32\21\3\33\32"+
    "\65\3\306\32\112\3\353\32\5\55\20\3\215\32\103\3"+
    "\56\32\2\3\15\32\3\3\20\32\12\54\2\32\24\3"+
    "\57\32\1\54\3\55\1\3\12\54\1\3\37\32\2\54"+
    "\120\32\2\54\45\3\11\32\2\3\147\32\2\3\44\32"+
    "\1\55\10\32\10\55\2\3\5\55\60\3\13\32\1\54"+
    "\3\32\1\54\4\32\1\54\27\32\5\54\20\3\1\53"+
    "\7\3\64\32\14\3\2\54\62\32\22\54\12\3\12\54"+
    "\6\3\22\54\6\32\3\3\1\32\1\3\1\32\2\55"+
    "\12\54\34\32\10\54\2\3\27\32\15\54\14\3\35\32"+
    "\3\3\4\54\57\32\16\54\16\3\1\32\12\54\6\3"+
    "\5\32\1\54\12\32\12\54\5\32\1\3\51\32\16\54"+
    "\11\3\3\32\1\54\10\32\2\54\2\3\12\54\6\3"+
    "\27\32\3\3\1\32\3\54\62\32\1\54\1\32\3\54"+
    "\2\32\2\54\5\32\2\54\1\32\1\54\1\32\30\3"+
    "\3\32\2\3\13\32\5\54\2\3\3\32\2\54\12\3"+
    "\6\32\2\3\6\32\2\3\6\32\11\3\7\32\1\3"+
    "\7\32\1\3\53\32\1\3\12\32\2\55\10\3\163\32"+
    "\10\54\1\3\2\54\2\3\12\54\6\3\244\32\14\3"+
    "\27\32\4\3\61\32\4\3\156\32\2\3\152\32\46\3"+
    "\7\32\14\3\5\32\5\3\1\32\1\54\12\32\1\3"+
    "\15\32\1\3\5\32\1\3\1\32\1\3\2\32\1\3"+
    "\2\32\1\3\154\32\41\3\153\32\22\3\100\32\2\3"+
    "\66\32\50\3\14\32\1\53\3\3\20\54\20\3\20\54"+
    "\3\3\2\32\30\3\3\32\31\3\1\53\6\3\5\32"+
    "\1\3\207\32\2\3\1\0\4\3\1\53\13\3\12\54"+
    "\7\3\32\32\4\3\1\32\1\3\32\32\13\3\131\32"+
    "\3\3\6\32\2\3\6\32\2\3\6\32\2\3\3\32"+
    "\3\3\2\53\3\3\2\53\22\3\3\0\4\3\14\32"+
    "\1\3\32\32\1\3\23\32\1\3\2\32\1\3\17\32"+
    "\2\3\16\32\42\3\173\32\105\3\65\32\210\3\1\54"+
    "\202\3\35\32\3\3\61\32\17\3\1\54\37\3\40\32"+
    "\15\3\36\32\5\3\46\32\5\54\5\3\36\32\2\3"+
    "\44\32\4\3\10\32\1\3\5\32\52\3\236\32\2\3"+
    "\12\54\6\3\44\32\4\3\44\32\4\3\50\32\10\3"+
    "\64\32\234\3\67\32\11\3\26\32\12\3\10\32\230\3"+
    "\6\32\2\3\1\32\1\3\54\32\1\3\2\32\3\3"+
    "\1\32\2\3\27\32\12\3\27\32\11\3\37\32\101\3"+
    "\23\32\1\3\2\32\12\3\26\32\12\3\32\32\106\3"+
    "\70\32\6\3\2\32\100\3\1\32\3\54\1\3\2\54"+
    "\5\3\4\54\4\32\1\3\3\32\1\3\33\32\2\55"+
    "\2\3\3\54\4\3\1\54\40\3\35\32\3\3\35\32"+
    "\43\3\10\32\1\3\34\32\2\54\31\3\66\32\12\3"+
    "\26\32\12\3\23\32\15\3\22\32\156\3\111\32\67\3"+
    "\63\32\15\3\63\32\15\3\50\55\10\3\12\55\306\3"+
    "\35\55\12\3\1\55\10\3\41\55\217\3\27\55\11\3"+
    "\3\54\65\32\17\54\37\3\12\54\17\3\4\54\55\32"+
    "\13\54\2\3\1\0\22\3\31\32\7\3\12\54\6\3"+
    "\3\54\44\32\16\54\1\3\12\54\4\3\3\55\11\3"+
    "\43\32\1\54\2\3\1\32\11\3\3\54\60\32\16\54"+
    "\4\32\4\3\1\55\3\54\3\3\12\54\1\32\1\3"+
    "\1\32\43\3\22\32\1\3\31\32\14\54\6\3\1\54"+
    "\101\3\7\32\1\3\1\32\1\3\4\32\1\3\17\32"+
    "\1\3\12\32\7\3\57\32\14\54\5\3\12\54\6\3"+
    "\4\54\1\3\10\32\2\3\2\32\2\3\26\32\1\3"+
    "\7\32\1\3\2\32\1\3\5\32\1\3\1\55\1\54"+
    "\1\32\7\54\2\3\2\54\2\3\3\54\2\3\1\32"+
    "\6\3\1\54\5\3\5\32\2\54\2\3\7\54\3\3"+
    "\5\54\213\3\65\32\22\54\4\32\5\3\12\54\4\3"+
    "\2\55\40\3\60\32\24\54\2\32\1\3\1\32\10\3"+
    "\12\54\246\3\57\32\7\54\2\3\11\54\27\3\4\32"+
    "\2\54\42\3\60\32\21\54\3\3\1\32\13\3\12\54"+
    "\46\3\53\32\15\54\1\55\7\3\12\54\66\3\32\32"+
    "\1\55\2\3\17\54\4\3\12\54\306\3\73\55\145\3"+
    "\100\32\12\54\25\3\1\32\240\3\10\55\2\3\56\55"+
    "\2\3\10\55\1\3\2\55\33\3\1\32\12\54\50\32"+
    "\7\54\1\32\4\54\10\3\1\54\10\3\1\32\13\54"+
    "\50\32\2\55\4\32\20\54\3\3\1\55\42\3\71\32"+
    "\7\3\11\32\1\3\45\32\10\54\1\3\10\54\1\32"+
    "\17\3\12\54\30\3\36\32\2\3\26\54\1\3\16\54"+
    "\111\3\7\32\1\3\2\32\1\3\46\32\6\54\3\3"+
    "\1\54\1\3\2\54\1\3\7\54\1\32\1\54\10\3"+
    "\12\54\6\3\6\55\1\3\2\55\1\3\45\55\1\3"+
    "\2\55\1\3\6\55\7\3\12\55\u0136\3\27\55\11\3"+
    "\232\32\146\3\157\32\21\3\304\32\274\3\57\32\321\3"+
    "\107\32\271\3\71\32\7\3\37\32\1\3\12\54\146\3"+
    "\36\32\2\3\5\54\13\3\60\32\7\54\11\3\4\32"+
    "\14\3\12\54\11\3\25\32\5\3\23\32\260\3\100\55"+
    "\200\3\105\32\6\55\4\3\1\55\1\32\56\54\11\55"+
    "\7\3\4\54\15\32\100\3\2\32\1\3\1\55\34\3"+
    "\355\32\13\55\10\3\363\32\15\3\37\32\61\3\3\55"+
    "\21\3\4\55\10\3\u018c\32\4\3\153\32\5\3\15\32"+
    "\3\3\11\32\7\3\12\32\3\3\2\54\1\3\4\0"+
    "\301\3\5\54\3\3\6\54\10\0\10\54\2\3\7\54"+
    "\36\3\4\54\224\3\3\54\273\3\125\32\1\3\107\32"+
    "\1\3\2\32\2\3\1\32\2\3\2\32\2\3\4\32"+
    "\1\3\14\32\1\3\1\32\1\3\7\32\1\3\101\32"+
    "\1\3\4\32\2\3\10\32\1\3\7\32\1\3\34\32"+
    "\1\3\4\32\1\3\5\32\1\3\1\32\3\3\7\32"+
    "\1\3\u0154\32\2\3\31\32\1\3\31\32\1\3\37\32"+
    "\1\3\31\32\1\3\37\32\1\3\31\32\1\3\37\32"+
    "\1\3\31\32\1\3\37\32\1\3\31\32\1\3\10\32"+
    "\2\3\151\54\4\3\62\54\10\3\1\54\16\3\1\54"+
    "\26\3\5\54\1\3\17\54\120\3\7\54\1\3\21\54"+
    "\2\3\7\54\1\3\2\54\1\3\5\54\325\3\55\55"+
    "\3\3\16\55\2\3\12\55\4\3\1\55\u0171\3\72\55"+
    "\6\3\305\32\13\3\7\54\51\3\104\32\7\54\1\55"+
    "\4\3\12\54\246\3\4\32\1\3\33\32\1\3\2\32"+
    "\1\3\1\32\2\3\1\32\1\3\12\32\1\3\4\32"+
    "\1\3\1\32\1\3\1\32\6\3\1\32\4\3\1\32"+
    "\1\3\1\32\1\3\1\32\1\3\3\32\1\3\2\32"+
    "\1\3\1\32\2\3\1\32\1\3\1\32\1\3\1\32"+
    "\1\3\1\32\1\3\1\32\1\3\2\32\1\3\1\32"+
    "\2\3\4\32\1\3\7\32\1\3\4\32\1\3\4\32"+
    "\1\3\1\32\1\3\12\32\1\3\21\32\5\3\3\32"+
    "\1\3\5\32\1\3\21\32\164\3\32\55\6\3\32\55"+
    "\6\3\32\55\166\3\327\32\51\3\65\32\13\3\336\32"+
    "\2\3\u0182\32\16\3\u0131\32\37\3\36\32\343\3\1\0"+
    "\36\3\140\0\200\3\360\54\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30208];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\7\4\1\23\1\24\1\25\1\26"+
    "\1\27\1\1\1\30\1\31\1\4\1\0\1\32\1\33"+
    "\1\4\1\34\1\35\6\4\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\0\1\45\1\46\1\47\2\0"+
    "\1\50\6\4\1\51\2\0\1\4\1\52\4\4\1\53"+
    "\1\54\3\4\1\55\2\4\1\56\1\57\1\4\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\212\0\270\0\212\0\346"+
    "\0\212\0\u0114\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\u0142\0\212\0\212\0\u0170\0\212\0\212\0\u019e\0\u01cc"+
    "\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2\0\212\0\212\0\u02e0"+
    "\0\212\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u019e\0\u0450\0\u019e\0\u019e\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\u0536\0\u0564\0\u019e\0\u019e\0\u019e\0\212\0\212\0\212"+
    "\0\212\0\u0592\0\u036a\0\212\0\212\0\212\0\u05c0\0\u05ee"+
    "\0\u019e\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\212"+
    "\0\u0730\0\u075e\0\u078c\0\u019e\0\u07ba\0\u07e8\0\u0816\0\u0844"+
    "\0\212\0\u019e\0\u0872\0\u08a0\0\u08ce\0\u019e\0\u08fc\0\u092a"+
    "\0\u019e\0\u019e\0\u0958\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\6\1\5\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\3\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\3\27"+
    "\1\31\1\27\1\32\1\33\5\27\1\34\1\35\1\36"+
    "\1\4\1\37\1\27\2\4\2\40\1\4\1\40\1\4"+
    "\1\40\1\41\42\40\1\42\4\40\1\4\2\5\1\4"+
    "\1\6\1\5\1\4\1\43\10\4\3\44\2\4\1\45"+
    "\2\4\20\44\4\4\2\44\60\0\1\5\53\0\1\27"+
    "\6\0\1\46\10\0\3\27\5\0\20\27\3\0\2\27"+
    "\10\0\1\47\66\0\3\21\52\0\1\50\36\0\1\27"+
    "\6\0\1\27\10\0\3\27\5\0\20\27\3\0\2\27"+
    "\1\0\1\27\6\0\1\27\10\0\3\27\5\0\15\27"+
    "\1\51\2\27\3\0\2\27\1\0\1\27\6\0\1\27"+
    "\10\0\3\27\5\0\14\27\1\52\3\27\3\0\2\27"+
    "\1\0\1\27\6\0\1\27\10\0\1\27\1\53\1\54"+
    "\5\0\1\55\16\27\1\56\3\0\2\27\1\0\1\27"+
    "\6\0\1\27\10\0\3\27\5\0\13\27\1\57\3\27"+
    "\1\60\3\0\2\27\1\0\1\27\6\0\1\27\10\0"+
    "\3\27\5\0\17\27\1\61\3\0\2\27\1\0\1\27"+
    "\6\0\1\27\10\0\3\27\5\0\1\62\2\27\1\63"+
    "\3\27\1\64\5\27\1\65\2\27\3\0\2\27\1\0"+
    "\2\40\1\0\1\40\1\0\1\40\1\0\42\40\1\0"+
    "\4\40\6\0\1\66\34\0\1\67\1\0\1\70\1\0"+
    "\1\71\15\0\1\72\53\0\1\73\12\0\3\44\5\0"+
    "\20\44\4\0\2\44\17\0\1\74\36\0\1\27\6\0"+
    "\1\27\1\75\7\0\3\27\5\0\20\27\3\0\2\27"+
    "\10\0\1\76\46\0\17\77\1\100\36\77\1\27\6\0"+
    "\1\27\10\0\3\27\5\0\15\27\1\101\2\27\3\0"+
    "\2\27\1\0\1\27\6\0\1\27\10\0\3\27\5\0"+
    "\16\27\1\102\1\27\3\0\2\27\1\0\1\27\6\0"+
    "\1\27\10\0\3\27\5\0\12\27\1\103\5\27\3\0"+
    "\2\27\1\0\1\27\6\0\1\27\10\0\3\27\5\0"+
    "\17\27\1\104\3\0\2\27\1\0\1\27\6\0\1\27"+
    "\10\0\3\27\5\0\4\27\1\105\13\27\3\0\2\27"+
    "\1\0\1\27\6\0\1\27\10\0\3\27\5\0\15\27"+
    "\1\106\2\27\3\0\2\27\1\0\1\27\6\0\1\27"+
    "\10\0\3\27\5\0\1\27\1\107\16\27\3\0\2\27"+
    "\11\0\1\110\45\0\17\77\1\111\36\77\17\0\1\112"+
    "\36\0\1\27\6\0\1\27\10\0\3\27\5\0\17\27"+
    "\1\113\3\0\2\27\1\0\1\27\6\0\1\27\10\0"+
    "\3\27\5\0\11\27\1\114\6\27\3\0\2\27\1\0"+
    "\1\27\6\0\1\27\10\0\3\27\5\0\4\27\1\115"+
    "\13\27\3\0\2\27\1\0\1\27\6\0\1\27\10\0"+
    "\3\27\5\0\15\27\1\116\2\27\3\0\2\27\1\0"+
    "\1\27\6\0\1\27\10\0\3\27\5\0\10\27\1\117"+
    "\7\27\3\0\2\27\1\0\1\27\6\0\1\27\10\0"+
    "\3\27\5\0\11\27\1\120\6\27\3\0\2\27\1\0"+
    "\17\77\1\111\7\77\1\121\26\77\17\0\1\112\7\0"+
    "\1\121\26\0\1\27\6\0\1\27\10\0\3\27\5\0"+
    "\1\122\17\27\3\0\2\27\1\0\1\27\6\0\1\27"+
    "\10\0\3\27\5\0\6\27\1\123\11\27\3\0\2\27"+
    "\1\0\1\27\6\0\1\27\10\0\3\27\5\0\1\124"+
    "\17\27\3\0\2\27\1\0\1\27\6\0\1\27\10\0"+
    "\3\27\5\0\13\27\1\125\4\27\3\0\2\27\1\0"+
    "\1\27\6\0\1\27\10\0\3\27\5\0\4\27\1\126"+
    "\13\27\3\0\2\27\1\0\1\27\6\0\1\27\10\0"+
    "\3\27\5\0\4\27\1\127\13\27\3\0\2\27\1\0"+
    "\1\27\6\0\1\27\10\0\3\27\5\0\3\27\1\130"+
    "\14\27\3\0\2\27\1\0\1\27\6\0\1\27\10\0"+
    "\3\27\5\0\6\27\1\131\11\27\3\0\2\27\1\0"+
    "\1\27\6\0\1\27\10\0\3\27\5\0\15\27\1\132"+
    "\2\27\3\0\2\27\1\0\1\27\6\0\1\27\10\0"+
    "\3\27\5\0\14\27\1\133\3\27\3\0\2\27\1\0"+
    "\1\27\6\0\1\27\10\0\3\27\5\0\15\27\1\134"+
    "\2\27\3\0\2\27\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2438];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\1\11\1\1\1\11\1\1\6\11"+
    "\1\1\2\11\1\1\2\11\7\1\2\11\1\1\1\11"+
    "\5\1\1\0\16\1\4\11\2\0\3\11\2\0\7\1"+
    "\1\11\2\0\6\1\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private static final String ERROR_TYPE = "Léxico";
    private Token anterior;
    private Token actual; 
    private boolean habilitar_cont=false;
    private boolean ingresar_id=false;

    private int contador_tokens = 0;

    private int stringColumnInit = 0; 
    private StringBuffer string = new StringBuffer();
    private ArrayList<ErrorAnalisis> errors;

    private TablaEjecucion tablaEjecucion;

    public void setErrors(ArrayList<ErrorAnalisis> errors) {
        this.errors = errors;
    }

    public ArrayList<ErrorAnalisis> getErrors() {
        return errors;
    }

    private void addError(ErrorAnalisis error){
        this.errors.add(error);
    }

    private void habilitar_conteo(){
        this.habilitar_cont = true;
    }

    private void habilitar_ingresar_id(){
        this.ingresar_id = true;
    }
    private void dehabilitar_ingresar_id(){
        this.ingresar_id = true;
    }

    public TablaEjecucion getTablaEjecucion() {
        return tablaEjecucion;
    }

    public void setTablaEjecucion(TablaEjecucion tablaEjecucion) {
        this.tablaEjecucion = tablaEjecucion;
    }

    private void asig_valor_agregar_tabla_ejecucion(Token token){
        if(habilitar_cont){
            token.setId(contador_tokens);
            this.tablaEjecucion.getFilas().add(token);
            contador_tokens++;
        }
    }

    private void ingresar_id_tabla(Token token){
        if(habilitar_cont && ingresar_id){
            token.setId(contador_tokens);
            this.tablaEjecucion.getFilas().add(token);
            contador_tokens++;
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerDef(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
    this.anterior = this.actual;
    this.habilitar_cont = false;
    this.contador_tokens = 0;
    dehabilitar_ingresar_id();
    return new java_cup.runtime.Symbol(ParserDefSym.EOF,yyline+1,yycolumn+1,this.actual);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { String des ="El simbolo/cadena no existe en el lenguaje";
                        this.addError(new ErrorAnalisis(this.ERROR_TYPE,yytext(),(yyline+1),(yycolumn+1),des));
                        //System.out.println("Simbolo Ilegal: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 49: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 50: break;
          case 3:
            { this.stringColumnInit = (yycolumn+1);
                        this.string.setLength(0); 
                        yybegin(STRING);
            }
            // fall through
          case 51: break;
          case 4:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.CONSULTAR);
                        this.ingresar_id_tabla(this.actual);
                        return new Symbol(ParserDefSym.ID,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("Identificador: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 52: break;
          case 5:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.PA_A,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("(: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 53: break;
          case 6:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.PA_C,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("): "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 54: break;
          case 7:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.MUL,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("*: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 55: break;
          case 8:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.MAS,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("+: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 56: break;
          case 9:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.COMA,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(",: "+yytext()+" , Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 57: break;
          case 10:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.MENOS,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("-: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 58: break;
          case 11:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.COMA,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(".: "+yytext()+" , Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 59: break;
          case 12:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.DIV,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("/: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 60: break;
          case 13:
            { this.actual = new Token(yytext(),new Integer(yytext()),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.ENTERO,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("Entero: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 61: break;
          case 14:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.DOSPUNTOS,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(":-> "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 62: break;
          case 15:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.PUNTOCOMA,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(";-> "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 63: break;
          case 16:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.ME_Q,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("<: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 64: break;
          case 17:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.EQUAL,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("= : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 65: break;
          case 18:
            { yybegin(INERTEXT);
                        this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        dehabilitar_ingresar_id();
                        return new Symbol(ParserDefSym.MA_Q,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(">: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 66: break;
          case 19:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.CO_A,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("[: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 67: break;
          case 20:
            { this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.CO_C,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("]: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 68: break;
          case 21:
            { string.append( yytext());
            }
            // fall through
          case 69: break;
          case 22:
            { yybegin(YYINITIAL);
                                        this.actual = new Token(string.toString(),string.toString(),yyline+1,yycolumn+1,null,this.anterior);
                                        this.anterior = this.actual;
                                        return new Symbol(ParserDefSym.STRING,yyline+1,yycolumn+1,this.actual);
                                        //System.out.println("String: "+string.toString()+", Linea: "+(yyline+1)+", Columna: "+stringColumnInit);
            }
            // fall through
          case 70: break;
          case 23:
            { string.append('\\');
            }
            // fall through
          case 71: break;
          case 24:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.PRINT);
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.TEXT,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("text: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 72: break;
          case 25:
            { yybegin(YYINITIAL);
                        this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.ME_Q,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("<: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 73: break;
          case 26:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.ME_QB,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("</: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 74: break;
          case 27:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.PRINT);
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.BR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("br: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 75: break;
          case 28:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.PRINT);
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.H1,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("h1: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 76: break;
          case 29:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.PRINT);
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.H2,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("h2: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 77: break;
          case 30:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.PRINT);
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.TD,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("td: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 78: break;
          case 31:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.PRINT);
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.TH,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("tr: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 79: break;
          case 32:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.PRINT);
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.TR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("tr: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 80: break;
          case 33:
            { string.append('\"');
            }
            // fall through
          case 81: break;
          case 34:
            { string.append('\n');
            }
            // fall through
          case 82: break;
          case 35:
            { string.append('\r');
            }
            // fall through
          case 83: break;
          case 36:
            { string.append('\t');
            }
            // fall through
          case 84: break;
          case 37:
            { yybegin(YYINITIAL);
                        this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.ME_QB,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("</: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 85: break;
          case 38:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.D_PA_A,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("$$(: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 86: break;
          case 39:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        dehabilitar_ingresar_id();
                        return new Symbol(ParserDefSym.PA_C_D,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(")$$: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 87: break;
          case 40:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.FOR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("for: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 88: break;
          case 41:
            { yybegin(YYINITIAL);
                        this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        habilitar_ingresar_id();
                        return new Symbol(ParserDefSym.D_PA_A,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("$$(: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 89: break;
          case 42:
            { habilitar_conteo();
                        this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.PRINT);
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.HTML,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("html: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 90: break;
          case 43:
            { //System.out.println(yytext());
            }
            // fall through
          case 91: break;
          case 44:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.HASTA,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("hasta: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 92: break;
          case 45:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        this.actual.setAccion(Token.PRINT);
                        this.asig_valor_agregar_tabla_ejecucion(this.actual);
                        return new Symbol(ParserDefSym.TABLE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("table: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 93: break;
          case 46:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.STR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("String: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 94: break;
          case 47:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserDefSym.INT,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("Integer: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 95: break;
          case 48:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        habilitar_ingresar_id();
                        return new Symbol(ParserDefSym.ITERATOR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("iterador: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
