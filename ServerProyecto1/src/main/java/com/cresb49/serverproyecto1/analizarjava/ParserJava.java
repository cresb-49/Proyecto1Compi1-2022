
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cresb49.serverproyecto1.analizarjava;

import com.cresb49.serverproyecto1.analizarjava.objetos.*;
import com.cresb49.serverproyecto1.consolecontrol.ConsoleControl;
import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserJavaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\325\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\006\004\000\002\006\003" +
    "\000\002\006\004\000\002\006\003\000\002\004\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\013\010\000\002\013\007\000\002\013\011\000\002" +
    "\013\010\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\004\000\002\036\003\000\002\022\010\000" +
    "\002\022\007\000\002\016\004\000\002\016\005\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\037" +
    "\004\000\002\037\006\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\040\006\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\015\007\000\002\015\010\000\002\015\010\000\002\015" +
    "\011\000\002\047\004\000\002\047\004\000\002\007\005" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\026\006\000\002\026\010\000\002" +
    "\026\005\000\002\026\005\000\002\035\010\000\002\035" +
    "\010\000\002\035\007\000\002\035\007\000\002\035\006" +
    "\000\002\035\005\000\002\033\003\000\002\033\005\000" +
    "\002\033\005\000\002\033\007\000\002\034\007\000\002" +
    "\034\005\000\002\034\005\000\002\034\003\000\002\041" +
    "\006\000\002\041\005\000\002\042\003\000\002\042\005" +
    "\000\002\042\005\000\002\042\007\000\002\043\007\000" +
    "\002\043\005\000\002\043\005\000\002\043\003\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\004\000\002\010\003\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\004\000\002\014\003\000\002\025\005\000\002" +
    "\025\004\000\002\025\004\000\002\032\006\000\002\032" +
    "\007\000\002\032\010\000\002\032\011\000\002\012\003" +
    "\000\002\012\005\000\002\011\005\000\002\011\003\000" +
    "\002\023\020\000\002\023\021\000\002\023\017\000\002" +
    "\023\020\000\002\017\003\000\002\017\003\000\002\017" +
    "\004\000\002\020\010\000\002\020\011\000\002\024\012" +
    "\000\002\024\013\000\002\021\011\000\002\021\010\000" +
    "\002\021\014\000\002\021\015\000\002\021\013\000\002" +
    "\021\014\000\002\031\011\000\002\031\010\000\002\027" +
    "\007\000\002\027\010\000\002\027\006\000\002\027\005" +
    "\000\002\027\011\000\002\027\010\000\002\027\004\000" +
    "\002\030\011\000\002\030\010\000\002\030\010\000\002" +
    "\030\007\000\002\030\004\000\002\046\003\000\002\046" +
    "\006\000\002\050\005\000\002\050\003\000\002\050\004" +
    "\000\002\050\003\000\002\051\005\000\002\051\003\000" +
    "\002\052\005\000\002\052\005\000\002\052\003\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\003\000\002\054\005\000\002\054\005" +
    "\000\002\054\003\000\002\055\005\000\002\055\005\000" +
    "\002\055\003\000\002\056\004\000\002\056\004\000\002" +
    "\056\004\000\002\056\003\000\002\057\004\000\002\057" +
    "\004\000\002\057\003\000\002\060\003\000\002\060\005" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\005\000\002\061\005\000\002\061" +
    "\006\000\002\061\007\000\002\061\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019f\000\014\003\011\004\016\005\004\006\012\007" +
    "\005\001\002\000\030\010\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\031\ufff4\067\ufff4\074\ufff4\076" +
    "\ufff4\001\002\000\030\010\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\031\ufff3\067\ufff3\074\ufff3\076" +
    "\ufff3\001\002\000\006\010\034\067\033\001\002\000\004" +
    "\002\032\001\002\000\014\003\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\001\002\000\014\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\001\002\000\030\010\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\031\ufff5\067\ufff5" +
    "\074\ufff5\076\ufff5\001\002\000\004\002\uffff\001\002\000" +
    "\010\005\004\006\012\007\005\001\002\000\014\003\027" +
    "\004\016\005\ufffe\006\ufffe\007\ufffe\001\002\000\004\031" +
    "\017\001\002\000\006\062\021\065\022\001\002\000\014" +
    "\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\001\002\000" +
    "\006\031\023\050\024\001\002\000\014\003\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\001\002\000\006\062\021\065" +
    "\022\001\002\000\004\065\025\001\002\000\014\003\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\001\002\000\014\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\001\002\000\014" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\001\002\000" +
    "\014\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\001\002" +
    "\000\004\002\001\001\002\000\004\002\000\001\002\000" +
    "\004\031\u019d\001\002\000\004\067\035\001\002\000\004" +
    "\031\036\001\002\000\004\060\037\001\002\000\032\003" +
    "\050\005\004\006\012\007\005\013\043\014\054\015\052" +
    "\016\044\017\055\020\047\031\045\061\041\001\002\000" +
    "\032\003\uffe2\005\uffe2\006\uffe2\007\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\031\uffe2\061\uffe2\001" +
    "\002\000\004\002\uffe8\001\002\000\004\031\075\001\002" +
    "\000\004\031\ufff2\001\002\000\004\031\uffef\001\002\000" +
    "\004\031\uffec\001\002\000\032\003\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\031\uffe4\061\uffe4\001\002\000\004\031\uffed\001\002" +
    "\000\032\003\uffe0\005\uffe0\006\uffe0\007\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\031\uffe0\061\uffe0" +
    "\001\002\000\026\010\071\013\043\014\054\015\052\016" +
    "\044\017\055\020\047\031\067\074\065\076\066\001\002" +
    "\000\004\031\ufff0\001\002\000\032\003\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\031\uffe3\061\uffe3\001\002\000\004\031\ufff1\001" +
    "\002\000\004\031\uffee\001\002\000\032\003\061\005\004" +
    "\006\012\007\005\013\043\014\054\015\052\016\044\017" +
    "\055\020\047\031\045\061\062\001\002\000\032\003\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\031\uffe6\061\uffe6\001\002\000\032" +
    "\003\uffe7\005\uffe7\006\uffe7\007\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\031\uffe7\061\uffe7\001\002" +
    "\000\032\003\uffe1\005\uffe1\006\uffe1\007\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\031\uffe1\061\uffe1" +
    "\001\002\000\004\002\uffe9\001\002\000\032\003\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\031\uffe5\061\uffe5\001\002\000\004\054" +
    "\u0195\001\002\000\024\010\u0181\013\043\014\054\015\052" +
    "\016\044\017\055\020\047\031\045\076\066\001\002\000" +
    "\004\031\u017e\001\002\000\006\031\uffec\054\235\001\002" +
    "\000\004\031\233\001\002\000\022\013\043\014\054\015" +
    "\052\016\044\017\055\020\047\031\045\074\072\001\002" +
    "\000\020\013\043\014\054\015\052\016\044\017\055\020" +
    "\047\031\045\001\002\000\004\031\075\001\002\000\004" +
    "\065\226\001\002\000\010\063\076\065\uffb9\070\077\001" +
    "\002\000\004\031\173\001\002\000\036\003\115\021\127" +
    "\031\105\032\101\033\126\037\106\045\102\052\130\053" +
    "\100\054\124\066\110\071\103\072\113\075\121\001\002" +
    "\000\024\021\127\031\105\032\101\033\126\037\106\054" +
    "\124\066\110\071\103\072\113\001\002\000\050\003\uff35" +
    "\034\uff35\035\uff35\036\uff35\040\uff35\041\uff35\042\uff35\043" +
    "\uff35\044\uff35\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35" +
    "\053\uff35\055\uff35\063\uff35\064\uff35\065\uff35\001\002\000" +
    "\024\021\127\031\105\032\101\033\126\037\106\054\124" +
    "\066\110\071\103\072\113\001\002\000\050\003\uff37\034" +
    "\uff37\035\uff37\036\uff37\040\uff37\041\uff37\042\uff37\043\uff37" +
    "\044\uff37\046\uff37\047\uff37\050\uff37\051\uff37\052\uff37\053" +
    "\uff37\055\uff37\063\uff37\064\uff37\065\uff37\001\002\000\012" +
    "\003\157\044\161\063\uff57\065\uff57\001\002\000\052\003" +
    "\uff3a\034\uff3a\035\uff3a\036\uff3a\040\uff3a\041\uff3a\042\uff3a" +
    "\043\uff3a\044\uff3a\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052" +
    "\uff3a\053\uff3a\054\217\055\uff3a\063\uff3a\064\uff3a\065\uff3a" +
    "\001\002\000\004\062\203\001\002\000\050\003\uff38\034" +
    "\uff38\035\uff38\036\uff38\040\uff38\041\uff38\042\uff38\043\uff38" +
    "\044\uff38\046\uff38\047\uff38\050\uff38\051\uff38\052\uff38\053" +
    "\uff38\055\uff38\063\uff38\064\uff38\065\uff38\001\002\000\050" +
    "\003\uff33\034\uff33\035\uff33\036\uff33\040\uff33\041\uff33\042" +
    "\uff33\043\uff33\044\uff33\046\uff33\047\uff33\050\uff33\051\uff33" +
    "\052\uff33\053\uff33\055\uff33\063\uff33\064\uff33\065\uff33\001" +
    "\002\000\016\003\uff54\043\163\044\uff54\055\uff54\063\uff54" +
    "\065\uff54\001\002\000\006\063\172\065\uffb8\001\002\000" +
    "\050\003\uff36\034\uff36\035\uff36\036\uff36\040\uff36\041\uff36" +
    "\042\uff36\043\uff36\044\uff36\046\uff36\047\uff36\050\uff36\051" +
    "\uff36\052\uff36\053\uff36\055\uff36\063\uff36\064\uff36\065\uff36" +
    "\001\002\000\050\003\uff3b\034\uff3b\035\uff3b\036\uff3b\040" +
    "\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b\046\170\047\171" +
    "\050\uff3b\051\uff3b\052\uff3b\053\uff3b\055\uff3b\063\uff3b\064" +
    "\uff3b\065\uff3b\001\002\000\014\003\uff52\044\uff52\055\uff52" +
    "\063\uff52\065\uff52\001\002\000\044\003\uff3e\034\uff3e\035" +
    "\uff3e\036\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e" +
    "\050\uff3e\051\uff3e\052\uff3e\053\uff3e\055\uff3e\063\uff3e\064" +
    "\uff3e\065\uff3e\001\002\000\044\003\uff42\034\uff42\035\uff42" +
    "\036\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044\uff42\050" +
    "\uff42\051\uff42\052\uff42\053\uff42\055\uff42\063\uff42\064\uff42" +
    "\065\uff42\001\002\000\044\003\uff45\034\uff45\035\uff45\036" +
    "\uff45\040\uff45\041\uff45\042\uff45\043\uff45\044\uff45\050\145" +
    "\051\146\052\uff45\053\uff45\055\uff45\063\uff45\064\uff45\065" +
    "\uff45\001\002\000\004\020\165\001\002\000\036\003\uff48" +
    "\034\uff48\035\uff48\036\uff48\040\uff48\041\uff48\042\uff48\043" +
    "\uff48\044\uff48\052\142\053\143\055\uff48\063\uff48\065\uff48" +
    "\001\002\000\032\003\uff4d\034\uff4d\035\uff4d\036\137\040" +
    "\140\041\136\042\135\043\uff4d\044\uff4d\055\uff4d\063\uff4d" +
    "\065\uff4d\001\002\000\034\003\115\021\127\031\105\032" +
    "\101\033\126\037\106\045\102\052\130\053\100\054\124" +
    "\066\110\071\103\072\113\001\002\000\022\003\uff50\034" +
    "\133\035\132\043\uff50\044\uff50\055\uff50\063\uff50\065\uff50" +
    "\001\002\000\050\003\uff34\034\uff34\035\uff34\036\uff34\040" +
    "\uff34\041\uff34\042\uff34\043\uff34\044\uff34\046\uff34\047\uff34" +
    "\050\uff34\051\uff34\052\uff34\053\uff34\055\uff34\063\uff34\064" +
    "\uff34\065\uff34\001\002\000\050\003\uff32\034\uff32\035\uff32" +
    "\036\uff32\040\uff32\041\uff32\042\uff32\043\uff32\044\uff32\046" +
    "\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053\uff32\055\uff32" +
    "\063\uff32\064\uff32\065\uff32\001\002\000\024\021\127\031" +
    "\105\032\101\033\126\037\106\054\124\066\110\071\103" +
    "\072\113\001\002\000\044\003\uff3f\034\uff3f\035\uff3f\036" +
    "\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\044\uff3f\050\uff3f" +
    "\051\uff3f\052\uff3f\053\uff3f\055\uff3f\063\uff3f\064\uff3f\065" +
    "\uff3f\001\002\000\032\021\127\031\105\032\101\033\126" +
    "\037\106\045\102\052\130\053\100\054\124\066\110\071" +
    "\103\072\113\001\002\000\032\021\127\031\105\032\101" +
    "\033\126\037\106\045\102\052\130\053\100\054\124\066" +
    "\110\071\103\072\113\001\002\000\032\003\uff4e\034\uff4e" +
    "\035\uff4e\036\137\040\140\041\136\042\135\043\uff4e\044" +
    "\uff4e\055\uff4e\063\uff4e\065\uff4e\001\002\000\032\021\127" +
    "\031\105\032\101\033\126\037\106\045\102\052\130\053" +
    "\100\054\124\066\110\071\103\072\113\001\002\000\032" +
    "\021\127\031\105\032\101\033\126\037\106\045\102\052" +
    "\130\053\100\054\124\066\110\071\103\072\113\001\002" +
    "\000\032\021\127\031\105\032\101\033\126\037\106\045" +
    "\102\052\130\053\100\054\124\066\110\071\103\072\113" +
    "\001\002\000\032\021\127\031\105\032\101\033\126\037" +
    "\106\045\102\052\130\053\100\054\124\066\110\071\103" +
    "\072\113\001\002\000\036\003\uff4a\034\uff4a\035\uff4a\036" +
    "\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\044\uff4a\052\142" +
    "\053\143\055\uff4a\063\uff4a\065\uff4a\001\002\000\032\021" +
    "\127\031\105\032\101\033\126\037\106\045\102\052\130" +
    "\053\100\054\124\066\110\071\103\072\113\001\002\000" +
    "\032\021\127\031\105\032\101\033\126\037\106\045\102" +
    "\052\130\053\100\054\124\066\110\071\103\072\113\001" +
    "\002\000\044\003\uff46\034\uff46\035\uff46\036\uff46\040\uff46" +
    "\041\uff46\042\uff46\043\uff46\044\uff46\050\145\051\146\052" +
    "\uff46\053\uff46\055\uff46\063\uff46\064\uff46\065\uff46\001\002" +
    "\000\032\021\127\031\105\032\101\033\126\037\106\045" +
    "\102\052\130\053\100\054\124\066\110\071\103\072\113" +
    "\001\002\000\032\021\127\031\105\032\101\033\126\037" +
    "\106\045\102\052\130\053\100\054\124\066\110\071\103" +
    "\072\113\001\002\000\044\003\uff43\034\uff43\035\uff43\036" +
    "\uff43\040\uff43\041\uff43\042\uff43\043\uff43\044\uff43\050\uff43" +
    "\051\uff43\052\uff43\053\uff43\055\uff43\063\uff43\064\uff43\065" +
    "\uff43\001\002\000\044\003\uff44\034\uff44\035\uff44\036\uff44" +
    "\040\uff44\041\uff44\042\uff44\043\uff44\044\uff44\050\uff44\051" +
    "\uff44\052\uff44\053\uff44\055\uff44\063\uff44\064\uff44\065\uff44" +
    "\001\002\000\044\003\uff47\034\uff47\035\uff47\036\uff47\040" +
    "\uff47\041\uff47\042\uff47\043\uff47\044\uff47\050\145\051\146" +
    "\052\uff47\053\uff47\055\uff47\063\uff47\064\uff47\065\uff47\001" +
    "\002\000\036\003\uff49\034\uff49\035\uff49\036\uff49\040\uff49" +
    "\041\uff49\042\uff49\043\uff49\044\uff49\052\142\053\143\055" +
    "\uff49\063\uff49\065\uff49\001\002\000\036\003\uff4c\034\uff4c" +
    "\035\uff4c\036\uff4c\040\uff4c\041\uff4c\042\uff4c\043\uff4c\044" +
    "\uff4c\052\142\053\143\055\uff4c\063\uff4c\065\uff4c\001\002" +
    "\000\036\003\uff4b\034\uff4b\035\uff4b\036\uff4b\040\uff4b\041" +
    "\uff4b\042\uff4b\043\uff4b\044\uff4b\052\142\053\143\055\uff4b" +
    "\063\uff4b\065\uff4b\001\002\000\032\003\uff4f\034\uff4f\035" +
    "\uff4f\036\137\040\140\041\136\042\135\043\uff4f\044\uff4f" +
    "\055\uff4f\063\uff4f\065\uff4f\001\002\000\010\003\157\044" +
    "\161\055\160\001\002\000\014\003\uff53\044\uff53\055\uff53" +
    "\063\uff53\065\uff53\001\002\000\050\003\uff31\034\uff31\035" +
    "\uff31\036\uff31\040\uff31\041\uff31\042\uff31\043\uff31\044\uff31" +
    "\046\uff31\047\uff31\050\uff31\051\uff31\052\uff31\053\uff31\055" +
    "\uff31\063\uff31\064\uff31\065\uff31\001\002\000\032\021\127" +
    "\031\105\032\101\033\126\037\106\045\102\052\130\053" +
    "\100\054\124\066\110\071\103\072\113\001\002\000\016" +
    "\003\uff55\043\163\044\uff55\055\uff55\063\uff55\065\uff55\001" +
    "\002\000\032\021\127\031\105\032\101\033\126\037\106" +
    "\045\102\052\130\053\100\054\124\066\110\071\103\072" +
    "\113\001\002\000\022\003\uff51\034\133\035\132\043\uff51" +
    "\044\uff51\055\uff51\063\uff51\065\uff51\001\002\000\004\054" +
    "\166\001\002\000\004\055\167\001\002\000\006\063\uff56" +
    "\065\uff56\001\002\000\044\003\uff3d\034\uff3d\035\uff3d\036" +
    "\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\044\uff3d\050\uff3d" +
    "\051\uff3d\052\uff3d\053\uff3d\055\uff3d\063\uff3d\064\uff3d\065" +
    "\uff3d\001\002\000\044\003\uff3c\034\uff3c\035\uff3c\036\uff3c" +
    "\040\uff3c\041\uff3c\042\uff3c\043\uff3c\044\uff3c\050\uff3c\051" +
    "\uff3c\052\uff3c\053\uff3c\055\uff3c\063\uff3c\064\uff3c\065\uff3c" +
    "\001\002\000\004\031\173\001\002\000\010\063\175\065" +
    "\uffb2\070\176\001\002\000\004\065\uffb6\001\002\000\004" +
    "\031\173\001\002\000\036\003\115\021\127\031\105\032" +
    "\101\033\126\037\106\045\102\052\130\053\100\054\124" +
    "\066\110\071\103\072\113\075\121\001\002\000\006\063" +
    "\200\065\uffb3\001\002\000\004\031\173\001\002\000\004" +
    "\065\uffb5\001\002\000\004\065\uffb4\001\002\000\004\031" +
    "\204\001\002\000\052\003\uff39\034\uff39\035\uff39\036\uff39" +
    "\040\uff39\041\uff39\042\uff39\043\uff39\044\uff39\046\uff39\047" +
    "\uff39\050\uff39\051\uff39\052\uff39\053\uff39\054\205\055\uff39" +
    "\063\uff39\064\uff39\065\uff39\001\002\000\036\003\115\021" +
    "\127\031\105\032\101\033\126\037\106\045\102\052\130" +
    "\053\100\054\124\055\210\066\110\071\103\072\113\001" +
    "\002\000\012\003\157\044\161\055\uff7a\063\212\001\002" +
    "\000\004\055\211\001\002\000\050\003\uff2e\034\uff2e\035" +
    "\uff2e\036\uff2e\040\uff2e\041\uff2e\042\uff2e\043\uff2e\044\uff2e" +
    "\046\uff2e\047\uff2e\050\uff2e\051\uff2e\052\uff2e\053\uff2e\055" +
    "\uff2e\063\uff2e\064\uff2e\065\uff2e\001\002\000\050\003\uff2d" +
    "\034\uff2d\035\uff2d\036\uff2d\040\uff2d\041\uff2d\042\uff2d\043" +
    "\uff2d\044\uff2d\046\uff2d\047\uff2d\050\uff2d\051\uff2d\052\uff2d" +
    "\053\uff2d\055\uff2d\063\uff2d\064\uff2d\065\uff2d\001\002\000" +
    "\034\003\115\021\127\031\105\032\101\033\126\037\106" +
    "\045\102\052\130\053\100\054\124\066\110\071\103\072" +
    "\113\001\002\000\012\003\157\044\161\055\uff77\063\215" +
    "\001\002\000\004\055\uff79\001\002\000\034\003\115\021" +
    "\127\031\105\032\101\033\126\037\106\045\102\052\130" +
    "\053\100\054\124\066\110\071\103\072\113\001\002\000" +
    "\004\055\uff78\001\002\000\036\003\115\021\127\031\105" +
    "\032\101\033\126\037\106\045\102\052\130\053\100\054" +
    "\124\055\221\066\110\071\103\072\113\001\002\000\004" +
    "\055\222\001\002\000\050\003\uff30\034\uff30\035\uff30\036" +
    "\uff30\040\uff30\041\uff30\042\uff30\043\uff30\044\uff30\046\uff30" +
    "\047\uff30\050\uff30\051\uff30\052\uff30\053\uff30\055\uff30\063" +
    "\uff30\064\uff30\065\uff30\001\002\000\050\003\uff2f\034\uff2f" +
    "\035\uff2f\036\uff2f\040\uff2f\041\uff2f\042\uff2f\043\uff2f\044" +
    "\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f\053\uff2f" +
    "\055\uff2f\063\uff2f\064\uff2f\065\uff2f\001\002\000\044\003" +
    "\uff41\034\uff41\035\uff41\036\uff41\040\uff41\041\uff41\042\uff41" +
    "\043\uff41\044\uff41\050\uff41\051\uff41\052\uff41\053\uff41\055" +
    "\uff41\063\uff41\064\uff41\065\uff41\001\002\000\044\003\uff40" +
    "\034\uff40\035\uff40\036\uff40\040\uff40\041\uff40\042\uff40\043" +
    "\uff40\044\uff40\050\uff40\051\uff40\052\uff40\053\uff40\055\uff40" +
    "\063\uff40\064\uff40\065\uff40\001\002\000\004\065\uffb7\001" +
    "\002\000\032\003\uffbc\005\uffbc\006\uffbc\007\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\031\uffbc\061" +
    "\uffbc\001\002\000\004\031\075\001\002\000\004\065\231" +
    "\001\002\000\032\003\uffbe\005\uffbe\006\uffbe\007\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\031\uffbe" +
    "\061\uffbe\001\002\000\004\065\234\001\002\000\012\054" +
    "\uffca\063\076\065\uffb9\070\077\001\002\000\032\003\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\031\uffbb\061\uffbb\001\002\000\024" +
    "\003\237\013\043\014\054\015\052\016\044\017\055\020" +
    "\047\031\045\055\236\001\002\000\006\003\244\060\245" +
    "\001\002\000\010\055\u017c\060\u017b\061\u017a\001\002\000" +
    "\004\031\u016f\001\002\000\004\055\242\001\002\000\006" +
    "\003\244\060\245\001\002\000\032\003\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\031\uffdf\061\uffdf\001\002\000\026\005\004\006" +
    "\012\007\005\013\043\014\054\015\052\016\044\017\055" +
    "\020\047\031\045\001\002\000\042\003\265\010\264\013" +
    "\043\014\054\015\052\016\044\017\055\020\047\022\256" +
    "\024\270\025\262\026\251\027\255\031\257\037\260\061" +
    "\247\001\002\000\042\003\uff9e\010\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\022\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\031\uff9e\037\uff9e\061\uff9e\001\002" +
    "\000\032\003\uffdd\005\uffdd\006\uffdd\007\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\031\uffdd\061\uffdd" +
    "\001\002\000\004\031\365\001\002\000\004\054\u0163\001" +
    "\002\000\042\003\uff9f\010\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\022\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\031\uff9f\037\uff9f\061\uff9f\001\002\000\042" +
    "\003\uff99\010\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\022\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\031\uff99\037\uff99\061\uff99\001\002\000\042\003\uff9a\010" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\022\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\031\uff9a\037" +
    "\uff9a\061\uff9a\001\002\000\004\054\u0146\001\002\000\004" +
    "\054\u0135\001\002\000\014\031\uffec\046\u0128\047\u012a\054" +
    "\u012b\070\u0129\001\002\000\004\062\u011d\001\002\000\042" +
    "\003\u0119\010\264\013\043\014\054\015\052\016\044\017" +
    "\055\020\047\022\256\024\270\025\262\026\251\027\255" +
    "\031\257\037\260\061\u0114\001\002\000\004\060\u0105\001" +
    "\002\000\042\003\uff9d\010\uff9d\013\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\022\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\031\uff9d\037\uff9d\061\uff9d\001\002\000\020" +
    "\013\043\014\054\015\052\016\044\017\055\020\047\031" +
    "\045\001\002\000\042\003\uff96\010\uff96\013\uff96\014\uff96" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\022\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\031\uff96\037\uff96\061\uff96\001\002" +
    "\000\042\003\uff9c\010\uff9c\013\uff9c\014\uff9c\015\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\022\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\031\uff9c\037\uff9c\061\uff9c\001\002\000\042\003" +
    "\uff98\010\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\022\uff98\024\uff98\025\uff98\026\uff98\027\uff98\031" +
    "\uff98\037\uff98\061\uff98\001\002\000\004\054\272\001\002" +
    "\000\042\003\uff9b\010\uff9b\013\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\022\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\031\uff9b\037\uff9b\061\uff9b\001\002\000\006\013" +
    "\274\031\273\001\002\000\004\070\350\001\002\000\004" +
    "\031\275\001\002\000\004\070\276\001\002\000\034\003" +
    "\115\021\127\031\105\032\101\033\126\037\106\045\102" +
    "\052\130\053\100\054\124\066\110\071\103\072\113\001" +
    "\002\000\010\003\157\044\161\065\300\001\002\000\034" +
    "\003\115\021\127\031\105\032\101\033\126\037\106\045" +
    "\102\052\130\053\100\054\124\066\110\071\103\072\113" +
    "\001\002\000\010\003\157\044\161\065\302\001\002\000" +
    "\004\031\303\001\002\000\010\046\305\047\306\070\307" +
    "\001\002\000\004\055\311\001\002\000\004\055\uff72\001" +
    "\002\000\004\055\uff71\001\002\000\034\003\115\021\127" +
    "\031\105\032\101\033\126\037\106\045\102\052\130\053" +
    "\100\054\124\066\110\071\103\072\113\001\002\000\010" +
    "\003\157\044\161\055\uff70\001\002\000\004\060\312\001" +
    "\002\000\046\003\325\010\264\011\323\012\317\013\043" +
    "\014\054\015\052\016\044\017\055\020\047\022\256\024" +
    "\270\025\262\026\251\027\255\031\257\037\260\061\314" +
    "\001\002\000\046\003\uff8b\010\uff8b\011\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\022\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\027\uff8b\031\uff8b\037\uff8b\061" +
    "\uff8b\001\002\000\046\003\uff76\010\uff76\011\uff76\012\uff76" +
    "\013\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76\022" +
    "\uff76\024\uff76\025\uff76\026\uff76\027\uff76\031\uff76\037\uff76" +
    "\061\uff76\001\002\000\046\003\344\010\264\011\323\012" +
    "\317\013\043\014\054\015\052\016\044\017\055\020\047" +
    "\022\256\024\270\025\262\026\251\027\255\031\257\037" +
    "\260\061\336\001\002\000\046\003\uff8c\010\uff8c\011\uff8c" +
    "\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\022\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\031\uff8c" +
    "\037\uff8c\061\uff8c\001\002\000\036\003\115\021\127\031" +
    "\105\032\101\033\126\037\106\045\102\052\130\053\100" +
    "\054\124\065\333\066\110\071\103\072\113\001\002\000" +
    "\046\003\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\022\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\031\uff87\037\uff87\061\uff87\001\002" +
    "\000\046\003\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014" +
    "\uff85\015\uff85\016\uff85\017\uff85\020\uff85\022\uff85\024\uff85" +
    "\025\uff85\026\uff85\027\uff85\031\uff85\037\uff85\061\uff85\001" +
    "\002\000\046\003\uff86\010\uff86\011\uff86\012\uff86\013\uff86" +
    "\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\022\uff86\024" +
    "\uff86\025\uff86\026\uff86\027\uff86\031\uff86\037\uff86\061\uff86" +
    "\001\002\000\004\065\331\001\002\000\046\003\uff8a\010" +
    "\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\022\uff8a\024\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\031\uff8a\037\uff8a\061\uff8a\001\002\000\046\003\uff82" +
    "\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016" +
    "\uff82\017\uff82\020\uff82\022\uff82\024\uff82\025\uff82\026\uff82" +
    "\027\uff82\031\uff82\037\uff82\061\uff82\001\002\000\046\003" +
    "\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89" +
    "\016\uff89\017\uff89\020\uff89\022\uff89\024\uff89\025\uff89\026" +
    "\uff89\027\uff89\031\uff89\037\uff89\061\uff89\001\002\000\046" +
    "\003\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015" +
    "\uff84\016\uff84\017\uff84\020\uff84\022\uff84\024\uff84\025\uff84" +
    "\026\uff84\027\uff84\031\uff84\037\uff84\061\uff84\001\002\000" +
    "\046\003\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88" +
    "\015\uff88\016\uff88\017\uff88\020\uff88\022\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\031\uff88\037\uff88\061\uff88\001\002" +
    "\000\046\003\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\022\uff7f\024\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\031\uff7f\037\uff7f\061\uff7f\001" +
    "\002\000\010\003\157\044\161\065\334\001\002\000\046" +
    "\003\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015" +
    "\uff80\016\uff80\017\uff80\020\uff80\022\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\031\uff80\037\uff80\061\uff80\001\002\000" +
    "\046\003\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81" +
    "\015\uff81\016\uff81\017\uff81\020\uff81\022\uff81\024\uff81\025" +
    "\uff81\026\uff81\027\uff81\031\uff81\037\uff81\061\uff81\001\002" +
    "\000\046\003\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\022\uff94\024\uff94" +
    "\025\uff94\026\uff94\027\uff94\031\uff94\037\uff94\061\uff94\001" +
    "\002\000\046\003\uff75\010\uff75\011\uff75\012\uff75\013\uff75" +
    "\014\uff75\015\uff75\016\uff75\017\uff75\020\uff75\022\uff75\024" +
    "\uff75\025\uff75\026\uff75\027\uff75\031\uff75\037\uff75\061\uff75" +
    "\001\002\000\046\003\uff95\010\uff95\011\uff95\012\uff95\013" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\022\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\031\uff95\037\uff95\061" +
    "\uff95\001\002\000\046\003\uff90\010\uff90\011\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\022" +
    "\uff90\024\uff90\025\uff90\026\uff90\027\uff90\031\uff90\037\uff90" +
    "\061\uff90\001\002\000\046\003\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\022\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\031\uff8e\037" +
    "\uff8e\061\uff8e\001\002\000\046\003\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\022\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\031\uff8f" +
    "\037\uff8f\061\uff8f\001\002\000\046\003\uff93\010\uff93\011" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93" +
    "\020\uff93\022\uff93\024\uff93\025\uff93\026\uff93\027\uff93\031" +
    "\uff93\037\uff93\061\uff93\001\002\000\046\003\uff83\010\uff83" +
    "\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017" +
    "\uff83\020\uff83\022\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
    "\031\uff83\037\uff83\061\uff83\001\002\000\046\003\uff92\010" +
    "\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\017\uff92\020\uff92\022\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\031\uff92\037\uff92\061\uff92\001\002\000\046\003\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\022\uff8d\024\uff8d\025\uff8d\026\uff8d" +
    "\027\uff8d\031\uff8d\037\uff8d\061\uff8d\001\002\000\046\003" +
    "\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91" +
    "\016\uff91\017\uff91\020\uff91\022\uff91\024\uff91\025\uff91\026" +
    "\uff91\027\uff91\031\uff91\037\uff91\061\uff91\001\002\000\034" +
    "\003\115\021\127\031\105\032\101\033\126\037\106\045" +
    "\102\052\130\053\100\054\124\066\110\071\103\072\113" +
    "\001\002\000\010\003\157\044\161\065\352\001\002\000" +
    "\034\003\115\021\127\031\105\032\101\033\126\037\106" +
    "\045\102\052\130\053\100\054\124\066\110\071\103\072" +
    "\113\001\002\000\010\003\157\044\161\065\354\001\002" +
    "\000\004\031\355\001\002\000\010\046\305\047\306\070" +
    "\307\001\002\000\004\055\357\001\002\000\004\060\360" +
    "\001\002\000\046\003\325\010\264\011\323\012\317\013" +
    "\043\014\054\015\052\016\044\017\055\020\047\022\256" +
    "\024\270\025\262\026\251\027\255\031\257\037\260\061" +
    "\361\001\002\000\046\003\uff74\010\uff74\011\uff74\012\uff74" +
    "\013\uff74\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\022" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\031\uff74\037\uff74" +
    "\061\uff74\001\002\000\046\003\344\010\264\011\323\012" +
    "\317\013\043\014\054\015\052\016\044\017\055\020\047" +
    "\022\256\024\270\025\262\026\251\027\255\031\257\037" +
    "\260\061\363\001\002\000\046\003\uff73\010\uff73\011\uff73" +
    "\012\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020" +
    "\uff73\022\uff73\024\uff73\025\uff73\026\uff73\027\uff73\031\uff73" +
    "\037\uff73\061\uff73\001\002\000\004\031\365\001\002\000" +
    "\010\063\370\065\uffaf\070\371\001\002\000\004\065\367" +
    "\001\002\000\046\003\uffb1\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\022\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\031\uffb1\037\uffb1\061" +
    "\uffb1\001\002\000\004\031\374\001\002\000\036\003\115" +
    "\021\127\031\105\032\101\033\126\037\106\045\102\052" +
    "\130\053\100\054\124\066\110\071\103\072\113\075\121" +
    "\001\002\000\006\063\373\065\uffae\001\002\000\004\031" +
    "\374\001\002\000\010\063\376\065\uffa8\070\377\001\002" +
    "\000\004\065\uffac\001\002\000\004\031\374\001\002\000" +
    "\036\003\115\021\127\031\105\032\101\033\126\037\106" +
    "\045\102\052\130\053\100\054\124\066\110\071\103\072" +
    "\113\075\121\001\002\000\006\063\u0101\065\uffa9\001\002" +
    "\000\004\031\374\001\002\000\004\065\uffab\001\002\000" +
    "\004\065\uffaa\001\002\000\004\065\uffad\001\002\000\046" +
    "\003\325\010\264\011\323\012\317\013\043\014\054\015" +
    "\052\016\044\017\055\020\047\022\256\024\270\025\262" +
    "\026\251\027\255\031\257\037\260\061\u0106\001\002\000" +
    "\004\026\u010e\001\002\000\046\003\344\010\264\011\323" +
    "\012\317\013\043\014\054\015\052\016\044\017\055\020" +
    "\047\022\256\024\270\025\262\026\251\027\255\031\257" +
    "\037\260\061\u0108\001\002\000\004\026\u0109\001\002\000" +
    "\004\054\u010a\001\002\000\034\003\115\021\127\031\105" +
    "\032\101\033\126\037\106\045\102\052\130\053\100\054" +
    "\124\066\110\071\103\072\113\001\002\000\010\003\157" +
    "\044\161\055\u010c\001\002\000\004\065\u010d\001\002\000" +
    "\046\003\uff6c\010\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c" +
    "\015\uff6c\016\uff6c\017\uff6c\020\uff6c\022\uff6c\024\uff6c\025" +
    "\uff6c\026\uff6c\027\uff6c\031\uff6c\037\uff6c\061\uff6c\001\002" +
    "\000\004\054\u010f\001\002\000\034\003\115\021\127\031" +
    "\105\032\101\033\126\037\106\045\102\052\130\053\100" +
    "\054\124\066\110\071\103\072\113\001\002\000\010\003" +
    "\157\044\161\055\u0111\001\002\000\004\065\u0112\001\002" +
    "\000\046\003\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\022\uff6d\024\uff6d" +
    "\025\uff6d\026\uff6d\027\uff6d\031\uff6d\037\uff6d\061\uff6d\001" +
    "\002\000\042\003\uffa6\010\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\017\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\031\uffa6\037\uffa6\061\uffa6\001\002\000\032" +
    "\003\uffdc\005\uffdc\006\uffdc\007\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\031\uffdc\061\uffdc\001\002" +
    "\000\042\003\uffa7\010\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\031\uffa7\037\uffa7\061\uffa7\001\002\000\042\003" +
    "\uffa2\010\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\031" +
    "\uffa2\037\uffa2\061\uffa2\001\002\000\042\003\uffa1\010\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\022" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\031\uffa1\037\uffa1" +
    "\061\uffa1\001\002\000\042\003\uffa5\010\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\022\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\031\uffa5\037\uffa5\061\uffa5\001" +
    "\002\000\042\003\uff97\010\uff97\013\uff97\014\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\022\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\031\uff97\037\uff97\061\uff97\001\002\000\042" +
    "\003\uffa4\010\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\022\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\031\uffa4\037\uffa4\061\uffa4\001\002\000\042\003\uffa0\010" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0" +
    "\022\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0\037" +
    "\uffa0\061\uffa0\001\002\000\042\003\uffa3\010\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\022\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\031\uffa3\037\uffa3\061\uffa3" +
    "\001\002\000\004\031\u011e\001\002\000\006\054\u0120\070" +
    "\u011f\001\002\000\036\003\115\021\127\031\105\032\101" +
    "\033\126\037\106\045\102\052\130\053\100\054\124\066" +
    "\110\071\103\072\113\075\121\001\002\000\036\003\115" +
    "\021\127\031\105\032\101\033\126\037\106\045\102\052" +
    "\130\053\100\054\124\055\u0122\066\110\071\103\072\113" +
    "\001\002\000\004\055\u0124\001\002\000\004\065\u0123\001" +
    "\002\000\046\003\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\022\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\031\uff7c\037\uff7c\061\uff7c" +
    "\001\002\000\004\065\u0125\001\002\000\046\003\uff7b\010" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b" +
    "\017\uff7b\020\uff7b\022\uff7b\024\uff7b\025\uff7b\026\uff7b\027" +
    "\uff7b\031\uff7b\037\uff7b\061\uff7b\001\002\000\004\065\u0127" +
    "\001\002\000\046\003\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2\037\uffc2\061" +
    "\uffc2\001\002\000\004\065\u0134\001\002\000\036\003\115" +
    "\021\127\031\105\032\101\033\126\037\106\045\102\052" +
    "\130\053\100\054\124\066\110\071\103\072\113\075\121" +
    "\001\002\000\004\065\u0131\001\002\000\036\003\115\021" +
    "\127\031\105\032\101\033\126\037\106\045\102\052\130" +
    "\053\100\054\124\055\u012d\066\110\071\103\072\113\001" +
    "\002\000\004\055\u012f\001\002\000\004\065\u012e\001\002" +
    "\000\046\003\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014" +
    "\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\022\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\027\uff7e\031\uff7e\037\uff7e\061\uff7e\001" +
    "\002\000\004\065\u0130\001\002\000\046\003\uff7d\010\uff7d" +
    "\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\022\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d" +
    "\031\uff7d\037\uff7d\061\uff7d\001\002\000\046\003\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\031\uffc0\037\uffc0\061\uffc0\001\002\000\004\065\u0133" +
    "\001\002\000\046\003\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\022\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\037\uffc3\061" +
    "\uffc3\001\002\000\046\003\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\022" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1\037\uffc1" +
    "\061\uffc1\001\002\000\034\003\115\021\127\031\105\032" +
    "\101\033\126\037\106\045\102\052\130\053\100\054\124" +
    "\066\110\071\103\072\113\001\002\000\010\003\157\044" +
    "\161\055\u0137\001\002\000\004\060\u0138\001\002\000\046" +
    "\003\325\010\264\011\323\012\317\013\043\014\054\015" +
    "\052\016\044\017\055\020\047\022\256\024\270\025\262" +
    "\026\251\027\255\031\257\037\260\061\u0139\001\002\000" +
    "\050\003\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a" +
    "\015\uff6a\016\uff6a\017\uff6a\020\uff6a\022\uff6a\023\u0141\024" +
    "\uff6a\025\uff6a\026\uff6a\027\uff6a\031\uff6a\037\uff6a\061\uff6a" +
    "\001\002\000\046\003\344\010\264\011\323\012\317\013" +
    "\043\014\054\015\052\016\044\017\055\020\047\022\256" +
    "\024\270\025\262\026\251\027\255\031\257\037\260\061" +
    "\u013b\001\002\000\050\003\uff6b\010\uff6b\011\uff6b\012\uff6b" +
    "\013\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\022" +
    "\uff6b\023\u013c\024\uff6b\025\uff6b\026\uff6b\027\uff6b\031\uff6b" +
    "\037\uff6b\061\uff6b\001\002\000\004\060\u013d\001\002\000" +
    "\046\003\325\010\264\011\323\012\317\013\043\014\054" +
    "\015\052\016\044\017\055\020\047\022\256\024\270\025" +
    "\262\026\251\027\255\031\257\037\260\061\u013e\001\002" +
    "\000\046\003\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014" +
    "\uff69\015\uff69\016\uff69\017\uff69\020\uff69\022\uff69\024\uff69" +
    "\025\uff69\026\uff69\027\uff69\031\uff69\037\uff69\061\uff69\001" +
    "\002\000\046\003\344\010\264\011\323\012\317\013\043" +
    "\014\054\015\052\016\044\017\055\020\047\022\256\024" +
    "\270\025\262\026\251\027\255\031\257\037\260\061\u0140" +
    "\001\002\000\046\003\uff68\010\uff68\011\uff68\012\uff68\013" +
    "\uff68\014\uff68\015\uff68\016\uff68\017\uff68\020\uff68\022\uff68" +
    "\024\uff68\025\uff68\026\uff68\027\uff68\031\uff68\037\uff68\061" +
    "\uff68\001\002\000\004\060\u0142\001\002\000\046\003\325" +
    "\010\264\011\323\012\317\013\043\014\054\015\052\016" +
    "\044\017\055\020\047\022\256\024\270\025\262\026\251" +
    "\027\255\031\257\037\260\061\u0143\001\002\000\046\003" +
    "\uff67\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67" +
    "\016\uff67\017\uff67\020\uff67\022\uff67\024\uff67\025\uff67\026" +
    "\uff67\027\uff67\031\uff67\037\uff67\061\uff67\001\002\000\046" +
    "\003\344\010\264\011\323\012\317\013\043\014\054\015" +
    "\052\016\044\017\055\020\047\022\256\024\270\025\262" +
    "\026\251\027\255\031\257\037\260\061\u0145\001\002\000" +
    "\046\003\uff66\010\uff66\011\uff66\012\uff66\013\uff66\014\uff66" +
    "\015\uff66\016\uff66\017\uff66\020\uff66\022\uff66\024\uff66\025" +
    "\uff66\026\uff66\027\uff66\031\uff66\037\uff66\061\uff66\001\002" +
    "\000\034\003\115\021\127\031\105\032\101\033\126\037" +
    "\106\045\102\052\130\053\100\054\124\066\110\071\103" +
    "\072\113\001\002\000\010\003\157\044\161\055\u0148\001" +
    "\002\000\004\060\u0149\001\002\000\010\003\u014d\030\u014e" +
    "\061\u014c\001\002\000\004\061\u0162\001\002\000\006\030" +
    "\u0158\073\u0157\001\002\000\046\003\uff64\010\uff64\011\uff64" +
    "\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017\uff64\020" +
    "\uff64\022\uff64\024\uff64\025\uff64\026\uff64\027\uff64\031\uff64" +
    "\037\uff64\061\uff64\001\002\000\004\030\u0156\001\002\000" +
    "\032\021\127\031\105\032\101\033\126\037\106\045\102" +
    "\052\130\053\100\054\124\066\110\071\103\072\113\001" +
    "\002\000\010\052\142\053\143\064\u0150\001\002\000\044" +
    "\003\325\010\264\011\u0152\012\317\013\043\014\054\015" +
    "\052\016\044\017\055\020\047\022\256\024\270\025\262" +
    "\026\251\027\255\031\257\037\260\001\002\000\044\003" +
    "\344\010\264\011\u0154\012\317\013\043\014\054\015\052" +
    "\016\044\017\055\020\047\022\256\024\270\025\262\026" +
    "\251\027\255\031\257\037\260\001\002\000\004\065\u0153" +
    "\001\002\000\052\003\uff7f\010\uff7f\011\uff7f\012\uff7f\013" +
    "\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\022\uff7f" +
    "\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff59\031\uff7f\037" +
    "\uff7f\061\uff63\073\uff59\001\002\000\004\065\u0155\001\002" +
    "\000\052\003\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\022\uff7f\024\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\030\uff5a\031\uff7f\037\uff7f\061" +
    "\uff62\073\uff5a\001\002\000\010\030\uff58\061\uff5d\073\uff58" +
    "\001\002\000\004\064\u0160\001\002\000\032\021\127\031" +
    "\105\032\101\033\126\037\106\045\102\052\130\053\100" +
    "\054\124\066\110\071\103\072\113\001\002\000\010\052" +
    "\142\053\143\064\u015a\001\002\000\044\003\325\010\264" +
    "\011\u015c\012\317\013\043\014\054\015\052\016\044\017" +
    "\055\020\047\022\256\024\270\025\262\026\251\027\255" +
    "\031\257\037\260\001\002\000\044\003\344\010\264\011" +
    "\u015e\012\317\013\043\014\054\015\052\016\044\017\055" +
    "\020\047\022\256\024\270\025\262\026\251\027\255\031" +
    "\257\037\260\001\002\000\004\065\u015d\001\002\000\052" +
    "\003\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015" +
    "\uff7f\016\uff7f\017\uff7f\020\uff7f\022\uff7f\024\uff7f\025\uff7f" +
    "\026\uff7f\027\uff7f\030\uff5b\031\uff7f\037\uff7f\061\uff5e\073" +
    "\uff5b\001\002\000\004\065\u015f\001\002\000\052\003\uff7f" +
    "\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016" +
    "\uff7f\017\uff7f\020\uff7f\022\uff7f\024\uff7f\025\uff7f\026\uff7f" +
    "\027\uff7f\030\uff5c\031\uff7f\037\uff7f\061\uff5f\073\uff5c\001" +
    "\002\000\046\003\325\010\264\011\323\012\317\013\043" +
    "\014\054\015\052\016\044\017\055\020\047\022\256\024" +
    "\270\025\262\026\251\027\255\031\257\037\260\061\uff60" +
    "\001\002\000\046\003\344\010\264\011\323\012\317\013" +
    "\043\014\054\015\052\016\044\017\055\020\047\022\256" +
    "\024\270\025\262\026\251\027\255\031\257\037\260\061" +
    "\uff61\001\002\000\046\003\uff65\010\uff65\011\uff65\012\uff65" +
    "\013\uff65\014\uff65\015\uff65\016\uff65\017\uff65\020\uff65\022" +
    "\uff65\024\uff65\025\uff65\026\uff65\027\uff65\031\uff65\037\uff65" +
    "\061\uff65\001\002\000\034\003\115\021\127\031\105\032" +
    "\101\033\126\037\106\045\102\052\130\053\100\054\124" +
    "\066\110\071\103\072\113\001\002\000\010\003\157\044" +
    "\161\055\u0165\001\002\000\004\060\u0166\001\002\000\046" +
    "\003\325\010\264\011\323\012\317\013\043\014\054\015" +
    "\052\016\044\017\055\020\047\022\256\024\270\025\262" +
    "\026\251\027\255\031\257\037\260\061\u0167\001\002\000" +
    "\046\003\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f" +
    "\015\uff6f\016\uff6f\017\uff6f\020\uff6f\022\uff6f\024\uff6f\025" +
    "\uff6f\026\uff6f\027\uff6f\031\uff6f\037\uff6f\061\uff6f\001\002" +
    "\000\046\003\344\010\264\011\323\012\317\013\043\014" +
    "\054\015\052\016\044\017\055\020\047\022\256\024\270" +
    "\025\262\026\251\027\255\031\257\037\260\061\u0169\001" +
    "\002\000\046\003\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e" +
    "\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\022\uff6e\024" +
    "\uff6e\025\uff6e\026\uff6e\027\uff6e\031\uff6e\037\uff6e\061\uff6e" +
    "\001\002\000\004\065\u016b\001\002\000\046\003\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\031\uffb0\037\uffb0\061\uffb0\001\002\000\032\003\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\031\uffd9\061\uffd9\001\002\000\032" +
    "\003\uffdb\005\uffdb\006\uffdb\007\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\031\uffdb\061\uffdb\001\002" +
    "\000\032\003\uffda\005\uffda\006\uffda\007\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\031\uffda\061\uffda" +
    "\001\002\000\006\055\uffd8\063\u0170\001\002\000\022\003" +
    "\u0172\013\043\014\054\015\052\016\044\017\055\020\047" +
    "\031\045\001\002\000\004\055\uffd7\001\002\000\010\055" +
    "\u0179\060\u0178\061\u0177\001\002\000\004\031\u0174\001\002" +
    "\000\006\055\uffd2\063\u0175\001\002\000\022\003\u0172\013" +
    "\043\014\054\015\052\016\044\017\055\020\047\031\045" +
    "\001\002\000\004\055\uffd3\001\002\000\004\055\uffcf\001" +
    "\002\000\004\055\uffd0\001\002\000\004\055\uffd1\001\002" +
    "\000\004\055\uffd4\001\002\000\004\055\uffd5\001\002\000" +
    "\004\055\uffd6\001\002\000\032\003\uffde\005\uffde\006\uffde" +
    "\007\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\031\uffde\061\uffde\001\002\000\004\054\uffc9\001\002" +
    "\000\004\054\u0187\001\002\000\004\031\233\001\002\000" +
    "\020\013\043\014\054\015\052\016\044\017\055\020\047" +
    "\031\045\001\002\000\004\031\075\001\002\000\004\065" +
    "\u0184\001\002\000\032\003\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\031" +
    "\uffbf\061\uffbf\001\002\000\004\065\u0186\001\002\000\032" +
    "\003\uffbd\005\uffbd\006\uffbd\007\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\031\uffbd\061\uffbd\001\002" +
    "\000\024\003\237\013\043\014\054\015\052\016\044\017" +
    "\055\020\047\031\045\055\u0188\001\002\000\006\003\u018b" +
    "\060\u018c\001\002\000\004\055\u018a\001\002\000\006\003" +
    "\u018b\060\u018c\001\002\000\026\005\004\006\012\007\005" +
    "\013\043\014\054\015\052\016\044\017\055\020\047\031" +
    "\045\001\002\000\046\003\325\010\264\011\323\012\317" +
    "\013\043\014\054\015\052\016\044\017\055\020\047\022" +
    "\256\024\270\025\262\026\251\027\255\031\257\037\260" +
    "\061\u018e\001\002\000\032\003\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\031\uffcb\061\uffcb\001\002\000\032\003\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\031\uffc7\061\uffc7\001\002\000\046\003\344\010" +
    "\264\011\323\012\317\013\043\014\054\015\052\016\044" +
    "\017\055\020\047\022\256\024\270\025\262\026\251\027" +
    "\255\031\257\037\260\061\u0190\001\002\000\032\003\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\031\uffc8\061\uffc8\001\002\000\032" +
    "\003\uffc5\005\uffc5\006\uffc5\007\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\031\uffc5\061\uffc5\001\002" +
    "\000\032\003\uffc6\005\uffc6\006\uffc6\007\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\031\uffc6\061\uffc6" +
    "\001\002\000\032\003\uffc4\005\uffc4\006\uffc4\007\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\031\uffc4" +
    "\061\uffc4\001\002\000\032\003\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\031\uffcd\061\uffcd\001\002\000\024\003\237\013\043\014" +
    "\054\015\052\016\044\017\055\020\047\031\045\055\u0196" +
    "\001\002\000\006\003\u018b\060\u018c\001\002\000\004\055" +
    "\u0198\001\002\000\006\003\u018b\060\u018c\001\002\000\032" +
    "\003\uffcc\005\uffcc\006\uffcc\007\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\031\uffcc\061\uffcc\001\002" +
    "\000\032\003\uffce\005\uffce\006\uffce\007\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\031\uffce\061\uffce" +
    "\001\002\000\004\065\u019c\001\002\000\032\003\uffba\005" +
    "\uffba\006\uffba\007\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\031\uffba\061\uffba\001\002\000\004\060" +
    "\u019e\001\002\000\032\003\050\005\004\006\012\007\005" +
    "\013\043\014\054\015\052\016\044\017\055\020\047\031" +
    "\045\061\u019f\001\002\000\004\002\uffea\001\002\000\032" +
    "\003\061\005\004\006\012\007\005\013\043\014\054\015" +
    "\052\016\044\017\055\020\047\031\045\061\u01a1\001\002" +
    "\000\004\002\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019f\000\016\002\006\003\013\004\007\006\014\013" +
    "\012\044\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\030\044\005\001\001\000\004\004\027\001\001\000" +
    "\002\001\001\000\004\005\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\037\022\052\035" +
    "\045\036\055\044\050\045\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\u019a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\067\047" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\062\022\056\035" +
    "\057\044\050\045\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\u017f\047\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\231\001" +
    "\001\000\004\045\072\001\001\000\004\045\226\001\001" +
    "\000\004\033\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\224\001\001\000\030\046\111\050\103" +
    "\051\110\052\124\053\122\054\121\055\117\056\116\057" +
    "\115\060\113\061\106\001\001\000\010\057\223\060\113" +
    "\061\106\001\001\000\002\001\001\000\010\057\222\060" +
    "\113\061\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\050\155\051" +
    "\110\052\124\053\122\054\121\055\117\056\116\057\115" +
    "\060\113\061\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\057\130\060\113\061\106" +
    "\001\001\000\002\001\001\000\020\053\154\054\121\055" +
    "\117\056\116\057\115\060\113\061\106\001\001\000\020" +
    "\053\133\054\121\055\117\056\116\057\115\060\113\061" +
    "\106\001\001\000\002\001\001\000\016\054\153\055\117" +
    "\056\116\057\115\060\113\061\106\001\001\000\016\054" +
    "\152\055\117\056\116\057\115\060\113\061\106\001\001" +
    "\000\016\054\151\055\117\056\116\057\115\060\113\061" +
    "\106\001\001\000\016\054\140\055\117\056\116\057\115" +
    "\060\113\061\106\001\001\000\002\001\001\000\014\055" +
    "\150\056\116\057\115\060\113\061\106\001\001\000\014" +
    "\055\143\056\116\057\115\060\113\061\106\001\001\000" +
    "\002\001\001\000\012\056\147\057\115\060\113\061\106" +
    "\001\001\000\012\056\146\057\115\060\113\061\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\051\161\052\124\053\122\054\121\055" +
    "\117\056\116\057\115\060\113\061\106\001\001\000\002" +
    "\001\001\000\022\052\163\053\122\054\121\055\117\056" +
    "\116\057\115\060\113\061\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\201\001" +
    "\001\000\030\046\176\050\103\051\110\052\124\053\122" +
    "\054\121\055\117\056\116\057\115\060\113\061\106\001" +
    "\001\000\002\001\001\000\004\034\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\206\050\205\051\110\052\124\053\122" +
    "\054\121\055\117\056\116\057\115\060\113\061\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\213\050\212\051\110\052" +
    "\124\053\122\054\121\055\117\056\116\057\115\060\113" +
    "\061\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\215\050\212\051\110\052\124\053\122\054\121" +
    "\055\117\056\116\057\115\060\113\061\106\001\001\000" +
    "\002\001\001\000\030\012\217\050\205\051\110\052\124" +
    "\053\122\054\121\055\117\056\116\057\115\060\113\061" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\240\045\237\001\001" +
    "\000\004\016\u017c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\242\001\001\000\002" +
    "\001\001\000\014\015\u016d\022\u016b\035\u016c\044\050\045" +
    "\041\001\001\000\026\010\260\020\262\021\245\023\253" +
    "\024\265\026\252\031\270\032\251\041\266\045\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\u0169" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\020\u0117\021" +
    "\u0112\023\u0115\024\u0119\026\u0116\031\u011b\032\u0114\041\u011a" +
    "\045\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\050\276\051\110\052\124\053\122\054" +
    "\121\055\117\056\116\057\115\060\113\061\106\001\001" +
    "\000\002\001\001\000\026\050\300\051\110\052\124\053" +
    "\122\054\121\055\117\056\116\057\115\060\113\061\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\050\307\051\110\052\124\053\122\054" +
    "\121\055\117\056\116\057\115\060\113\061\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\314\020" +
    "\323\021\312\023\317\024\325\025\321\026\320\031\327" +
    "\032\315\041\326\045\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\342\021\334\023\337\024\344" +
    "\025\341\026\340\031\346\032\336\041\345\045\247\001" +
    "\001\000\002\001\001\000\026\050\331\051\110\052\124" +
    "\053\122\054\121\055\117\056\116\057\115\060\113\061" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\050\350\051" +
    "\110\052\124\053\122\054\121\055\117\056\116\057\115" +
    "\060\113\061\106\001\001\000\002\001\001\000\026\050" +
    "\352\051\110\052\124\053\122\054\121\055\117\056\116" +
    "\057\115\060\113\061\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\355\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\014\361\020\323\021\312\023" +
    "\317\024\325\025\321\026\320\031\327\032\315\041\326" +
    "\045\247\001\001\000\002\001\001\000\026\020\342\021" +
    "\334\023\337\024\344\025\341\026\340\031\346\032\336" +
    "\041\345\045\247\001\001\000\002\001\001\000\004\042" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u0103\001\001\000\030\046\371\050" +
    "\103\051\110\052\124\053\122\054\121\055\117\056\116" +
    "\057\115\060\113\061\106\001\001\000\002\001\001\000" +
    "\004\043\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\u0102\001\001\000\030\046\377\050\103\051" +
    "\110\052\124\053\122\054\121\055\117\056\116\057\115" +
    "\060\113\061\106\001\001\000\002\001\001\000\004\043" +
    "\u0101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\014\u0106\020\323\021\312\023\317\024" +
    "\325\025\321\026\320\031\327\032\315\041\326\045\247" +
    "\001\001\000\002\001\001\000\026\020\342\021\334\023" +
    "\337\024\344\025\341\026\340\031\346\032\336\041\345" +
    "\045\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\050\u010a\051\110\052\124\053\122\054\121\055\117" +
    "\056\116\057\115\060\113\061\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\050\u010f\051\110\052\124\053\122\054\121\055" +
    "\117\056\116\057\115\060\113\061\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\046\u0125\050\103\051" +
    "\110\052\124\053\122\054\121\055\117\056\116\057\115" +
    "\060\113\061\106\001\001\000\030\012\u0120\050\205\051" +
    "\110\052\124\053\122\054\121\055\117\056\116\057\115" +
    "\060\113\061\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\046\u0131\050\103\051\110\052\124\053\122\054\121" +
    "\055\117\056\116\057\115\060\113\061\106\001\001\000" +
    "\002\001\001\000\030\012\u012b\050\205\051\110\052\124" +
    "\053\122\054\121\055\117\056\116\057\115\060\113\061" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\050\u0135\051\110\052\124\053\122\054\121\055" +
    "\117\056\116\057\115\060\113\061\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\u0139\020\323\021" +
    "\312\023\317\024\325\025\321\026\320\031\327\032\315" +
    "\041\326\045\247\001\001\000\002\001\001\000\026\020" +
    "\342\021\334\023\337\024\344\025\341\026\340\031\346" +
    "\032\336\041\345\045\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\014\u013e\020\323\021\312\023\317" +
    "\024\325\025\321\026\320\031\327\032\315\041\326\045" +
    "\247\001\001\000\002\001\001\000\026\020\342\021\334" +
    "\023\337\024\344\025\341\026\340\031\346\032\336\041" +
    "\345\045\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\u0143\020\323\021\312\023\317\024\325\025" +
    "\321\026\320\031\327\032\315\041\326\045\247\001\001" +
    "\000\002\001\001\000\026\020\342\021\334\023\337\024" +
    "\344\025\341\026\340\031\346\032\336\041\345\045\247" +
    "\001\001\000\002\001\001\000\026\050\u0146\051\110\052" +
    "\124\053\122\054\121\055\117\056\116\057\115\060\113" +
    "\061\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\u0149\030\u014a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\054" +
    "\u014e\055\117\056\116\057\115\060\113\061\106\001\001" +
    "\000\002\001\001\000\030\014\u0150\020\323\021\312\023" +
    "\317\024\325\025\321\026\320\031\327\032\315\041\326" +
    "\045\247\001\001\000\026\020\342\021\334\023\337\024" +
    "\344\025\341\026\340\031\346\032\336\041\345\045\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\054\u0158\055\117\056\116\057\115\060\113\061" +
    "\106\001\001\000\002\001\001\000\030\014\u015a\020\323" +
    "\021\312\023\317\024\325\025\321\026\320\031\327\032" +
    "\315\041\326\045\247\001\001\000\026\020\342\021\334" +
    "\023\337\024\344\025\341\026\340\031\346\032\336\041" +
    "\345\045\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\u0160\020" +
    "\323\021\312\023\317\024\325\025\321\026\320\031\327" +
    "\032\315\041\326\045\247\001\001\000\026\020\342\021" +
    "\334\023\337\024\344\025\341\026\340\031\346\032\336" +
    "\041\345\045\247\001\001\000\002\001\001\000\026\050" +
    "\u0163\051\110\052\124\053\122\054\121\055\117\056\116" +
    "\057\115\060\113\061\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\014\u0167\020\323\021\312\023\317" +
    "\024\325\025\321\026\320\031\327\032\315\041\326\045" +
    "\247\001\001\000\002\001\001\000\026\020\342\021\334" +
    "\023\337\024\344\025\341\026\340\031\346\032\336\041" +
    "\345\045\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\u0170\045\u0172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\u0175\045\u0172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u0184\001\001\000\004\045\u0181\001\001" +
    "\000\004\033\u0182\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\u0188" +
    "\045\237\001\001\000\004\007\u0193\001\001\000\002\001" +
    "\001\000\004\007\u018c\001\001\000\014\015\u0192\022\u0190" +
    "\035\u0191\044\050\045\041\001\001\000\030\014\u018e\020" +
    "\323\021\312\023\317\024\325\025\321\026\320\031\327" +
    "\032\315\041\326\045\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\342\021\334\023\337\024\344" +
    "\025\341\026\340\031\346\032\336\041\345\045\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\u0196\045" +
    "\237\001\001\000\004\007\u0199\001\001\000\002\001\001" +
    "\000\004\007\u0198\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\037\022\052\035\045\036\u019f\044\050\045" +
    "\041\001\001\000\002\001\001\000\014\015\062\022\056" +
    "\035\057\044\050\045\041\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexerJava.next_token(); 
    }


    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerJava lexerJava;
    private SimbolosTerminalesJava simbolosTerminalesJava;
    private TablaSimbolos tablaSimbolos;
    private ArrayList<Clase> clases;
    private ArrayList<Metodo> metodos;
    private ConsoleControl consola;
    private String carpetaFuente;
    private String archivoAnalizado;
    private ArrayList<FilaTablaSymbolos> variablesDetectadas;
    private ArrayList<String> funcionesClase;
    
    public ParserJava (LexerJava lexerJava,TablaSimbolos tablaSimbolos,ArrayList<Clase> clases,ArrayList<Metodo> metodos){ 
        super(lexerJava);
        this.lexerJava=lexerJava;
        this.tablaSimbolos = tablaSimbolos;
        this.metodos = metodos;
        this.clases = clases;
        this.carpetaFuente=this.lexerJava.getCarpetaFunete();
        this.archivoAnalizado=this.lexerJava.getArchivoAnalizado();
        this.consola=this.lexerJava.getConsoleControl();
        this.simbolosTerminalesJava = new SimbolosTerminalesJava();
        this.variablesDetectadas = new ArrayList<>();
        this.funcionesClase = new ArrayList<>();
    }

    public TablaSimbolos getTablaSimbolos(){
        return this.tablaSimbolos;
    }

    public ArrayList<Clase> getClases() {
        return this.clases;
    }

    public ArrayList<Metodo> getMetodos() {
        return this.metodos;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserJavaSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er),carpetaFuente,archivoAnalizado));
                //System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println(tok.getLexema()+" "+er);
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er),carpetaFuente,archivoAnalizado));
                //System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er),carpetaFuente,archivoAnalizado));
            //System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserJavaSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er),carpetaFuente,archivoAnalizado));
            //System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            //System.out.println(tok.getLexema()+" "+er);
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er),carpetaFuente,archivoAnalizado));
            //System.out.println(er);
        }
    }

    private void error_cast(Token operador,String tipo1,String tipo2){
        semantic_error(operador,"No se puede operar un valor: \""+tipo1+"\" con un valor:\""+tipo2+"\"");
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto),carpetaFuente,archivoAnalizado));
    }

    private void error_exprecion(Token ref, Asignacion r, String expected) {
        if(r!=null){
            String tipo = ((r.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r.getTipo());
            String error = "No se puede operar \""+tipo+" "+ref.getLexema()+"\" valores posibles a evaluar con \""+ref.getLexema()+"\" son -> "+expected;
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }

    private void error_exprecionIzquierda(Token ref, Asignacion r, String expected) {
        if(r!=null){
            String tipo = ((r.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r.getTipo());
            String error = "No se puede operar \""+ref.getLexema()+" "+tipo+"\" valores posibles a evaluar con \""+ref.getLexema()+"\" son -> "+expected;
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }

    private void error_exprecion2(Token ref, Asignacion r1,Asignacion r2, String expected) {
        if(r1!=null && r2!=null){
            String tipo1 = ((r1.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r1.getTipo());
            String tipo2 = ((r2.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r2.getTipo());
            String error = "No se puede operar \""+tipo1+" "+ref.getLexema()+" "+tipo2+"\" valores posibles a evaluar con \""+ref.getLexema()+"\" son -> "+expected;
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }   

    private void error_comparacion(Token ref, Asignacion r1,Asignacion r2) {
        if(r1!=null && r2!=null){
            String tipo1 = ((r1.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r1.getTipo());
            String tipo2 = ((r2.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r2.getTipo());
            String error = "No se puede operar \""+tipo1+" "+ref.getLexema()+" "+tipo2+"\" debe evaluar datos del mismo tipo";
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }

    private void error_and_or(Token ref, Asignacion r1,Asignacion r2) {
        if(r1!=null && r2!=null){
            String tipo1 = ((r1.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r1.getTipo());
            String tipo2 = ((r2.getTipo().equals(TablaSimbolos.COMODIN))?"Objeto/Funcion/Variable":r2.getTipo());
            String error = "No se puede operar \""+tipo1+" "+ref.getLexema()+" "+tipo2+"\" debe evaluar datos del tipo booleano";
            this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna(), error),carpetaFuente,archivoAnalizado));
        }
    }

    private void verificarForInit(Token ref, Asignacion asig) {
        if(asig!=null){
            if(!(asig.getTipo().equals(TablaSimbolos.INT)||asig.getTipo().equals(TablaSimbolos.COMODIN))){
                String error = "La asignacion \""+ref.getLexema()+" "+asig.getTipo()+"\" no es valida debe de ser una asignacion entera";
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,"Valor Asignacion for", ref.getLinea(), ref.getColumna()+1, error),carpetaFuente,archivoAnalizado));
            }
        }
    }
    private void verificarExprecionBool(Token ref, Asignacion asig) {
        if(asig!=null){
            if(!(asig.getTipo().equals(TablaSimbolos.BOOLEAN)||asig.getTipo().equals(TablaSimbolos.COMODIN))){
                String error = "El valor del condicional debe ser de tipo boolean valor actual -> "+asig.getTipo();
                this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,"Valor Condicional", ref.getLinea(), ref.getColumna()+1, error),carpetaFuente,archivoAnalizado));
            }
        }
    }

    private void agregarVariablesTabla(String metodo_clase, ArrayList<FilaTablaSymbolos> vars) {
        if(metodo_clase!=null && vars != null){            
            vars.forEach(var -> {
                var.agregarFuncion(metodo_clase);
                tablaSimbolos.getFilas().add(var);
            });
        }
    }

    private void asignarTipoVariable(Asignacion t, ArrayList<FilaTablaSymbolos> vars) {
        if(t!=null && vars!=null){
            for (FilaTablaSymbolos var : vars) {
                if(var!=null){
                    var.setTipo(t.getTipo());
                }
            }
        }
    }

    private void asignarTipoVariableYCargarVariables(Asignacion t, ArrayList<FilaTablaSymbolos> vars) {
        Collections.reverse(vars);
        if(t!=null && vars!=null){
            for (FilaTablaSymbolos var : vars) {
                if(var!=null){
                    var.setTipo(t.getTipo());
                    variablesDetectadas.add(var);
                }
            }
        }
    }

    private void cargarVariables(ArrayList<FilaTablaSymbolos> vars) {
        Collections.reverse(vars);
        if(vars!=null){
            for (FilaTablaSymbolos var : vars) {
                if(var!=null){
                    variablesDetectadas.add(var);
                }
            }
        }
    }

    private void agregarVariablesDetectadas(String metodoFuente) {
        variablesDetectadas.forEach(variablesDetectada -> {
            ArrayList<String> funciones = new ArrayList<>();
            funciones.add(metodoFuente);
            variablesDetectada.setFunciones(funciones);
            tablaSimbolos.getFilas().add(variablesDetectada);
        });
        variablesDetectadas.clear();
    }

    private ArrayList<FilaTablaSymbolos> retornarDosFuentes(ArrayList<FilaTablaSymbolos> vars, ArrayList<FilaTablaSymbolos> vars1) {
        if(vars!=null){
            if(vars1!=null){
                vars1.addAll(vars);
                return vars1;
            }else{
                return vars;
            }
        }else{
            if(vars1!=null){
                return vars1;
            }else{
                return new ArrayList<>();
            }
        }
    }

    private void agregarMetodoEncontrado(Metodo metodo, ArrayList<FilaTablaSymbolos> vars) {
        if(metodo!=null){
            this.getMetodos().add(metodo);
            this.funcionesClase.add(metodo.getNombre());
            //Convertir las variables encontradas de FilaTablasSymbolos a Parametros
            ArrayList<Parametros> p = new ArrayList<>();
            if(vars!=null){
                vars.forEach(var -> {p.add(new Parametros(var.getNombre(), var.getTipo()));});
            }
            metodo.setParametros(p);
        }
        //System.out.println(metodo.toString());
    }

    private void agregarClase(String nombre) {
        if(nombre!=null){
            ArrayList<String> tmpM = new ArrayList<>();
            this.funcionesClase.forEach(string -> {tmpM.add(string);});
            Clase tmp = new Clase(nombre,tmpM);
            this.getClases().add(tmp);
        }
        this.funcionesClase.clear();
    }

    protected int error_sync_size() {
		return 1;
	}

    private Asignacion validarMasMasMenosMenos(Asignacion r,Token ref) {
        Asignacion result = null;
        if(r!=null){
            if(!OperacionCast.validSumarRestar(r)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
                error_exprecion(ref,r,OperacionCast.expectedSumaRestar());
            }else{
                result = new Asignacion(r.getTipo(),r.getClase(),r.isConstante());
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarNegacion(Asignacion r,Token ref){
        Asignacion result = null;
        if(r!=null){
            if(!OperacionCast.validUniariBool(r)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_exprecionIzquierda(ref,r,OperacionCast.expectedUniariBool());
            }else{
                result = new Asignacion(r.getTipo(),r.getClase(),r.isConstante());
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarPositivoNegativo(Asignacion r,Token ref){
        Asignacion result = null;
        if(r!=null){
            if(!OperacionCast.validUniariNegPosi(r)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_exprecionIzquierda(ref,r,OperacionCast.expectedUnariNegPosi());
            }else{
                result = new Asignacion(r.getTipo(),r.getClase(),r.isConstante());
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarMultiDivicion(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newTypeResMulDiv(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_exprecion2(ref,r1,r2,OperacionCast.expectedResMulDiv());
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newTypeResMulDiv(r1,r2),OperacionCast.newTypeResMulDiv(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarSuma(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newTypeSum(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR); 
                error_exprecion2(ref,r1,r2,OperacionCast.expectedSum());
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newTypeSum(r1,r2),OperacionCast.newTypeSum(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarResta(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newTypeResMulDiv(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR); 
                error_exprecion2(ref,r1,r2,OperacionCast.expectedResMulDiv());
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newTypeResMulDiv(r1,r2),OperacionCast.newTypeResMulDiv(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarMenorMayor(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newMayorMenor(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
                error_exprecion2(ref,r1,r2,OperacionCast.expectedResMulDiv());
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newMayorMenor(r1,r2),OperacionCast.newMayorMenor(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarComparaciones(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newComparacion(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_comparacion(ref,r1,r2);
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newComparacion(r1,r2),OperacionCast.newComparacion(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private Asignacion validarAndOr(Asignacion r1,Asignacion r2,Token ref){
        Asignacion result = null;
        if(r1!=null && r2!=null){
            if(OperacionCast.newAndOr(r1,r2).equals(TablaSimbolos.ERROR)){
                result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false); 
                error_and_or(ref,r1,r2);
            }else{
                boolean constante = true;
                if(r1.getTipo().equals(TablaSimbolos.COMODIN)||r1.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                if(r2.getTipo().equals(TablaSimbolos.COMODIN)||r2.getTipo().equals(TablaSimbolos.VARIABLE)){
                    constante = false;
                }
                result = new Asignacion(OperacionCast.newAndOr(r1,r2),OperacionCast.newAndOr(r1,r2),constante);
            }
        }else{
            result = new Asignacion(TablaSimbolos.ERROR,TablaSimbolos.ERROR,false);
        }
        return result;
    }

    private void validarExprecionCase(Asignacion valCase, Token ref) {
        if(valCase!=null){
            String tipo = valCase.getTipo();
            switch(tipo){
                case TablaSimbolos.CHAR:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.STRING:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.INT:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                default:
                    /*DECLARAR ERRORES*/
                    String error = "Error en valor de case, el dato debe ser valor constate de tipo -> [String,char,int]";
                    this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,ref.getLexema(), ref.getLinea(), ref.getColumna()+1, error),carpetaFuente,archivoAnalizado));
            }
        }
    }

    private void validarExprecionSwitch(Asignacion valSwi, Token ref) {
        if(valSwi!=null){
            String tipo = valSwi.getTipo();
            switch(tipo){
                case TablaSimbolos.CHAR:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.STRING:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.INT:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.VARIABLE:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                case TablaSimbolos.COMODIN:
                    /*TIPO DE DATO CORRECTO*/
                    break;
                default:
                    /*DECLARAR ERRORES*/
                    String error = "Error en switch solo se puede procesar datos tipo -> [String,char,int]";
                    this.lexerJava.getErrors().add(consola.addLog(new ErrorAnalisis(ERROR_TYPE_SEM,"switch( -> error )", ref.getLinea(), ref.getColumna()+1, error),carpetaFuente,archivoAnalizado));
            }
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJava$actions {
  private final ParserJava parser;

  /** Constructor */
  CUP$ParserJava$actions(ParserJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJava$do_action_part00000000(
    int                        CUP$ParserJava$act_num,
    java_cup.runtime.lr_parser CUP$ParserJava$parser,
    java.util.Stack            CUP$ParserJava$stack,
    int                        CUP$ParserJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJava$result;

      /* select the action based on the action number */
      switch (CUP$ParserJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initJava ::= initJavaP classJava 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		
                                        //System.out.println("Ejecute class java");
                                    
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("initJava",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initJava EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> start_val = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = start_val;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJava$parser.done_parsing();
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initJava ::= classJava 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		
                                        //System.out.println("Ejecute class java");
                                    
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("initJava",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initJavaP ::= importJavaP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		
                                //System.out.println("Ejecute import");
                            
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("initJavaP",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importJavaP ::= importJavaP importJava 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaP",4, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importJavaP ::= importJava 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaP",4, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importJavaP ::= importJavaP error 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaP",4, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // importJavaP ::= error 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaP",4, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // importJava ::= IMPORT ID importJavaContenido 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJava",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // importJavaContenido ::= PUNTO ID importJavaContenido 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // importJavaContenido ::= PUNTO MUL PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // importJavaContenido ::= PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // visibilidad ::= PRIVATE 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = t;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // visibilidad ::= PUBLIC 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = t;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // visibilidad ::= PROTECTED 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = t;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= INT 
            {
              Asignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new Asignacion(TablaSimbolos.INT,t.getLexema());
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= BOOL 
            {
              Asignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new Asignacion(TablaSimbolos.BOOLEAN,t.getLexema());
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= STR 
            {
              Asignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new Asignacion(TablaSimbolos.STRING,t.getLexema());
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= CHAR 
            {
              Asignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new Asignacion(TablaSimbolos.CHAR,t.getLexema());
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= DOUBLE 
            {
              Asignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new Asignacion(TablaSimbolos.DOUBLE,t.getLexema());
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= OBJ 
            {
              Asignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new Asignacion(TablaSimbolos.OBJECT,t.getLexema());
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= ID 
            {
              Asignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new Asignacion(TablaSimbolos.OBJECT,t.getLexema());
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classJava ::= visibilidad CLASS ID LLA_A contClass LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Token clase = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		
                                                                            agregarClase(clase.getLexema());
                                                                            agregarVariablesTabla("Clase "+clase.getLexema(),vars);
                                                                        
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classJava ::= visibilidad CLASS ID LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token clase = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classJava ::= visibilidad FINAL CLASS ID LLA_A contClass LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Token clase = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		
                                                                                agregarVariablesTabla("Clase "+clase.getLexema(),vars);
                                                                            
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classJava ::= visibilidad FINAL CLASS ID LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token clase = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contClass ::= contClass declararVariables 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contClass ::= contClass constructor 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contClass ::= contClass metodo 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contClass ::= declararVariables 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contClass ::= constructor 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contClass ::= metodo 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contClass ::= contClass error 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contClass ::= error 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // constructor ::= visibilidad ID PA_A parametros PA_C constructorP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int constructorleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int constructorright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token constructor = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		
                                                                                            Metodo tmp = new Metodo(constructor.getLexema(),"Constructor");
                                                                                            agregarMetodoEncontrado(tmp,vars);
                                                                                            cargarVariables(vars);
                                                                                            //agregarVariablesTabla("Constructor "+constructor.getLexema(),retornarDosFuentes(vars,vars1));
                                                                                            agregarVariablesDetectadas("Constructor "+constructor.getLexema());
                                                                                        
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructor",16, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constructor ::= visibilidad ID PA_A PA_C constructorP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int constructorleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int constructorright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Token constructor = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		
                                                                                            Metodo tmp = new Metodo(constructor.getLexema(),"Constructor");
                                                                                            agregarMetodoEncontrado(tmp,new ArrayList<>());
                                                                                            //agregarVariablesTabla("Constructor "+constructor.getLexema(),vars1);
                                                                                            agregarVariablesDetectadas("Constructor "+constructor.getLexema());
                                                                                        
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructor",16, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constructorP ::= LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructorP",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // constructorP ::= LLA_A sentConstru LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructorP",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // constructorP ::= error declararVariables 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructorP",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // constructorP ::= error metodo 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructorP",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // constructorP ::= error constructor 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructorP",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= tipo ID 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new ArrayList<>();RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros ::= tipo ID COMA parametrosP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;if(RESULT!=null){RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= error PA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= error LLA_A 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= error LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametrosP ::= tipo ID COMA parametrosP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;if(RESULT!=null){RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosP",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametrosP ::= tipo ID 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new ArrayList<>();RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getTipo()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosP",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametrosP ::= error PA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosP",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametrosP ::= error LLA_A 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosP",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametrosP ::= error LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosP",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // metodo ::= visibilidad configMetodo PA_A PA_C metodoP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Metodo metodo = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		
                                                                                if(metodo!=null){
                                                                                    agregarMetodoEncontrado(metodo,new ArrayList<>());
                                                                                    //agregarVariablesTabla("Metodo "+metodo.getNombre(),vars);
                                                                                    agregarVariablesDetectadas("Metodo "+metodo.getNombre());
                                                                                }
                                                                            
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",11, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // metodo ::= visibilidad STATIC configMetodo PA_A PA_C metodoP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Metodo metodo = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		
                                                                                    if(metodo!=null){
                                                                                        agregarMetodoEncontrado(metodo,new ArrayList<>());
                                                                                        //agregarVariablesTabla("Metodo "+metodo.getNombre(),vars);
                                                                                        agregarVariablesDetectadas("Metodo "+metodo.getNombre());
                                                                                    }
                                                                                
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",11, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // metodo ::= visibilidad configMetodo PA_A parametros PA_C metodoP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Metodo metodo = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		
                                                                                            if(metodo!=null){
                                                                                                agregarMetodoEncontrado(metodo,vars);
                                                                                                cargarVariables(vars);
                                                                                                //agregarVariablesTabla("Metodo "+metodo.getNombre(),retornarDosFuentes(vars,vars1));
                                                                                                agregarVariablesDetectadas("Metodo "+metodo.getNombre());
                                                                                            }
                                                                                        
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",11, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // metodo ::= visibilidad STATIC configMetodo PA_A parametros PA_C metodoP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Metodo metodo = (Metodo)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		
                                                                                                    if(metodo!=null){
                                                                                                        agregarMetodoEncontrado(metodo,vars);
                                                                                                        cargarVariables(vars);
                                                                                                        //agregarVariablesTabla("Metodo "+metodo.getNombre(),retornarDosFuentes(vars,vars1));
                                                                                                        agregarVariablesDetectadas("Metodo "+metodo.getNombre());
                                                                                                    }
                                                                                                
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",11, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // configMetodo ::= tipo ID 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token metodo = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new Metodo(metodo.getLexema(),t.getTipo());
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("configMetodo",37, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // configMetodo ::= VOID ID 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token metodo = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new Metodo(metodo.getLexema(),TablaSimbolos.VOID);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("configMetodo",37, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // metodoP ::= LLA_A sentencias LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodoP",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // metodoP ::= LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodoP",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // metodoP ::= error declararVariables 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodoP",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // metodoP ::= error constructor 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodoP",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // metodoP ::= error metodo 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodoP",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacionvariables ::= ID EQUAL asig PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("asignacionvariables",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacionvariables ::= THIS PUNTO ID EQUAL asig PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("asignacionvariables",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacionvariables ::= ID SUMAR PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("asignacionvariables",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacionvariables ::= ID RESTAR PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("asignacionvariables",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declararVariables ::= visibilidad STATIC FINAL tipo listaVariables PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		asignarTipoVariable(t,vars);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declararVariables ::= visibilidad FINAL STATIC tipo listaVariables PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		asignarTipoVariable(t,vars);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declararVariables ::= visibilidad STATIC tipo listaVariables PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		asignarTipoVariable(t,vars);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declararVariables ::= visibilidad FINAL tipo listaVariables PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		asignarTipoVariable(t,vars);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declararVariables ::= visibilidad tipo listaVariables PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		asignarTipoVariable(t,vars);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declararVariables ::= tipo listaVariables PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		asignarTipoVariable(t,vars);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listaVariables ::= ID 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaVariables ::= ID EQUAL asig 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listaVariables ::= ID COMA listaVariables2 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // listaVariables ::= ID EQUAL asig COMA listaVariables2 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // listaVariables2 ::= ID EQUAL asig COMA listaVariables2 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // listaVariables2 ::= ID COMA listaVariables2 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // listaVariables2 ::= ID EQUAL asig 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // listaVariables2 ::= ID 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declararVariables2 ::= FINAL tipo listaVariables3 PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		asignarTipoVariableYCargarVariables(t,vars);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables2",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declararVariables2 ::= tipo listaVariables3 PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion t = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		asignarTipoVariableYCargarVariables(t,vars);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables2",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listaVariables3 ::= ID 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables3",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listaVariables3 ::= ID EQUAL asig 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables3",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // listaVariables3 ::= ID COMA listaVariables4 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables3",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // listaVariables3 ::= ID EQUAL asig COMA listaVariables4 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables3",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listaVariables4 ::= ID EQUAL asig COMA listaVariables4 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables4",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listaVariables4 ::= ID COMA listaVariables4 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars; if(RESULT != null){RESULT.add(new FilaTablaSymbolos(var.getLexema()));}
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables4",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listaVariables4 ::= ID EQUAL asig 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables4",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listaVariables4 ::= ID 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables4",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentConstru ::= sentConstru llamadaFuncion 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentConstru ::= sentConstru condicionalif 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentConstru ::= sentConstru ciclowhile 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentConstru ::= sentConstru cicloDoWhile 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentConstru ::= sentConstru condicionalSwitch 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentConstru ::= sentConstru cliclofor 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentConstru ::= sentConstru asignacionvariables 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentConstru ::= sentConstru declararVariables2 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentConstru ::= llamadaFuncion 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentConstru ::= condicionalif 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentConstru ::= ciclowhile 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentConstru ::= cicloDoWhile 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentConstru ::= condicionalSwitch 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentConstru ::= cliclofor 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentConstru ::= asignacionvariables 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentConstru ::= declararVariables2 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentConstru ::= sentConstru error 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentConstru ::= error 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentConstru",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencias ::= sentencias llamadaFuncion 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencias ::= sentencias condicionalif 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencias ::= sentencias ciclowhile 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencias ::= sentencias cicloDoWhile 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencias ::= sentencias condicionalSwitch 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencias ::= sentencias cliclofor 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencias ::= sentencias sentanciaSalida 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencias ::= sentencias asignacionvariables 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencias ::= sentencias declararVariables2 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencias ::= llamadaFuncion 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencias ::= condicionalif 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencias ::= ciclowhile 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencias ::= cicloDoWhile 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencias ::= condicionalSwitch 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencias ::= cliclofor 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencias ::= sentanciaSalida 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencias ::= asignacionvariables 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencias ::= declararVariables2 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencias ::= sentencias error 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencias ::= error 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentanciaSalida ::= RETURN exp PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentanciaSalida",19, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentanciaSalida ::= RETURN PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentanciaSalida",19, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentanciaSalida ::= BREAK PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("sentanciaSalida",19, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // llamadaFuncion ::= ID PA_A PA_C PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // llamadaFuncion ::= ID PA_A parametrosLlamada PA_C PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // llamadaFuncion ::= THIS PUNTO ID PA_A PA_C PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // llamadaFuncion ::= THIS PUNTO ID PA_A parametrosLlamada PA_C PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parametrosLlamada ::= exp 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",8, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parametrosLlamada ::= exp COMA parametrosLlamadaP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",8, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parametrosLlamadaP ::= exp COMA parametrosLlamadaP 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosLlamadaP",7, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parametrosLlamadaP ::= exp 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosLlamadaP",7, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cliclofor ::= FOR PA_A INT ID EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-11)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-11)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).right;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).value;
		int ref2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).left;
		int ref2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).right;
		Token ref2 = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).value;
		verificarForInit(ref,asig);verificarExprecionBool(ref2,e); RESULT = new ArrayList<>(); RESULT.add(new FilaTablaSymbolos(var.getLexema(),t.getLexema()));
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cliclofor",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-13)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cliclofor ::= FOR PA_A INT ID EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A sentencias LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-12)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-12)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-11)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-11)).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-11)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).right;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).value;
		int ref2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).left;
		int ref2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).right;
		Token ref2 = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		verificarForInit(ref,asig); verificarExprecionBool(ref2,e); ArrayList<FilaTablaSymbolos> tmp = new ArrayList<>(); tmp.add(new FilaTablaSymbolos(var.getLexema(),t.getLexema()));  RESULT = retornarDosFuentes(vars,tmp);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cliclofor",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-14)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cliclofor ::= FOR PA_A ID EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).right;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).value;
		int ref2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).left;
		int ref2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).right;
		Token ref2 = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).value;
		verificarForInit(ref,asig);verificarExprecionBool(ref2,e);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cliclofor",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-12)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cliclofor ::= FOR PA_A ID EQUAL exp PUNTOCOMA exp PUNTOCOMA ID agregarfor PA_C LLA_A sentencias LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).right;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).value;
		int ref2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).left;
		int ref2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).right;
		Token ref2 = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		verificarForInit(ref,asig);verificarExprecionBool(ref2,e);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cliclofor",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-13)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // agregarfor ::= SUMAR 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("agregarfor",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // agregarfor ::= RESTAR 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("agregarfor",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // agregarfor ::= EQUAL exp 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("agregarfor",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ciclowhile ::= WHILE PA_A exp PA_C LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		verificarExprecionBool(ref,e);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("ciclowhile",14, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ciclowhile ::= WHILE PA_A exp PA_C LLA_A sentencias LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		verificarExprecionBool(ref,e);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("ciclowhile",14, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // cicloDoWhile ::= DO LLA_A LLA_C WHILE PA_A exp PA_C PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		verificarExprecionBool(ref,e);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",18, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // cicloDoWhile ::= DO LLA_A sentencias LLA_C WHILE PA_A exp PA_C PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		verificarExprecionBool(ref,e);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",18, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // condicionalif ::= IF PA_A exp PA_C LLA_A sentencias LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		verificarExprecionBool(ref,e);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // condicionalif ::= IF PA_A exp PA_C LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		verificarExprecionBool(ref,e);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // condicionalif ::= IF PA_A exp PA_C LLA_A sentencias LLA_C ELSE LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		verificarExprecionBool(ref,e);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // condicionalif ::= IF PA_A exp PA_C LLA_A sentencias LLA_C ELSE LLA_A sentencias LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		verificarExprecionBool(ref,e);RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // condicionalif ::= IF PA_A exp PA_C LLA_A LLA_C ELSE LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).value;
		verificarExprecionBool(ref,e);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // condicionalif ::= IF PA_A exp PA_C LLA_A LLA_C ELSE LLA_A sentencias LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).right;
		Asignacion e = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		verificarExprecionBool(ref,e);RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // condicionalSwitch ::= SWITCH PA_A exp PA_C LLA_A contenidoSwitch LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int valSwileft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int valSwiright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Asignacion valSwi = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = vars;validarExprecionSwitch(valSwi,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalSwitch",23, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // condicionalSwitch ::= SWITCH PA_A exp PA_C LLA_A LLA_C 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int valSwileft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int valSwiright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Asignacion valSwi = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		validarExprecionSwitch(valSwi,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalSwitch",23, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // contenidoSwitch ::= CASE h DOSPUNTOS BREAK PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int valCaseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int valCaseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Asignacion valCase = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		validarExprecionCase(valCase,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",21, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // contenidoSwitch ::= CASE h DOSPUNTOS sentencias BREAK PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int valCaseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int valCaseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Asignacion valCase = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		RESULT = vars;validarExprecionCase(valCase,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",21, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // contenidoSwitch ::= contenidoSwitch2 DEFAULT DOSPUNTOS sentencias 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = retornarDosFuentes(vars,vars1);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",21, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // contenidoSwitch ::= contenidoSwitch2 DEFAULT DOSPUNTOS 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		RESULT = vars;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",21, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // contenidoSwitch ::= contenidoSwitch2 CASE h DOSPUNTOS sentencias BREAK PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int valCaseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int valCaseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Asignacion valCase = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		RESULT = retornarDosFuentes(vars,vars1);validarExprecionCase(valCase,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",21, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // contenidoSwitch ::= contenidoSwitch2 CASE h DOSPUNTOS BREAK PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int valCaseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int valCaseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Asignacion valCase = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		RESULT = vars;validarExprecionCase(valCase,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",21, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // contenidoSwitch ::= error CASE 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",21, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // contenidoSwitch2 ::= contenidoSwitch2 CASE h DOSPUNTOS sentencias BREAK PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int vars1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).left;
		int vars1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).right;
		ArrayList<FilaTablaSymbolos> vars1 = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int valCaseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int valCaseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Asignacion valCase = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		RESULT = retornarDosFuentes(vars,vars1);validarExprecionCase(valCase,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // contenidoSwitch2 ::= contenidoSwitch2 CASE h DOSPUNTOS BREAK PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int valCaseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int valCaseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Asignacion valCase = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		RESULT = vars;validarExprecionCase(valCase,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // contenidoSwitch2 ::= CASE h DOSPUNTOS sentencias BREAK PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)).value;
		int valCaseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int valCaseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Asignacion valCase = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		ArrayList<FilaTablaSymbolos> vars = (ArrayList<FilaTablaSymbolos>)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		RESULT = vars;validarExprecionCase(valCase,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // contenidoSwitch2 ::= CASE h DOSPUNTOS BREAK PUNTOCOMA 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)).value;
		int valCaseleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).left;
		int valCaseright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).right;
		Asignacion valCase = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)).value;
		validarExprecionCase(valCase,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // contenidoSwitch2 ::= error CASE 
            {
              ArrayList<FilaTablaSymbolos> RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // asig ::= exp 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("asig",36, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // asig ::= NEW OBJ PA_A PA_C 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.OBJECT,TablaSimbolos.OBJECT);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("asig",36, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // exp ::= exp OR t 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarAndOr(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // exp ::= t 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // exp ::= exp error 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // exp ::= error 
            {
              Asignacion RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // t ::= t AND f 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarAndOr(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("t",39, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // t ::= f 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("t",39, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // f ::= f IGUAL g 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarComparaciones(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",40, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // f ::= f DIFERENTE g 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarComparaciones(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",40, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // f ::= g 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",40, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // g ::= g MENOR_QUE h 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarMenorMayor(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("g",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // g ::= g MAYOR_QUE h 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarMenorMayor(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("g",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // g ::= g MAYOR_IGUAL h 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarMenorMayor(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("g",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // g ::= g MENOR_IGUAL h 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarMenorMayor(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("g",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // g ::= h 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("g",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // h ::= h MAS i 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarSuma(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("h",42, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // h ::= h MENOS i 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarResta(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("h",42, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // h ::= i 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("h",42, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // i ::= i MUL j 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarMultiDivicion(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("i",43, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // i ::= i DIV j 
            {
              Asignacion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).right;
		Asignacion r1 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r2 = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarMultiDivicion(r1,r2,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("i",43, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // i ::= j 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("i",43, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // j ::= NOT k 
            {
              Asignacion RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarNegacion(r,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("j",44, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // j ::= MENOS k 
            {
              Asignacion RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarPositivoNegativo(r,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("j",44, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // j ::= MAS k 
            {
              Asignacion RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT = validarPositivoNegativo(r,ref);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("j",44, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // j ::= k 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("j",44, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // k ::= l SUMAR 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		
                            RESULT = validarMasMasMenosMenos(r,ref);
                        
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("k",45, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // k ::= l RESTAR 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Token ref = (Token)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		
                            RESULT = validarMasMasMenosMenos(r,ref);
                        
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("k",45, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // k ::= l 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("k",45, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // l ::= ID 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.VARIABLE, TablaSimbolos.VARIABLE,false);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // l ::= THIS PUNTO ID 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.VARIABLE, TablaSimbolos.VARIABLE,false);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // l ::= llamadaFuncionExp 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.peek()).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // l ::= TRUE 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.BOOLEAN, TablaSimbolos.BOOLEAN,true);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // l ::= FALSE 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.BOOLEAN, TablaSimbolos.BOOLEAN,true);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // l ::= DECIMAL 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.DOUBLE, TablaSimbolos.DOUBLE,true);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // l ::= ENTERO 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.INT, TablaSimbolos.INT,true);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // l ::= STRING 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.STRING, TablaSimbolos.STRING,true);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // l ::= CHAR_VAL 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.CHAR, TablaSimbolos.CHAR,true);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // l ::= PA_A exp PA_C 
            {
              Asignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Asignacion r = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT=r;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("l",46, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // llamadaFuncionExp ::= ID PA_A PA_C 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.COMODIN, TablaSimbolos.COMODIN,false);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncionExp",47, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // llamadaFuncionExp ::= ID PA_A parametrosLlamada PA_C 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.COMODIN, TablaSimbolos.COMODIN,false);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncionExp",47, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // llamadaFuncionExp ::= THIS PUNTO ID PA_A PA_C 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.COMODIN, TablaSimbolos.COMODIN,false);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncionExp",47, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // llamadaFuncionExp ::= THIS PUNTO ID PA_A parametrosLlamada PA_C 
            {
              Asignacion RESULT =null;
		RESULT = new Asignacion(TablaSimbolos.COMODIN, TablaSimbolos.COMODIN,false);
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncionExp",47, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJava$do_action(
    int                        CUP$ParserJava$act_num,
    java_cup.runtime.lr_parser CUP$ParserJava$parser,
    java.util.Stack            CUP$ParserJava$stack,
    int                        CUP$ParserJava$top)
    throws java.lang.Exception
    {
              return CUP$ParserJava$do_action_part00000000(
                               CUP$ParserJava$act_num,
                               CUP$ParserJava$parser,
                               CUP$ParserJava$stack,
                               CUP$ParserJava$top);
    }
}

}
