// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: JAVA/LexerJava.jflex

package com.cresb49.server.AnalizadorJava;
import java.util.ArrayList;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerJava implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENTARIO = 4;
  public static final int COMENT_MULTI = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\3\u1f00\1\u4000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u1f00\1\u4900\1\u1f00\1\u4a00\1\u4b00\2\u1f00\3\u0100\1\u4c00"+
    "\1\u4d00\1\u4e00\12\u1f00\4\u0100\1\u4f00\17\u1f00\2\u0100\1\u5000"+
    "\41\u1f00\2\u0100\1\u5100\1\u5200\3\u1f00\1\u5300\27\u0100\1\u5400"+
    "\2\u0100\1\u5500\45\u1f00\1\u0100\1\u5600\1\u5700\11\u1f00\1\u5800"+
    "\24\u1f00\1\u5900\1\u5a00\1\u1f00\1\u5b00\1\u5c00\1\u5d00\1\u5e00"+
    "\2\u1f00\1\u5f00\5\u1f00\1\u6000\7\u1f00\1\u6100\1\u6200\4\u1f00"+
    "\1\u6300\21\u1f00\246\u0100\1\u6400\20\u0100\1\u6500\1\u6600\25\u0100"+
    "\1\u6700\34\u0100\1\u6800\14\u1f00\2\u0100\1\u6900\u0b05\u1f00\1\u6a00"+
    "\1\u6b00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\3\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\12\21\1\22\1\23\1\24\1\25\1\26\2\3\16\7"+
    "\1\27\3\7\1\30\7\7\1\31\1\32\1\33\1\3"+
    "\1\7\1\3\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\7\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\3\7\1\62\1\63\1\64\1\3\41\0\2\3"+
    "\4\7\4\3\1\7\2\3\1\0\7\3\1\7\4\3"+
    "\1\7\5\3\27\7\1\3\37\7\1\3\u01ca\7\4\3"+
    "\14\7\16\3\5\7\7\3\1\7\1\3\1\7\21\3"+
    "\160\0\5\7\1\3\2\7\2\3\4\7\1\3\1\7"+
    "\6\3\1\7\1\3\3\7\1\3\1\7\1\3\24\7"+
    "\1\3\123\7\1\3\213\7\1\3\5\0\2\3\246\7"+
    "\1\3\46\7\2\3\1\7\7\3\47\7\7\3\1\7"+
    "\1\3\55\0\1\3\1\0\1\3\2\0\1\3\2\0"+
    "\1\3\1\0\10\3\33\7\5\3\3\7\15\3\6\0"+
    "\5\3\1\7\4\3\13\0\1\3\1\0\3\3\53\7"+
    "\37\0\4\3\2\7\1\0\143\7\1\3\1\7\10\0"+
    "\1\3\6\0\2\7\2\0\1\3\4\0\2\7\12\0"+
    "\3\7\2\3\1\7\17\3\1\0\1\7\1\0\36\7"+
    "\33\0\2\3\131\7\13\0\1\7\16\3\12\0\41\7"+
    "\11\0\2\7\4\3\1\7\5\3\26\7\4\0\1\7"+
    "\11\0\1\7\3\0\1\7\5\0\22\3\31\7\3\0"+
    "\4\3\13\7\65\3\25\7\1\3\10\7\26\3\60\0"+
    "\66\7\3\0\1\7\22\0\1\7\7\0\12\7\2\0"+
    "\2\3\12\0\1\3\20\7\3\0\1\3\10\7\2\3"+
    "\2\7\2\3\26\7\1\3\7\7\1\3\1\7\3\3"+
    "\4\7\2\3\1\0\1\7\7\0\2\3\2\0\2\3"+
    "\3\0\1\7\10\3\1\0\4\3\2\7\1\3\3\7"+
    "\2\0\2\3\12\0\4\7\7\3\2\7\4\3\3\0"+
    "\1\3\6\7\4\3\2\7\2\3\26\7\1\3\7\7"+
    "\1\3\2\7\1\3\2\7\1\3\2\7\2\3\1\0"+
    "\1\3\5\0\4\3\2\0\2\3\3\0\3\3\1\0"+
    "\7\3\4\7\1\3\1\7\7\3\14\0\3\7\1\0"+
    "\13\3\3\0\1\3\11\7\1\3\3\7\1\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\5\7\2\3\1\0"+
    "\1\7\10\0\1\3\3\0\1\3\3\0\2\3\1\7"+
    "\17\3\2\7\2\0\2\3\12\0\1\3\1\7\7\3"+
    "\1\7\6\0\1\3\3\0\1\3\10\7\2\3\2\7"+
    "\2\3\26\7\1\3\7\7\1\3\2\7\1\3\5\7"+
    "\2\3\1\0\1\7\7\0\2\3\2\0\2\3\3\0"+
    "\10\3\2\0\4\3\2\7\1\3\3\7\2\0\2\3"+
    "\12\0\1\3\1\7\20\3\1\0\1\7\1\3\6\7"+
    "\3\3\3\7\1\3\4\7\3\3\2\7\1\3\1\7"+
    "\1\3\2\7\3\3\2\7\3\3\3\7\3\3\14\7"+
    "\4\3\5\0\3\3\3\0\1\3\4\0\2\3\1\7"+
    "\6\3\1\0\16\3\12\0\11\3\1\7\6\3\4\0"+
    "\1\3\10\7\1\3\3\7\1\3\27\7\1\3\20\7"+
    "\3\3\1\7\7\0\1\3\3\0\1\3\4\0\7\3"+
    "\2\0\1\3\3\7\5\3\2\7\2\0\2\3\12\0"+
    "\20\3\1\7\3\0\1\3\10\7\1\3\3\7\1\3"+
    "\27\7\1\3\12\7\1\3\5\7\2\3\1\0\1\7"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\7\3"+
    "\1\7\1\3\2\7\2\0\2\3\12\0\1\3\2\7"+
    "\15\3\4\0\1\3\10\7\1\3\3\7\1\3\51\7"+
    "\2\0\1\7\7\0\1\3\3\0\1\3\4\0\1\7"+
    "\5\3\3\7\1\0\7\3\3\7\2\0\2\3\12\0"+
    "\12\3\6\7\2\3\2\0\1\3\22\7\3\3\30\7"+
    "\1\3\11\7\1\3\1\7\2\3\7\7\3\3\1\0"+
    "\4\3\6\0\1\3\1\0\1\3\10\0\6\3\12\0"+
    "\2\3\2\0\15\3\60\7\1\0\2\7\7\0\4\3"+
    "\10\7\10\0\1\3\12\0\47\3\2\7\1\3\1\7"+
    "\2\3\2\7\1\3\1\7\2\3\1\7\6\3\4\7"+
    "\1\3\7\7\1\3\3\7\1\3\1\7\1\3\1\7"+
    "\2\3\2\7\1\3\4\7\1\0\2\7\6\0\1\3"+
    "\2\0\1\7\2\3\5\7\1\3\1\7\1\3\6\0"+
    "\2\3\12\0\2\3\4\7\40\3\1\7\27\3\2\0"+
    "\6\3\12\0\13\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\2\0\10\7\1\3\44\7\4\3\24\0\1\3"+
    "\2\0\5\7\13\0\1\3\44\0\11\3\1\0\71\3"+
    "\53\7\24\0\1\7\12\0\6\3\6\7\4\0\4\7"+
    "\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7"+
    "\14\0\1\7\17\0\2\3\46\7\1\3\1\7\5\3"+
    "\1\7\2\3\53\7\1\3\115\7\1\3\4\7\2\3"+
    "\7\7\1\3\1\7\1\3\4\7\2\3\51\7\1\3"+
    "\4\7\2\3\41\7\1\3\4\7\2\3\7\7\1\3"+
    "\1\7\1\3\4\7\2\3\17\7\1\3\71\7\1\3"+
    "\4\7\2\3\103\7\2\3\3\0\40\3\20\7\20\3"+
    "\126\7\2\3\6\7\3\3\u016c\7\2\3\21\7\1\3"+
    "\32\7\5\3\113\7\3\3\13\7\7\3\15\7\1\3"+
    "\4\7\3\0\13\3\22\7\3\0\13\3\22\7\2\0"+
    "\14\3\15\7\1\3\3\7\1\3\2\0\14\3\64\7"+
    "\40\0\3\3\1\7\3\3\2\7\1\0\2\3\12\0"+
    "\41\3\4\0\1\3\12\0\6\3\130\7\10\3\5\7"+
    "\2\0\42\7\1\0\1\7\5\3\106\7\12\3\37\7"+
    "\1\3\14\0\4\3\14\0\12\3\12\0\36\7\2\3"+
    "\5\7\13\3\54\7\4\3\32\7\6\3\12\0\46\3"+
    "\27\7\5\0\4\3\65\7\12\0\1\3\35\0\2\3"+
    "\13\0\6\3\12\0\15\3\1\7\10\3\16\0\102\3"+
    "\5\0\57\7\21\0\7\7\4\3\12\0\21\3\11\0"+
    "\14\3\3\0\36\7\15\0\2\7\12\0\54\7\16\0"+
    "\14\3\44\7\24\0\10\3\12\0\3\3\3\7\12\0"+
    "\44\7\2\3\11\7\107\3\3\0\1\3\25\0\4\7"+
    "\1\0\4\7\3\0\2\7\3\0\6\3\300\7\72\0"+
    "\1\3\5\0\26\7\2\3\6\7\2\3\46\7\2\3"+
    "\6\7\2\3\10\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\37\7\2\3\65\7\1\3\7\7\1\3"+
    "\1\7\3\3\3\7\1\3\7\7\3\3\4\7\2\3"+
    "\6\7\4\3\15\7\5\3\3\7\1\3\7\7\16\3"+
    "\5\0\32\3\5\0\20\3\2\7\23\3\1\7\13\3"+
    "\5\0\1\3\12\0\1\3\1\7\15\3\1\7\20\3"+
    "\15\7\3\3\40\7\20\3\15\0\4\3\1\0\3\3"+
    "\14\0\21\3\1\7\4\3\1\7\2\3\12\7\1\3"+
    "\1\7\3\3\5\7\6\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\4\7\1\3\13\7\2\3\4\7\5\3"+
    "\5\7\4\3\1\7\21\3\51\7\u0177\3\57\7\1\3"+
    "\57\7\1\3\205\7\6\3\4\7\3\0\2\7\14\3"+
    "\46\7\1\3\1\7\5\3\1\7\2\3\70\7\7\3"+
    "\1\7\17\3\1\0\27\7\11\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\7\7\1\3\40\0\57\3\1\7"+
    "\325\3\3\7\31\3\11\7\6\0\1\3\5\7\2\3"+
    "\5\7\4\3\126\7\2\3\2\0\2\3\3\7\1\3"+
    "\132\7\1\3\4\7\5\3\52\7\2\3\136\7\21\3"+
    "\33\7\65\3\306\7\112\3\353\7\25\3\215\7\103\3"+
    "\56\7\2\3\15\7\3\3\20\7\12\0\2\7\24\3"+
    "\57\7\1\0\4\3\12\0\1\3\37\7\2\0\120\7"+
    "\2\0\45\3\11\7\2\3\147\7\2\3\44\7\1\3"+
    "\10\7\77\3\13\7\1\0\3\7\1\0\4\7\1\0"+
    "\27\7\5\0\20\3\1\7\7\3\64\7\14\3\2\0"+
    "\62\7\22\0\12\3\12\0\6\3\22\0\6\7\3\3"+
    "\1\7\1\3\1\7\2\3\12\0\34\7\10\0\2\3"+
    "\27\7\15\0\14\3\35\7\3\3\4\0\57\7\16\0"+
    "\16\3\1\7\12\0\6\3\5\7\1\0\12\7\12\0"+
    "\5\7\1\3\51\7\16\0\11\3\3\7\1\0\10\7"+
    "\2\0\2\3\12\0\6\3\27\7\3\3\1\7\3\0"+
    "\62\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0"+
    "\1\7\1\0\1\7\30\3\3\7\2\3\13\7\5\0"+
    "\2\3\3\7\2\0\12\3\6\7\2\3\6\7\2\3"+
    "\6\7\11\3\7\7\1\3\7\7\1\3\53\7\1\3"+
    "\12\7\12\3\163\7\10\0\1\3\2\0\2\3\12\0"+
    "\6\3\244\7\14\3\27\7\4\3\61\7\4\3\156\7"+
    "\2\3\152\7\46\3\7\7\14\3\5\7\5\3\1\7"+
    "\1\0\12\7\1\3\15\7\1\3\5\7\1\3\1\7"+
    "\1\3\2\7\1\3\2\7\1\3\154\7\41\3\153\7"+
    "\22\3\100\7\2\3\66\7\50\3\15\7\3\3\20\0"+
    "\20\3\20\0\3\3\2\7\30\3\3\7\31\3\1\7"+
    "\6\3\5\7\1\3\207\7\2\3\1\0\4\3\1\7"+
    "\13\3\12\0\7\3\32\7\4\3\1\7\1\3\32\7"+
    "\13\3\131\7\3\3\6\7\2\3\6\7\2\3\6\7"+
    "\2\3\3\7\3\3\2\7\3\3\2\7\22\3\3\0"+
    "\4\3\14\7\1\3\32\7\1\3\23\7\1\3\2\7"+
    "\1\3\17\7\2\3\16\7\42\3\173\7\105\3\65\7"+
    "\210\3\1\0\202\3\35\7\3\3\61\7\17\3\1\0"+
    "\37\3\40\7\15\3\36\7\5\3\46\7\5\0\5\3"+
    "\36\7\2\3\44\7\4\3\10\7\1\3\5\7\52\3"+
    "\236\7\2\3\12\0\6\3\44\7\4\3\44\7\4\3"+
    "\50\7\10\3\64\7\234\3\67\7\11\3\26\7\12\3"+
    "\10\7\230\3\6\7\2\3\1\7\1\3\54\7\1\3"+
    "\2\7\3\3\1\7\2\3\27\7\12\3\27\7\11\3"+
    "\37\7\101\3\23\7\1\3\2\7\12\3\26\7\12\3"+
    "\32\7\106\3\70\7\6\3\2\7\100\3\1\7\3\0"+
    "\1\3\2\0\5\3\4\0\4\7\1\3\3\7\1\3"+
    "\33\7\4\3\3\0\4\3\1\0\40\3\35\7\3\3"+
    "\35\7\43\3\10\7\1\3\34\7\2\0\31\3\66\7"+
    "\12\3\26\7\12\3\23\7\15\3\22\7\156\3\111\7"+
    "\67\3\63\7\15\3\63\7\15\3\3\0\65\7\17\0"+
    "\37\3\12\0\17\3\4\0\55\7\13\0\2\3\1\0"+
    "\22\3\31\7\7\3\12\0\6\3\3\0\44\7\16\0"+
    "\1\3\12\0\20\3\43\7\1\0\2\3\1\7\11\3"+
    "\3\0\60\7\16\0\4\7\5\3\3\0\3\3\12\0"+
    "\1\7\1\3\1\7\43\3\22\7\1\3\31\7\14\0"+
    "\6\3\1\0\101\3\7\7\1\3\1\7\1\3\4\7"+
    "\1\3\17\7\1\3\12\7\7\3\57\7\14\0\5\3"+
    "\12\0\6\3\4\0\1\3\10\7\2\3\2\7\2\3"+
    "\26\7\1\3\7\7\1\3\2\7\1\3\5\7\2\3"+
    "\1\0\1\7\7\0\2\3\2\0\2\3\3\0\2\3"+
    "\1\7\6\3\1\0\5\3\5\7\2\0\2\3\7\0"+
    "\3\3\5\0\213\3\65\7\22\0\4\7\5\3\12\0"+
    "\46\3\60\7\24\0\2\7\1\3\1\7\10\3\12\0"+
    "\246\3\57\7\7\0\2\3\11\0\27\3\4\7\2\0"+
    "\42\3\60\7\21\0\3\3\1\7\13\3\12\0\46\3"+
    "\53\7\15\0\10\3\12\0\66\3\32\7\3\3\17\0"+
    "\4\3\12\0\u0166\3\100\7\12\0\25\3\2\7\12\0"+
    "\50\7\7\0\1\7\4\0\10\3\1\0\10\3\1\7"+
    "\13\0\50\7\2\3\4\7\20\0\46\3\71\7\7\3"+
    "\11\7\1\3\45\7\10\0\1\3\10\0\1\7\17\3"+
    "\12\0\30\3\36\7\2\3\26\0\1\3\16\0\111\3"+
    "\7\7\1\3\2\7\1\3\46\7\6\0\3\3\1\0"+
    "\1\3\2\0\1\3\7\0\1\7\1\0\10\3\12\0"+
    "\246\3\232\7\146\3\157\7\21\3\304\7\274\3\57\7"+
    "\321\3\107\7\271\3\71\7\7\3\37\7\1\3\12\0"+
    "\146\3\36\7\2\3\5\0\13\3\60\7\7\0\11\3"+
    "\4\7\14\3\12\0\11\3\25\7\5\3\23\7\160\3"+
    "\105\7\13\3\1\7\56\0\20\3\4\0\15\7\100\3"+
    "\2\7\36\3\355\7\23\3\363\7\15\3\37\7\121\3"+
    "\u018c\7\4\3\153\7\5\3\15\7\3\3\11\7\7\3"+
    "\12\7\3\3\2\0\1\3\4\0\301\3\5\0\3\3"+
    "\26\0\2\3\7\0\36\3\4\0\224\3\3\0\273\3"+
    "\125\7\1\3\107\7\1\3\2\7\2\3\1\7\2\3"+
    "\2\7\2\3\4\7\1\3\14\7\1\3\1\7\1\3"+
    "\7\7\1\3\101\7\1\3\4\7\2\3\10\7\1\3"+
    "\7\7\1\3\34\7\1\3\4\7\1\3\5\7\1\3"+
    "\1\7\3\3\7\7\1\3\u0154\7\2\3\31\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\10\7\2\3\151\0\4\3\62\0\10\3"+
    "\1\0\16\3\1\0\26\3\5\0\1\3\17\0\120\3"+
    "\7\0\1\3\21\0\2\3\7\0\1\3\2\0\1\3"+
    "\5\0\325\3\305\7\13\3\7\0\51\3\104\7\7\0"+
    "\5\3\12\0\246\3\4\7\1\3\33\7\1\3\2\7"+
    "\1\3\1\7\2\3\1\7\1\3\12\7\1\3\4\7"+
    "\1\3\1\7\1\3\1\7\6\3\1\7\4\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\3\7\1\3\2\7"+
    "\1\3\1\7\2\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\2\7\1\3\1\7"+
    "\2\3\4\7\1\3\7\7\1\3\4\7\1\3\4\7"+
    "\1\3\1\7\1\3\12\7\1\3\21\7\5\3\3\7"+
    "\1\3\5\7\1\3\21\7\104\3\327\7\51\3\65\7"+
    "\13\3\336\7\2\3\u0182\7\16\3\u0131\7\37\3\36\7"+
    "\343\3\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\5\1\24\1\25"+
    "\14\5\1\26\1\1\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\36\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\0\1\46\1\47\1\50\10\5"+
    "\1\51\4\5\1\52\12\5\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\14\5\1\62\1\5\1\63\1\64"+
    "\14\5\1\65\1\66\3\5\1\67\11\5\1\70\4\5"+
    "\1\71\1\72\2\5\1\73\1\74\7\5\1\75\1\76"+
    "\1\77\2\5\1\100\1\101\2\5\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\2\5\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\324\0\u0109\0\u013e"+
    "\0\324\0\u0173\0\u01a8\0\324\0\324\0\324\0\u01dd\0\324"+
    "\0\u0212\0\324\0\u0247\0\u027c\0\324\0\324\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\324\0\324\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\324\0\u0636\0\324\0\u066b\0\324\0\u06a0\0\u06d5"+
    "\0\324\0\324\0\u070a\0\324\0\u073f\0\324\0\324\0\324"+
    "\0\324\0\324\0\324\0\u0774\0\324\0\324\0\324\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0173\0\u0a5a\0\u0a8f\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\324"+
    "\0\324\0\324\0\324\0\324\0\324\0\u0774\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0173\0\u0ee8\0\u0173\0\u0173\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u0173\0\u0173\0\u1199\0\u11ce\0\u1203\0\u0173"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u0173\0\u1415\0\u144a\0\u147f\0\u14b4\0\u0173\0\u0173"+
    "\0\u14e9\0\u151e\0\u0173\0\u0173\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\u0173\0\u0173\0\u0173\0\u16c6\0\u16fb"+
    "\0\u0173\0\u0173\0\u1730\0\u1765\0\u0173\0\u0173\0\u0173\0\u0173"+
    "\0\u0173\0\u0173\0\u0173\0\u179a\0\u17cf\0\u0173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\5\1\35\1\12\1\36\1\37\1\40\1\41"+
    "\1\42\2\12\1\43\4\12\1\44\1\12\1\45\1\46"+
    "\1\47\1\50\2\12\1\51\1\52\1\53\1\54\2\55"+
    "\1\5\1\55\1\5\1\55\1\56\23\55\1\57\32\55"+
    "\2\60\1\61\3\60\1\62\56\60\6\63\1\64\4\63"+
    "\1\65\51\63\67\0\1\6\107\0\1\66\37\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\26\12"+
    "\13\0\1\67\70\0\1\70\66\0\1\71\61\0\1\72"+
    "\4\0\1\73\63\0\1\74\1\0\1\24\70\0\1\75"+
    "\64\0\1\76\64\0\1\77\37\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\1\12\1\100\24\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\22\12\1\101\3\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\16\12\1\102\1\12"+
    "\1\103\5\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\1\104\6\12\1\105\3\12\1\106"+
    "\12\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\4\12\1\107\11\12\1\110\7\12\3\0"+
    "\1\12\6\0\1\12\11\0\1\12\5\0\2\12\3\0"+
    "\13\12\1\111\12\12\3\0\1\12\6\0\1\12\11\0"+
    "\1\12\5\0\2\12\3\0\1\112\7\12\1\113\5\12"+
    "\1\114\7\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\5\12\1\115\6\12\1\116\1\117"+
    "\10\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\4\12\1\120\21\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\20\12\1\121"+
    "\2\12\1\122\2\12\3\0\1\12\6\0\1\12\11\0"+
    "\1\12\5\0\2\12\3\0\4\12\1\123\21\12\3\0"+
    "\1\12\6\0\1\12\11\0\1\12\5\0\2\12\3\0"+
    "\22\12\1\124\2\12\1\125\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\20\12\1\126\5\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\7\12\1\127\16\12\66\0\1\130\1\0\2\55"+
    "\1\0\1\55\1\0\1\55\1\0\23\55\1\0\32\55"+
    "\6\0\1\131\42\0\1\132\2\0\1\133\1\0\1\134"+
    "\6\0\2\60\1\0\3\60\1\0\56\60\6\63\1\0"+
    "\4\63\1\0\51\63\20\0\1\135\65\0\1\136\43\0"+
    "\1\12\6\0\1\12\11\0\1\12\5\0\2\12\3\0"+
    "\11\12\1\137\14\12\3\0\1\12\6\0\1\12\11\0"+
    "\1\12\5\0\2\12\3\0\20\12\1\140\5\12\3\0"+
    "\1\12\6\0\1\12\11\0\1\12\5\0\2\12\3\0"+
    "\16\12\1\141\7\12\3\0\1\12\6\0\1\12\11\0"+
    "\1\12\5\0\2\12\3\0\4\12\1\142\21\12\3\0"+
    "\1\12\6\0\1\12\11\0\1\12\5\0\2\12\3\0"+
    "\21\12\1\143\4\12\3\0\1\12\6\0\1\12\11\0"+
    "\1\12\5\0\2\12\3\0\1\144\25\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\1\145"+
    "\25\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\5\12\1\146\20\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\23\12\1\147"+
    "\2\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\21\12\1\150\4\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\13\12\1\151"+
    "\12\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\15\12\1\152\10\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\20\12\1\153"+
    "\5\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\17\12\1\154\6\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\22\12\1\155"+
    "\3\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\25\12\1\156\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\10\12\1\157\5\12"+
    "\1\160\7\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\1\12\1\161\24\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\22\12"+
    "\1\162\3\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\1\163\25\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\10\12\1\164"+
    "\15\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\23\12\1\165\2\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\10\12\1\166"+
    "\15\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\4\12\1\167\21\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\10\12\1\170"+
    "\15\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\13\12\1\171\12\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\1\172\25\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\4\12\1\173\21\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\20\12\1\174\5\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\21\12\1\175\4\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\1\176\25\12\3\0"+
    "\1\12\6\0\1\12\11\0\1\12\5\0\2\12\3\0"+
    "\1\12\1\177\24\12\3\0\1\12\6\0\1\12\11\0"+
    "\1\12\5\0\2\12\3\0\4\12\1\200\21\12\3\0"+
    "\1\12\6\0\1\12\11\0\1\12\5\0\2\12\3\0"+
    "\21\12\1\201\4\12\3\0\1\12\6\0\1\12\11\0"+
    "\1\12\5\0\2\12\3\0\1\202\25\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\16\12"+
    "\1\203\7\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\24\12\1\204\1\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\22\12"+
    "\1\205\3\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\13\12\1\206\12\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\23\12"+
    "\1\207\2\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\22\12\1\210\3\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\22\12"+
    "\1\211\3\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\4\12\1\212\21\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\13\12"+
    "\1\213\12\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\2\12\1\214\23\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\15\12"+
    "\1\215\10\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\4\12\1\216\21\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\12\12"+
    "\1\217\13\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\21\12\1\220\4\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\23\12"+
    "\1\221\2\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\13\12\1\222\12\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\4\12"+
    "\1\223\21\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\13\12\1\224\12\12\3\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\2\12\3\0\20\12"+
    "\1\225\5\12\3\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\2\12\3\0\1\226\25\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\4\12\1\227"+
    "\21\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\10\12\1\230\15\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\20\12\1\231"+
    "\5\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\10\12\1\232\15\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\2\12\1\233"+
    "\23\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\4\12\1\234\21\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\22\12\1\235"+
    "\3\12\3\0\1\12\6\0\1\12\11\0\1\12\5\0"+
    "\2\12\3\0\6\12\1\236\17\12\3\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\2\12\3\0\1\237\25\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\13\12\1\240\12\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\4\12\1\241\21\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\22\12\1\242\3\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\22\12\1\243\3\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\2\12\1\244\23\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\2\12\1\245\23\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\15\12\1\246\10\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\2\12\1\247\23\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\7\12\1\250\16\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\15\12\1\251\10\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\22\12\1\252\3\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\4\12\1\253\21\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\22\12\1\254\3\12\3\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\2\12\3\0\4\12\1\255\21\12"+
    "\3\0\1\12\6\0\1\12\11\0\1\12\5\0\2\12"+
    "\3\0\3\12\1\256\22\12\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6148];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\2\1\1\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\2\1\2\11\5\1\2\11\14\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\6\11\1\0\3\11\30\1\6\11\121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private static final String ERROR_TYPE = "Léxico";
    private Token anterior;
    private Token actual; 

    private int stringColumnInit = 0; 
    private StringBuffer string = new StringBuffer();
    private StringBuffer coment_simple = new StringBuffer();
    private StringBuffer coment_multi = new StringBuffer();
    private ArrayList<ErrorAnalisis> errors;

    public void setErrors(ArrayList<ErrorAnalisis> errors) {
        this.errors = errors;
    }

    public ArrayList<ErrorAnalisis> getErrors() {
        return errors;
    }

    private void addError(ErrorAnalisis error){
        this.errors.add(error);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerJava(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     this.actual = new Token(yytext(),null,yyline+1,yycolumn+1,null,this.anterior);
    this.anterior = this.actual;
    return new java_cup.runtime.Symbol(ParserJavaSym.EOF,yyline+1,yycolumn+1,this.actual);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { String des ="El simbolo/cadena no existe en el lenguaje";
                        this.addError(new ErrorAnalisis(this.ERROR_TYPE,yytext(),(yyline+1),(yycolumn+1),des));
                        //System.out.println("Simbolo Ilegal: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 74: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 75: break;
          case 3:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.NOT,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("! : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 76: break;
          case 4:
            { this.stringColumnInit = (yycolumn+1);
                        this.string.setLength(0); 
                        yybegin(STRING);
            }
            // fall through
          case 77: break;
          case 5:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        //System.out.println("Identificador: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
                        return new Symbol(ParserJavaSym.ID,yyline+1,yycolumn+1,this.actual);
            }
            // fall through
          case 78: break;
          case 6:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.PA_A,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("(: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 79: break;
          case 7:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.PA_C,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("): "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 80: break;
          case 8:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.MUL,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("*: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 81: break;
          case 9:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.MAS,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("+: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 82: break;
          case 10:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.COMA,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(",: "+yytext()+" , Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 83: break;
          case 11:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.MENOS,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("-: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 84: break;
          case 12:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.PUNTO,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(".: "+yytext()+" , Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 85: break;
          case 13:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.DIV,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("/: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 86: break;
          case 14:
            { this.actual = new Token(yytext(),new Integer(yytext()),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.ENTERO,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("Numero: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 87: break;
          case 15:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.DOSPUNTOS,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(":-> "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 88: break;
          case 16:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.PUNTOCOMA,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(";-> "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 89: break;
          case 17:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.MENOR_QUE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("< : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 90: break;
          case 18:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.EQUAL,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("== : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 91: break;
          case 19:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.MAYOR_QUE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("> : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 92: break;
          case 20:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.CO_A,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("[: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 93: break;
          case 21:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.CO_C,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("]: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 94: break;
          case 22:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.LLA_A,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("{: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 95: break;
          case 23:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.LLA_C,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("}: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 96: break;
          case 24:
            { string.append( yytext());
            }
            // fall through
          case 97: break;
          case 25:
            { yybegin(YYINITIAL);
                                        this.actual = new Token(string.toString(),string.toString(),yyline+1,yycolumn+1,null,this.anterior);
                                        this.anterior = this.actual;
                                        //System.out.println(string.toString());
                                        return new Symbol(ParserJavaSym.STRING,yyline+1,yycolumn+1,this.actual);
            }
            // fall through
          case 98: break;
          case 26:
            { string.append('\\');
            }
            // fall through
          case 99: break;
          case 27:
            { coment_simple.append(yytext());
            }
            // fall through
          case 100: break;
          case 28:
            { yybegin(YYINITIAL);
                                        System.out.println("Comentario: "+coment_simple.toString());
            }
            // fall through
          case 101: break;
          case 29:
            { coment_simple.append("”");
            }
            // fall through
          case 102: break;
          case 30:
            { coment_multi.append(yytext());
            }
            // fall through
          case 103: break;
          case 31:
            { coment_multi.append("”");
            }
            // fall through
          case 104: break;
          case 32:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.DIFERENTE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("!= : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 105: break;
          case 33:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.AND,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("&& : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 106: break;
          case 34:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.SUMAR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("++ : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 107: break;
          case 35:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.RESTAR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("-- : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 108: break;
          case 36:
            { yybegin(COMENT_MULTI);
                        this.coment_multi.setLength(0);
            }
            // fall through
          case 109: break;
          case 37:
            { yybegin(COMENTARIO);
                        this.coment_simple.setLength(0);
            }
            // fall through
          case 110: break;
          case 38:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.MENOR_IGUAL,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("<= : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 111: break;
          case 39:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.IGUAL,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("== : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 112: break;
          case 40:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.MAYOR_IGUAL,yyline+1,yycolumn+1,this.actual);
                        //System.out.println(">= : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 113: break;
          case 41:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.DO,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("do: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 114: break;
          case 42:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.IF,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("if: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 115: break;
          case 43:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.OR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("|| : "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 116: break;
          case 44:
            { string.append('\"');
            }
            // fall through
          case 117: break;
          case 45:
            { string.append('\n');
            }
            // fall through
          case 118: break;
          case 46:
            { string.append('\r');
            }
            // fall through
          case 119: break;
          case 47:
            { string.append('\t');
            }
            // fall through
          case 120: break;
          case 48:
            { yybegin(YYINITIAL);
                                        System.out.println("Comentario: "+coment_multi.toString());
            }
            // fall through
          case 121: break;
          case 49:
            { this.actual = new Token(yytext(),new Double(yytext()),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.DECIMAL,yyline+1,yycolumn+1,this.actual);
                        ////System.out.println("Decimal: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 122: break;
          case 50:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.FOR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("for: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 123: break;
          case 51:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.INT,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("int: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 124: break;
          case 52:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.NEW,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("import: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 125: break;
          case 53:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.CASE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("case: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 126: break;
          case 54:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.CHAR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("char: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 127: break;
          case 55:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.ELSE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("else: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 128: break;
          case 56:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.TRUE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("import: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 129: break;
          case 57:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.BREAK,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("break: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 130: break;
          case 58:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.CLASS,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("case: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 131: break;
          case 59:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.FALSE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("import: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 132: break;
          case 60:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.FINAL,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("final: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 133: break;
          case 61:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.WHILE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("while: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 134: break;
          case 62:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.OBJ,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("Object: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 135: break;
          case 63:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.STR,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("String: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 136: break;
          case 64:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.DOUBLE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("double: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 137: break;
          case 65:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.IMPORT,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("import: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 138: break;
          case 66:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.PUBLIC,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("public: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 139: break;
          case 67:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.RETURN,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("return: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 140: break;
          case 68:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.STATIC,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("import: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 141: break;
          case 69:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.SWITCH,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("switch: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 142: break;
          case 70:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.BOOL,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("boolean: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 143: break;
          case 71:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.DEFAULT,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("import: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 144: break;
          case 72:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.PRIVATE,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("private: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 145: break;
          case 73:
            { this.actual = new Token(yytext(),yytext(),yyline+1,yycolumn+1,null,this.anterior);
                        this.anterior = this.actual;
                        return new Symbol(ParserJavaSym.PROTECTED,yyline+1,yycolumn+1,this.actual);
                        //System.out.println("protected: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
