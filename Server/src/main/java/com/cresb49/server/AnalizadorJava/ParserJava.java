
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cresb49.server.AnalizadorJava;

import com.cresb49.server.AnalizadorJava.obj.FilaTabla;
import com.cresb49.server.AnalizadorJava.obj.TablaSimbolos;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserJavaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\006\004\000\002\006\003\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\003\000\002\005\004\000\002" +
    "\005\004\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\013\010\000\002\013\007\000\002\013\011\000\002" +
    "\013\010\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\027\011\000\002\027\010\000\002\007\004\000" +
    "\002\007\006\000\002\010\006\000\002\010\004\000\002" +
    "\017\010\000\002\017\011\000\002\011\005\000\002\011" +
    "\004\000\002\040\010\000\002\040\007\000\002\040\007" +
    "\000\002\040\006\000\002\040\005\000\002\041\003\000" +
    "\002\041\005\000\002\041\005\000\002\041\007\000\002" +
    "\042\007\000\002\042\005\000\002\042\005\000\002\042" +
    "\003\000\002\037\006\000\002\037\006\000\002\030\022" +
    "\000\002\030\023\000\002\024\010\000\002\024\011\000" +
    "\002\031\012\000\002\031\013\000\002\026\011\000\002" +
    "\026\010\000\002\026\014\000\002\026\015\000\002\026" +
    "\013\000\002\026\014\000\002\035\011\000\002\035\010" +
    "\000\002\033\007\000\002\033\010\000\002\033\006\000" +
    "\002\033\005\000\002\033\011\000\002\033\010\000\002" +
    "\034\011\000\002\034\010\000\002\034\010\000\002\034" +
    "\007\000\002\050\004\000\002\050\003\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\003\000\002\047\005\000\002\047\005\000\002" +
    "\047\003\000\002\051\005\000\002\051\003\000\002\052" +
    "\005\000\002\052\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\005\000\002\021\003\000\002\021\003\000\002" +
    "\021\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\045\005\000\002\045\005\000\002\045\003\000" +
    "\002\043\005\000\002\043\005\000\002\043\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\006\003\005\004\004\001\002\000\004\030" +
    "\172\001\002\000\006\060\170\063\171\001\002\000\016" +
    "\002\uffff\003\005\004\004\005\uffff\006\uffff\007\uffff\001" +
    "\002\000\012\002\015\005\014\006\016\007\012\001\002" +
    "\000\016\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\001\002\000\006\010\020\065\017\001\002\000\024" +
    "\010\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\065\ufff2\072\ufff2\001\002\000\012\002\001\005\001" +
    "\006\001\007\001\001\002\000\006\010\ufff3\065\ufff3\001" +
    "\002\000\004\002\000\001\002\000\024\010\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\065\ufff4\072" +
    "\ufff4\001\002\000\004\030\162\001\002\000\004\065\021" +
    "\001\002\000\004\030\022\001\002\000\004\056\023\001" +
    "\002\000\026\005\027\006\016\007\012\013\024\014\025" +
    "\015\030\016\040\017\033\020\041\057\035\001\002\000" +
    "\004\030\ufff1\001\002\000\004\030\ufff0\001\002\000\026" +
    "\005\027\006\016\007\012\013\024\014\025\015\030\016" +
    "\040\017\033\020\041\057\160\001\002\000\024\010\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\030" +
    "\145\072\ufff3\001\002\000\004\030\uffef\001\002\000\026" +
    "\005\uffe3\006\uffe3\007\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\057\uffe3\001\002\000\022\010\105" +
    "\013\024\014\025\015\030\016\040\017\033\020\041\072" +
    "\103\001\002\000\004\030\uffed\001\002\000\026\005\uffe4" +
    "\006\uffe4\007\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\057\uffe4\001\002\000\012\002\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\001\002\000\004\030\043\001\002\000" +
    "\026\005\uffe2\006\uffe2\007\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\057\uffe2\001\002\000\004\030" +
    "\uffee\001\002\000\004\030\uffec\001\002\000\004\063\102" +
    "\001\002\000\010\061\044\063\uffd2\066\045\001\002\000" +
    "\004\030\067\001\002\000\014\030\046\031\052\032\055" +
    "\052\053\064\047\001\002\000\020\046\uff8d\047\uff8d\050" +
    "\uff8d\051\uff8d\053\uff8d\061\uff8d\063\uff8d\001\002\000\020" +
    "\046\uff8a\047\uff8a\050\uff8a\051\uff8a\053\uff8a\061\uff8a\063" +
    "\uff8a\001\002\000\020\046\062\047\063\050\uff91\051\uff91" +
    "\053\uff91\061\uff91\063\uff91\001\002\000\020\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\053\uff8e\061\uff8e\063\uff8e\001\002" +
    "\000\020\046\uff8c\047\uff8c\050\uff8c\051\uff8c\053\uff8c\061" +
    "\uff8c\063\uff8c\001\002\000\014\030\046\031\052\032\055" +
    "\052\053\064\047\001\002\000\012\050\057\051\060\061" +
    "\056\063\uffd1\001\002\000\020\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\053\uff8b\061\uff8b\063\uff8b\001\002\000\004\030" +
    "\067\001\002\000\014\030\046\031\052\032\055\052\053" +
    "\064\047\001\002\000\014\030\046\031\052\032\055\052" +
    "\053\064\047\001\002\000\020\046\062\047\063\050\uff92" +
    "\051\uff92\053\uff92\061\uff92\063\uff92\001\002\000\014\030" +
    "\046\031\052\032\055\052\053\064\047\001\002\000\014" +
    "\030\046\031\052\032\055\052\053\064\047\001\002\000" +
    "\020\046\uff8f\047\uff8f\050\uff8f\051\uff8f\053\uff8f\061\uff8f" +
    "\063\uff8f\001\002\000\020\046\uff90\047\uff90\050\uff90\051" +
    "\uff90\053\uff90\061\uff90\063\uff90\001\002\000\020\046\062" +
    "\047\063\050\uff93\051\uff93\053\uff93\061\uff93\063\uff93\001" +
    "\002\000\010\061\071\063\uffcb\066\072\001\002\000\004" +
    "\063\uffcf\001\002\000\004\030\067\001\002\000\014\030" +
    "\046\031\052\032\055\052\053\064\047\001\002\000\012" +
    "\050\057\051\060\061\074\063\uffcc\001\002\000\004\030" +
    "\067\001\002\000\004\063\uffce\001\002\000\004\063\uffcd" +
    "\001\002\000\010\050\057\051\060\053\100\001\002\000" +
    "\020\046\uff89\047\uff89\050\uff89\051\uff89\053\uff89\061\uff89" +
    "\063\uff89\001\002\000\004\063\uffd0\001\002\000\026\005" +
    "\uffd3\006\uffd3\007\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\057\uffd3\001\002\000\020\010\137\013" +
    "\024\014\025\015\030\016\040\017\033\020\041\001\002" +
    "\000\004\030\112\001\002\000\016\013\024\014\025\015" +
    "\030\016\040\017\033\020\041\001\002\000\004\030\043" +
    "\001\002\000\004\063\110\001\002\000\026\005\uffd5\006" +
    "\uffd5\007\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\057\uffd5\001\002\000\004\063\135\001\002\000" +
    "\012\052\113\061\044\063\uffd2\066\045\001\002\000\020" +
    "\013\024\014\025\015\030\016\040\017\033\020\041\053" +
    "\114\001\002\000\004\056\120\001\002\000\004\030\125" +
    "\001\002\000\004\053\117\001\002\000\004\056\120\001" +
    "\002\000\004\057\123\001\002\000\026\005\uffda\006\uffda" +
    "\007\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\057\uffda\001\002\000\004\057\124\001\002\000\026" +
    "\005\uffd8\006\uffd8\007\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\057\uffd8\001\002\000\026\005\uffd9" +
    "\006\uffd9\007\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\057\uffd9\001\002\000\006\053\uffdf\061\126" +
    "\001\002\000\016\013\024\014\025\015\030\016\040\017" +
    "\033\020\041\001\002\000\004\053\uffde\001\002\000\004" +
    "\030\131\001\002\000\006\053\uffdc\061\132\001\002\000" +
    "\016\013\024\014\025\015\030\016\040\017\033\020\041" +
    "\001\002\000\004\053\uffdd\001\002\000\026\005\uffdb\006" +
    "\uffdb\007\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\057\uffdb\001\002\000\026\005\uffd4\006\uffd4\007" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\057\uffd4\001\002\000\004\030\043\001\002\000\016\013" +
    "\024\014\025\015\030\016\040\017\033\020\041\001\002" +
    "\000\004\030\043\001\002\000\004\063\142\001\002\000" +
    "\026\005\uffd7\006\uffd7\007\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\057\uffd7\001\002\000\004\063" +
    "\144\001\002\000\026\005\uffd6\006\uffd6\007\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\057\uffd6\001" +
    "\002\000\004\052\146\001\002\000\020\013\024\014\025" +
    "\015\030\016\040\017\033\020\041\053\147\001\002\000" +
    "\004\056\154\001\002\000\004\053\151\001\002\000\004" +
    "\056\152\001\002\000\004\057\153\001\002\000\026\005" +
    "\uffe1\006\uffe1\007\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\057\uffe1\001\002\000\004\057\155\001" +
    "\002\000\026\005\uffe0\006\uffe0\007\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\057\uffe0\001\002\000" +
    "\026\005\uffe6\006\uffe6\007\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\057\uffe6\001\002\000\026\005" +
    "\uffe7\006\uffe7\007\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\057\uffe7\001\002\000\012\002\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\001\002\000\026\005\uffe5\006\uffe5" +
    "\007\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\057\uffe5\001\002\000\004\056\163\001\002\000\026" +
    "\005\027\006\016\007\012\013\024\014\025\015\030\016" +
    "\040\017\033\020\041\057\165\001\002\000\026\005\027" +
    "\006\016\007\012\013\024\014\025\015\030\016\040\017" +
    "\033\020\041\057\166\001\002\000\012\002\uffea\005\uffea" +
    "\006\uffea\007\uffea\001\002\000\012\002\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\001\002\000\016\002\ufffe\003\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\001\002\000\016\002\ufffb\003" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\001\002\000\016" +
    "\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\001" +
    "\002\000\010\003\175\060\174\063\176\001\002\000\016" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\001" +
    "\002\000\006\030\201\046\202\001\002\000\006\060\177" +
    "\063\200\001\002\000\016\002\ufff7\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\001\002\000\016\002\ufff6\003\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\001\002\000\016\002" +
    "\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\001\002" +
    "\000\010\003\175\060\174\063\176\001\002\000\004\063" +
    "\203\001\002\000\016\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\001\002\000\016\002\ufff9\003\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\010\002\006\004\007\006\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\166\001\001" +
    "\000\006\013\012\014\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\025\014\031\016\035\017\036\027\030\040" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\031\016\035\017\160\027\155\040\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\100\001\001\000\010\043\047" +
    "\044\050\045\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\047\044\050\045\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\067\001\001\000\006" +
    "\043\065\044\050\001\001\000\006\043\060\044\050\001" +
    "\001\000\002\001\001\000\004\044\064\001\001\000\004" +
    "\044\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\075\001\001\000\010\043\047\044\050\045\072\001" +
    "\001\000\002\001\001\000\004\042\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\135" +
    "\001\001\000\004\041\110\001\001\000\004\016\105\001" +
    "\001\000\004\041\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\115\016\114\001\001\000\004\011\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\120\001\001\000" +
    "\004\020\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\126\016\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\132\016\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\142\001\001\000\004\016\137\001\001\000" +
    "\004\041\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\147\016\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\163\014\031\016\035\017\036" +
    "\027\030\040\033\001\001\000\014\014\031\016\035\017" +
    "\160\027\155\040\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexerJava.next_token(); 
    }


    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerJava lexerJava;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;
    private SimbolosTerminalesJava simbolosTerminalesJava;
    private TablaSimbolos tablaSimbolos;
    
    public ParserJava (LexerJava lexerJava){ 
        super(lexerJava);
        this.lexerJava=lexerJava;
        this.simbolosTerminalesJava = new SimbolosTerminalesJava();
    }

    public void setTablasimbolos(TablaSimbolos tablaSimbolos){
        this.tablaSimbolos = tablaSimbolos;
    }

    public TablaSimbolos getTablaSimbolos(){
        return this.tablaSimbolos;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserJavaSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                //System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println(tok.getLexema()+" "+er);
                this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                //System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserJavaSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesJava.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            //System.out.println(tok.getLexema()+" "+er);
            this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            //System.out.println(er);
        }
    }


    private void verificar_def_var(Token token,String tipo) {
       FilaTabla fila = tablaSimbolos.buscar(token.getLexema());
        if(fila==null){
            tablaSimbolos.getFilas().add(new FilaTabla(token.getLexema(),tipo,null));
        }else{
            semantic_error(token,"La variable ya a sido definida con anterioridad");
        }
    }

    private void asig_val_var(Token identificador,String tipo,Object value) {
       FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila==null){
            semantic_error(identificador,"La variable a la que le quiere asignar valor no esta definida");
        }else{
            if(fila.getTipo().equals(tipo)){
              fila.setValor(value);
            }else{
                semantic_error(identificador,"La variable es de tipo: \""+fila.getTipo()+"\", no puede asignar un \""+tipo+"\"");
            }
        }
    }

    private void create_var_asig_val(Token identificador,String tipo_id,String tipo_value,Object value) {
       FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila==null){
            if(tipo_id.equals(tipo_value)){
                tablaSimbolos.getFilas().add(new FilaTabla(identificador.getLexema(),tipo_id,value));
            }else{
                semantic_error(identificador,"La variable es de tipo: \""+tipo_id+"\", no puede asignar un \""+tipo_value+"\"");
            }
        }else{
            semantic_error(identificador,"La variable ya a sido definida con anterioridad");
            //semantic_error(identificador,"El valor que se desea dar a la variable de de tipo \"\" y la variable es de tipo \"\"");
        }
    }

    private void error_cast(Token operador,String tipo1,String tipo2){
        semantic_error(operador,"No se puede operar un valor: \""+tipo1+"\" con un valor:\""+tipo2+"\"");
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerJava.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJava$actions {
  private final ParserJava parser;

  /** Constructor */
  CUP$ParserJava$actions(ParserJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJava$do_action_part00000000(
    int                        CUP$ParserJava$act_num,
    java_cup.runtime.lr_parser CUP$ParserJava$parser,
    java.util.Stack            CUP$ParserJava$stack,
    int                        CUP$ParserJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJava$result;

      /* select the action based on the action number */
      switch (CUP$ParserJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initJava ::= initJava classJava 
            {
              Object RESULT =null;
		
                                        System.out.println("Ejecute class java");
                                    
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("initJava",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initJava EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = start_val;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJava$parser.done_parsing();
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initJava ::= importJavaP 
            {
              Object RESULT =null;
		
                                        System.out.println("Ejecute import");
                                    
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("initJava",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // importJavaP ::= importJavaP importJava 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaP",4, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importJavaP ::= importJava 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaP",4, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importJava ::= IMPORT ID importJavaContenido 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJava",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importJava ::= error PUNTO 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJava",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // importJava ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJava",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // importJavaContenido ::= PUNTO ID importJavaContenido 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // importJavaContenido ::= PUNTO MUL PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // importJavaContenido ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // importJavaContenido ::= error PUNTO 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // importJavaContenido ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // visibilidad ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= STR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= OBJ 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classJava ::= visibilidad CLASS ID LLA_A contClass LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classJava ::= visibilidad CLASS ID LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classJava ::= visibilidad FINAL CLASS ID LLA_A contClass LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classJava ::= visibilidad FINAL CLASS ID LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contClass ::= contClass declararVariables 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contClass ::= contClass constructor 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contClass ::= contClass metodo 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contClass ::= declararVariables 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contClass ::= constructor 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contClass ::= metodo 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contClass",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constructor ::= PUBLIC ID PA_A parametros PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constructor ::= PUBLIC ID PA_A PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros ::= tipo ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros ::= tipo ID COMA parametrosP 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametrosP ::= tipo ID COMA parametrosP 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosP",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametrosP ::= tipo ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("parametrosP",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // metodo ::= visibilidad tipo ID PA_A PA_C metodoP 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // metodo ::= visibilidad tipo ID PA_A parametros PA_C metodoP 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // metodoP ::= LLA_A sentencias2 LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodoP",7, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // metodoP ::= LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodoP",7, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declararVariables ::= visibilidad STATIC FINAL tipo listaVariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declararVariables ::= visibilidad STATIC tipo listaVariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declararVariables ::= visibilidad FINAL tipo listaVariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declararVariables ::= visibilidad tipo listaVariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declararVariables ::= tipo listaVariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listaVariables ::= ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listaVariables ::= ID EQUAL exp 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaVariables ::= ID COMA listaVariables2 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listaVariables ::= ID EQUAL exp COMA listaVariables2 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listaVariables2 ::= ID EQUAL exp COMA listaVariables2 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listaVariables2 ::= ID COMA listaVariables2 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listaVariables2 ::= ID EQUAL exp 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaVariables2 ::= ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // llamadaFuncion ::= ID PA_A PA_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // llamadaFuncion ::= ID PA_A PA_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cliclofor ::= FOR PA_A PA_C INT ID EQUAL exp PUNTOCOMA ID operadorRelacional exp PUNTOCOMA ID agregarfor LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cliclofor",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-15)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cliclofor ::= FOR PA_A PA_C INT ID EQUAL exp PUNTOCOMA ID operadorRelacional exp PUNTOCOMA ID agregarfor LLA_A sentenciasfor LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cliclofor",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-16)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ciclowhile ::= WHILE PA_A expBool PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("ciclowhile",18, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ciclowhile ::= WHILE PA_A expBool PA_C LLA_A sentenciasWhile LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("ciclowhile",18, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cicloDoWhile ::= DO LLA_A LLA_C WHILE PA_A expBool PA_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",23, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cicloDoWhile ::= DO LLA_A sentenciasWhile LLA_C WHILE PA_A expBool PA_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",23, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicionalif ::= IF PA_A expBool PA_C LLA_A sentanciasif LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicionalif ::= IF PA_A expBool PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicionalif ::= IF PA_A expBool PA_C LLA_A sentanciasif LLA_C ELSE LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicionalif ::= IF PA_A expBool PA_C LLA_A sentanciasif LLA_C ELSE LLA_A sentanciasif LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicionalif ::= IF PA_A expBool PA_C LLA_A LLA_C ELSE LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicionalif ::= IF PA_A expBool PA_C LLA_A LLA_C ELSE LLA_A sentanciasif LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicionalSwitch ::= SWITCH PA_A exp PA_C LLA_A contenidoSwitch LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalSwitch",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicionalSwitch ::= SWITCH PA_A exp PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalSwitch",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // contenidoSwitch ::= CASE exp DOSPUNTOS BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // contenidoSwitch ::= CASE exp DOSPUNTOS sentenciasSwitch BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // contenidoSwitch ::= contenidoSwitch2 DEFAULT DOSPUNTOS sentenciasSwitch 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // contenidoSwitch ::= contenidoSwitch2 DEFAULT DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // contenidoSwitch ::= contenidoSwitch2 CASE exp DOSPUNTOS sentenciasSwitch BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // contenidoSwitch ::= contenidoSwitch2 CASE exp DOSPUNTOS BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",25, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // contenidoSwitch2 ::= contenidoSwitch2 CASE exp DOSPUNTOS sentenciasSwitch BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // contenidoSwitch2 ::= contenidoSwitch2 CASE exp DOSPUNTOS BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // contenidoSwitch2 ::= CASE exp DOSPUNTOS sentenciasSwitch BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // contenidoSwitch2 ::= CASE exp DOSPUNTOS BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expBool ::= NOT expBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("expBool",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expBool ::= tBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("expBool",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tBool ::= tBool MENOR_QUE fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",36, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tBool ::= tBool MAYOR_QUE fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",36, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tBool ::= tBool MENOR_IGUAL fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",36, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tBool ::= tBool MAYOR_QUE fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",36, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tBool ::= fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",36, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fBool ::= fBool DIFERENTE eBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("fBool",37, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fBool ::= fBool IGUAL eBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("fBool",37, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fBool ::= eBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("fBool",37, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // eBool ::= eBool AND gBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("eBool",39, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // eBool ::= gBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("eBool",39, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // gBool ::= gBool OR hBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("gBool",40, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // gBool ::= hBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("gBool",40, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // hBool ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // hBool ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // hBool ::= ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // hBool ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // hBool ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // hBool ::= PA_A expBool PA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",41, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // agregarfor ::= SUMAR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("agregarfor",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // agregarfor ::= RESTAR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("agregarfor",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // agregarfor ::= EQUAL exp 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("agregarfor",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorRelacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadorRelacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exp ::= exp MAS t 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exp ::= exp MENOS t 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp ::= t 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // t ::= t MUL f 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("t",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // t ::= t DIV f 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("t",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // t ::= f 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("t",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // f ::= ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // f ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // f ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // f ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // f ::= PA_A exp PA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJava$do_action(
    int                        CUP$ParserJava$act_num,
    java_cup.runtime.lr_parser CUP$ParserJava$parser,
    java.util.Stack            CUP$ParserJava$stack,
    int                        CUP$ParserJava$top)
    throws java.lang.Exception
    {
              return CUP$ParserJava$do_action_part00000000(
                               CUP$ParserJava$act_num,
                               CUP$ParserJava$parser,
                               CUP$ParserJava$stack,
                               CUP$ParserJava$top);
    }
}

}
