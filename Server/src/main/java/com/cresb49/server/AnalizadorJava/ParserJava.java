
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cresb49.server.AnalizadorJava;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserJavaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\004\000\002\004\004\000\002\005\003" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\006\004\000\002\007\003\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\010\010\000\002\010\007\000\002" +
    "\010\011\000\002\010\010\000\002\014\011\000\002\014" +
    "\012\000\002\014\015\000\002\014\014\000\002\035\010" +
    "\000\002\035\007\000\002\035\007\000\002\035\006\000" +
    "\002\036\003\000\002\036\005\000\002\036\005\000\002" +
    "\036\007\000\002\037\007\000\002\037\005\000\002\037" +
    "\005\000\002\037\003\000\002\034\006\000\002\034\006" +
    "\000\002\024\010\000\002\025\022\000\002\025\023\000" +
    "\002\021\010\000\002\021\011\000\002\026\012\000\002" +
    "\026\013\000\002\023\011\000\002\023\010\000\002\023" +
    "\014\000\002\023\015\000\002\023\013\000\002\023\014" +
    "\000\002\032\011\000\002\032\010\000\002\030\007\000" +
    "\002\030\010\000\002\030\006\000\002\030\005\000\002" +
    "\030\011\000\002\030\010\000\002\031\011\000\002\031" +
    "\010\000\002\031\010\000\002\031\007\000\002\045\004" +
    "\000\002\045\003\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\003\000\002" +
    "\044\005\000\002\044\005\000\002\044\003\000\002\046" +
    "\005\000\002\046\003\000\002\047\005\000\002\047\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\042\005\000" +
    "\002\042\005\000\002\042\003\000\002\040\005\000\002" +
    "\040\005\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\010\005\007\006\011\007\005\001\002\000" +
    "\006\010\014\065\013\001\002\000\006\010\ufff1\065\ufff1" +
    "\001\002\000\004\002\001\001\002\000\006\010\ufff2\065" +
    "\ufff2\001\002\000\004\002\012\001\002\000\006\010\ufff3" +
    "\065\ufff3\001\002\000\004\002\000\001\002\000\004\030" +
    "\023\001\002\000\004\065\015\001\002\000\004\030\016" +
    "\001\002\000\004\052\017\001\002\000\004\053\021\001" +
    "\002\000\004\053\022\001\002\000\004\002\uffe7\001\002" +
    "\000\004\002\uffe8\001\002\000\004\052\024\001\002\000" +
    "\004\053\026\001\002\000\004\053\027\001\002\000\004" +
    "\002\uffe9\001\002\000\004\002\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\010\002\007\010\005\011\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexerDef.next_token(); 
    }


    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";

    private LexerDef lexerDef;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;
    private SimbolosTerminalesDef simbolosTerminalesDef;
    private TablaSimbolos tablaSimbolos;
    private ReporteJson reporteJson;
    
    public ParserDef (LexerDef lexerDef){ 
        super(lexerDef);
        this.lexerDef=lexerDef;
        this.tablaSimbolos = new TablaSimbolos();
        this.simbolosTerminalesDef = new SimbolosTerminalesDef();
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserDefSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println("FIN ARCHIVO"+" "+er);
                this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                //System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
                //System.out.println(tok.getLexema()+" "+er);
                this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                //System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserDefSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            //System.out.println("FIN ARCHIVO"+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            //System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminalesDef.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            //System.out.println(tok.getLexema()+" "+er);
            this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            //System.out.println(er);
        }
    }


    private void verificar_def_var(Token token,String tipo) {
       FilaTabla fila = tablaSimbolos.buscar(token.getLexema());
        if(fila==null){
            tablaSimbolos.getFilas().add(new FilaTabla(token.getLexema(),tipo,null));
        }else{
            semantic_error(token,"La variable ya a sido definida con anterioridad");
        }
    }

    private void asig_val_var(Token identificador,String tipo,Object value) {
       FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila==null){
            semantic_error(identificador,"La variable a la que le quiere asignar valor no esta definida");
        }else{
            if(fila.getTipo().equals(tipo)){
              fila.setValor(value);
            }else{
                semantic_error(identificador,"La variable es de tipo: \""+fila.getTipo()+"\", no puede asignar un \""+tipo+"\"");
            }
        }
    }

    private void create_var_asig_val(Token identificador,String tipo_id,String tipo_value,Object value) {
       FilaTabla fila = tablaSimbolos.buscar(identificador.getLexema());
        if(fila==null){
            if(tipo_id.equals(tipo_value)){
                tablaSimbolos.getFilas().add(new FilaTabla(identificador.getLexema(),tipo_id,value));
            }else{
                semantic_error(identificador,"La variable es de tipo: \""+tipo_id+"\", no puede asignar un \""+tipo_value+"\"");
            }
        }else{
            semantic_error(identificador,"La variable ya a sido definida con anterioridad");
            //semantic_error(identificador,"El valor que se desea dar a la variable de de tipo \"\" y la variable es de tipo \"\"");
        }
    }

    private void error_cast(Token operador,String tipo1,String tipo2){
        semantic_error(operador,"No se puede operar un valor: \""+tipo1+"\" con un valor:\""+tipo2+"\"");
    }

    private void semantic_error(Token token,String contexto) {
        this.lexerDef.getErrors().add(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    public TablaSimbolos getTablaSimbolos() {
        return tablaSimbolos;
    }

    protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJava$actions {
  private final ParserJava parser;

  /** Constructor */
  CUP$ParserJava$actions(ParserJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJava$do_action_part00000000(
    int                        CUP$ParserJava$act_num,
    java_cup.runtime.lr_parser CUP$ParserJava$parser,
    java.util.Stack            CUP$ParserJava$stack,
    int                        CUP$ParserJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJava$result;

      /* select the action based on the action number */
      switch (CUP$ParserJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initJava ::= classJava 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("initJava",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initJava EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = start_val;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJava$parser.done_parsing();
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // importJava ::= importJava IMPORT importJavaContenido 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJava",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // importJava ::= IMPORT importJavaContenido 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJava",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importJava ::= importJava error 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJava",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importJavaContenido ::= importJavaContenidoD 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importJavaContenido ::= ID PUNTO importJavaContenidoD 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // importJavaContenido ::= error PUNTO 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // importJavaContenido ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenido",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // importJavaContenidoD ::= ID importJavaContenidoD2 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenidoD",4, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // importJavaContenidoD2 ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenidoD2",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // importJavaContenidoD2 ::= PUNTOCOMA MUL PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenidoD2",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // importJavaContenidoD2 ::= PUNTOCOMA importJavaContenidoD 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenidoD2",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // importJavaContenidoD2 ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("importJavaContenidoD2",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",7, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",7, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // visibilidad ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",7, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= STR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= OBJ 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classJava ::= visibilidad CLASS ID PA_A sentencias PA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classJava ::= visibilidad CLASS ID PA_A PA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classJava ::= visibilidad FINAL CLASS ID PA_A sentencias PA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classJava ::= visibilidad FINAL CLASS ID PA_A PA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("classJava",6, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // metodo ::= visibilidad tipo ID PA_A PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // metodo ::= visibilidad tipo ID PA_A PA_C LLA_A sentencias2 LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // metodo ::= visibilidad tipo ID PA_A PA_C LLA_A sentencias2 RETURN exp PUNTOCOMA LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // metodo ::= visibilidad tipo ID PA_A PA_C LLA_A RETURN exp PUNTOCOMA LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("metodo",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declararVariables ::= visibilidad tipo STATIC FINAL listaVariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declararVariables ::= visibilidad tipo STATIC listaVariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declararVariables ::= visibilidad tipo FINAL listaVariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declararVariables ::= visibilidad tipo listaVariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("declararVariables",27, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaVariables ::= ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaVariables ::= ID EQUAL exp 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaVariables ::= ID COMA listaVariables2 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaVariables ::= ID EQUAL exp COMA listaVariables2 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables",28, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaVariables2 ::= ID EQUAL exp COMA listaVariables2 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaVariables2 ::= ID COMA listaVariables2 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaVariables2 ::= ID EQUAL exp 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaVariables2 ::= ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("listaVariables2",29, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // llamadaFuncion ::= ID PA_A PA_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamadaFuncion ::= ID PA_A PA_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",26, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // constructor ::= PUBLIC ID PA_A PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("constructor",18, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cliclofor ::= FOR PA_A PA_C INT ID EQUAL exp PUNTOCOMA ID operadorRelacional exp PUNTOCOMA ID agregarfor LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cliclofor",19, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-15)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cliclofor ::= FOR PA_A PA_C INT ID EQUAL exp PUNTOCOMA ID operadorRelacional exp PUNTOCOMA ID agregarfor LLA_A sentenciasfor LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cliclofor",19, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-16)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ciclowhile ::= WHILE PA_A expBool PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("ciclowhile",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ciclowhile ::= WHILE PA_A expBool PA_C LLA_A sentenciasWhile LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("ciclowhile",15, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cicloDoWhile ::= DO LLA_A LLA_C WHILE PA_A expBool PA_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cicloDoWhile ::= DO LLA_A sentenciasWhile LLA_C WHILE PA_A expBool PA_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",20, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicionalif ::= IF PA_A expBool PA_C LLA_A sentanciasif LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicionalif ::= IF PA_A expBool PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicionalif ::= IF PA_A expBool PA_C LLA_A sentanciasif LLA_C ELSE LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicionalif ::= IF PA_A expBool PA_C LLA_A sentanciasif LLA_C ELSE LLA_A sentanciasif LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-10)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicionalif ::= IF PA_A expBool PA_C LLA_A LLA_C ELSE LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicionalif ::= IF PA_A expBool PA_C LLA_A LLA_C ELSE LLA_A sentanciasif LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalif",17, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicionalSwitch ::= SWITCH PA_A exp PA_C LLA_A contenidoSwitch LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalSwitch",24, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicionalSwitch ::= SWITCH PA_A exp PA_C LLA_A LLA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("condicionalSwitch",24, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // contenidoSwitch ::= CASE exp DOSPUNTOS BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenidoSwitch ::= CASE exp DOSPUNTOS sentenciasSwitch BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenidoSwitch ::= contenidoSwitch2 DEFAULT DOSPUNTOS sentenciasSwitch 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // contenidoSwitch ::= contenidoSwitch2 DEFAULT DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenidoSwitch ::= contenidoSwitch2 CASE exp DOSPUNTOS sentenciasSwitch BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contenidoSwitch ::= contenidoSwitch2 CASE exp DOSPUNTOS BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",22, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contenidoSwitch2 ::= contenidoSwitch2 CASE exp DOSPUNTOS sentenciasSwitch BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",23, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contenidoSwitch2 ::= contenidoSwitch2 CASE exp DOSPUNTOS BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",23, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // contenidoSwitch2 ::= CASE exp DOSPUNTOS sentenciasSwitch BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",23, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // contenidoSwitch2 ::= CASE exp DOSPUNTOS BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("contenidoSwitch2",23, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expBool ::= NOT expBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("expBool",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expBool ::= tBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("expBool",35, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tBool ::= tBool MENOR_QUE fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tBool ::= tBool MAYOR_QUE fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tBool ::= tBool MENOR_IGUAL fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tBool ::= tBool MAYOR_QUE fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tBool ::= fBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("tBool",33, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fBool ::= fBool DIFERENTE eBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("fBool",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fBool ::= fBool IGUAL eBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("fBool",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fBool ::= eBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("fBool",34, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // eBool ::= eBool AND gBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("eBool",36, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // eBool ::= gBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("eBool",36, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gBool ::= gBool OR hBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("gBool",37, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // gBool ::= hBool 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("gBool",37, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // hBool ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // hBool ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // hBool ::= ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // hBool ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // hBool ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // hBool ::= PA_A expBool PA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("hBool",38, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // agregarfor ::= SUMAR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("agregarfor",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // agregarfor ::= RESTAR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("agregarfor",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // agregarfor ::= EQUAL exp 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("agregarfor",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operadorRelacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operadorRelacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("operadorRelacional",13, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exp ::= exp MAS t 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exp ::= exp MENOS t 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exp ::= t 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("exp",32, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // t ::= t MUL f 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("t",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // t ::= t DIV f 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("t",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // t ::= f 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("t",30, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // f ::= ID 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // f ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // f ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // f ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // f ::= PA_A exp PA_C 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("f",31, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJava$do_action(
    int                        CUP$ParserJava$act_num,
    java_cup.runtime.lr_parser CUP$ParserJava$parser,
    java.util.Stack            CUP$ParserJava$stack,
    int                        CUP$ParserJava$top)
    throws java.lang.Exception
    {
              return CUP$ParserJava$do_action_part00000000(
                               CUP$ParserJava$act_num,
                               CUP$ParserJava$parser,
                               CUP$ParserJava$stack,
                               CUP$ParserJava$top);
    }
}

}
